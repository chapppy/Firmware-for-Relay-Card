
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab8c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000fc  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000168  0800b0ac  0800b0ac  0001b0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800b214  0800b214  0001b214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000002f8  20000000  0800b21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001e30  200002f8  0800b514  000202f8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20002128  0800b514  00022128  2**0
                  ALLOC
 10 .ARM.attributes 00000028  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 11 .debug_info   000262a3  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004d3d  00000000  00000000  000465c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000016b8  00000000  00000000  0004b300  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014c0  00000000  00000000  0004c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b1d3  00000000  00000000  0004de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007990  00000000  00000000  0005904b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000609db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000503c  00000000  00000000  00060a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  00065a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002f8 	.word	0x200002f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac34 	.word	0x0800ac34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002fc 	.word	0x200002fc
 8000104:	0800ac34 	.word	0x0800ac34

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <selfrel_offset31>:
 8000418:	6803      	ldr	r3, [r0, #0]
 800041a:	005a      	lsls	r2, r3, #1
 800041c:	d403      	bmi.n	8000426 <selfrel_offset31+0xe>
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	085b      	lsrs	r3, r3, #1
 8000422:	18c0      	adds	r0, r0, r3
 8000424:	4770      	bx	lr
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	0612      	lsls	r2, r2, #24
 800042a:	4313      	orrs	r3, r2
 800042c:	e7f9      	b.n	8000422 <selfrel_offset31+0xa>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <search_EIT_table>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	46de      	mov	lr, fp
 8000438:	4645      	mov	r5, r8
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	4681      	mov	r9, r0
 800043e:	b083      	sub	sp, #12
 8000440:	4692      	mov	sl, r2
 8000442:	2900      	cmp	r1, #0
 8000444:	d025      	beq.n	8000492 <search_EIT_table+0x62>
 8000446:	1e4b      	subs	r3, r1, #1
 8000448:	469b      	mov	fp, r3
 800044a:	2700      	movs	r7, #0
 800044c:	9301      	str	r3, [sp, #4]
 800044e:	465b      	mov	r3, fp
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	0fdc      	lsrs	r4, r3, #31
 8000454:	18e4      	adds	r4, r4, r3
 8000456:	464b      	mov	r3, r9
 8000458:	1064      	asrs	r4, r4, #1
 800045a:	00e5      	lsls	r5, r4, #3
 800045c:	195e      	adds	r6, r3, r5
 800045e:	0030      	movs	r0, r6
 8000460:	f7ff ffda 	bl	8000418 <selfrel_offset31>
 8000464:	9b01      	ldr	r3, [sp, #4]
 8000466:	4680      	mov	r8, r0
 8000468:	42a3      	cmp	r3, r4
 800046a:	d00b      	beq.n	8000484 <search_EIT_table+0x54>
 800046c:	0028      	movs	r0, r5
 800046e:	3008      	adds	r0, #8
 8000470:	4448      	add	r0, r9
 8000472:	f7ff ffd1 	bl	8000418 <selfrel_offset31>
 8000476:	45d0      	cmp	r8, sl
 8000478:	d806      	bhi.n	8000488 <search_EIT_table+0x58>
 800047a:	3801      	subs	r0, #1
 800047c:	4550      	cmp	r0, sl
 800047e:	d209      	bcs.n	8000494 <search_EIT_table+0x64>
 8000480:	1c67      	adds	r7, r4, #1
 8000482:	e7e4      	b.n	800044e <search_EIT_table+0x1e>
 8000484:	4550      	cmp	r0, sl
 8000486:	d905      	bls.n	8000494 <search_EIT_table+0x64>
 8000488:	42a7      	cmp	r7, r4
 800048a:	d002      	beq.n	8000492 <search_EIT_table+0x62>
 800048c:	1e63      	subs	r3, r4, #1
 800048e:	469b      	mov	fp, r3
 8000490:	e7dd      	b.n	800044e <search_EIT_table+0x1e>
 8000492:	2600      	movs	r6, #0
 8000494:	0030      	movs	r0, r6
 8000496:	b003      	add	sp, #12
 8000498:	bc3c      	pop	{r2, r3, r4, r5}
 800049a:	4690      	mov	r8, r2
 800049c:	4699      	mov	r9, r3
 800049e:	46a2      	mov	sl, r4
 80004a0:	46ab      	mov	fp, r5
 80004a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a4 <__gnu_unwind_get_pr_addr>:
 80004a4:	2801      	cmp	r0, #1
 80004a6:	d009      	beq.n	80004bc <__gnu_unwind_get_pr_addr+0x18>
 80004a8:	2802      	cmp	r0, #2
 80004aa:	d005      	beq.n	80004b8 <__gnu_unwind_get_pr_addr+0x14>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d001      	beq.n	80004b4 <__gnu_unwind_get_pr_addr+0x10>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <__gnu_unwind_get_pr_addr+0x1c>)
 80004b6:	e7fc      	b.n	80004b2 <__gnu_unwind_get_pr_addr+0xe>
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <__gnu_unwind_get_pr_addr+0x20>)
 80004ba:	e7fa      	b.n	80004b2 <__gnu_unwind_get_pr_addr+0xe>
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__gnu_unwind_get_pr_addr+0x24>)
 80004be:	e7f8      	b.n	80004b2 <__gnu_unwind_get_pr_addr+0xe>
 80004c0:	08000bc5 	.word	0x08000bc5
 80004c4:	08000bdd 	.word	0x08000bdd
 80004c8:	08000bd1 	.word	0x08000bd1

080004cc <get_eit_entry>:
 80004cc:	b530      	push	{r4, r5, lr}
 80004ce:	4b23      	ldr	r3, [pc, #140]	; (800055c <get_eit_entry+0x90>)
 80004d0:	b083      	sub	sp, #12
 80004d2:	0005      	movs	r5, r0
 80004d4:	1e8c      	subs	r4, r1, #2
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d02a      	beq.n	8000530 <get_eit_entry+0x64>
 80004da:	a901      	add	r1, sp, #4
 80004dc:	0020      	movs	r0, r4
 80004de:	e000      	b.n	80004e2 <get_eit_entry+0x16>
 80004e0:	bf00      	nop
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d020      	beq.n	8000528 <get_eit_entry+0x5c>
 80004e6:	9901      	ldr	r1, [sp, #4]
 80004e8:	0022      	movs	r2, r4
 80004ea:	f7ff ffa1 	bl	8000430 <search_EIT_table>
 80004ee:	1e04      	subs	r4, r0, #0
 80004f0:	d01a      	beq.n	8000528 <get_eit_entry+0x5c>
 80004f2:	f7ff ff91 	bl	8000418 <selfrel_offset31>
 80004f6:	6863      	ldr	r3, [r4, #4]
 80004f8:	64a8      	str	r0, [r5, #72]	; 0x48
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d010      	beq.n	8000520 <get_eit_entry+0x54>
 80004fe:	1d20      	adds	r0, r4, #4
 8000500:	2b00      	cmp	r3, #0
 8000502:	db1b      	blt.n	800053c <get_eit_entry+0x70>
 8000504:	f7ff ff88 	bl	8000418 <selfrel_offset31>
 8000508:	2300      	movs	r3, #0
 800050a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800050c:	652b      	str	r3, [r5, #80]	; 0x50
 800050e:	6803      	ldr	r3, [r0, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db17      	blt.n	8000544 <get_eit_entry+0x78>
 8000514:	f7ff ff80 	bl	8000418 <selfrel_offset31>
 8000518:	6128      	str	r0, [r5, #16]
 800051a:	2000      	movs	r0, #0
 800051c:	b003      	add	sp, #12
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	2300      	movs	r3, #0
 8000522:	2005      	movs	r0, #5
 8000524:	612b      	str	r3, [r5, #16]
 8000526:	e7f9      	b.n	800051c <get_eit_entry+0x50>
 8000528:	2300      	movs	r3, #0
 800052a:	2009      	movs	r0, #9
 800052c:	612b      	str	r3, [r5, #16]
 800052e:	e7f5      	b.n	800051c <get_eit_entry+0x50>
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <get_eit_entry+0x94>)
 8000532:	490c      	ldr	r1, [pc, #48]	; (8000564 <get_eit_entry+0x98>)
 8000534:	1a09      	subs	r1, r1, r0
 8000536:	10c9      	asrs	r1, r1, #3
 8000538:	9101      	str	r1, [sp, #4]
 800053a:	e7d5      	b.n	80004e8 <get_eit_entry+0x1c>
 800053c:	2301      	movs	r3, #1
 800053e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8000540:	652b      	str	r3, [r5, #80]	; 0x50
 8000542:	e7e4      	b.n	800050e <get_eit_entry+0x42>
 8000544:	0118      	lsls	r0, r3, #4
 8000546:	0f00      	lsrs	r0, r0, #28
 8000548:	f7ff ffac 	bl	80004a4 <__gnu_unwind_get_pr_addr>
 800054c:	6128      	str	r0, [r5, #16]
 800054e:	2800      	cmp	r0, #0
 8000550:	d101      	bne.n	8000556 <get_eit_entry+0x8a>
 8000552:	3009      	adds	r0, #9
 8000554:	e7e2      	b.n	800051c <get_eit_entry+0x50>
 8000556:	2000      	movs	r0, #0
 8000558:	e7e0      	b.n	800051c <get_eit_entry+0x50>
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	00000000 	.word	0x00000000
 8000560:	0800b0ac 	.word	0x0800b0ac
 8000564:	0800b214 	.word	0x0800b214

08000568 <restore_non_core_regs>:
 8000568:	6803      	ldr	r3, [r0, #0]
 800056a:	b510      	push	{r4, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	07da      	lsls	r2, r3, #31
 8000570:	d405      	bmi.n	800057e <restore_non_core_regs+0x16>
 8000572:	079b      	lsls	r3, r3, #30
 8000574:	d50f      	bpl.n	8000596 <restore_non_core_regs+0x2e>
 8000576:	3048      	adds	r0, #72	; 0x48
 8000578:	f000 fc84 	bl	8000e84 <__gnu_Unwind_Restore_VFP_D>
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	075a      	lsls	r2, r3, #29
 8000580:	d50f      	bpl.n	80005a2 <restore_non_core_regs+0x3a>
 8000582:	071a      	lsls	r2, r3, #28
 8000584:	d514      	bpl.n	80005b0 <restore_non_core_regs+0x48>
 8000586:	06db      	lsls	r3, r3, #27
 8000588:	d404      	bmi.n	8000594 <restore_non_core_regs+0x2c>
 800058a:	0020      	movs	r0, r4
 800058c:	30d1      	adds	r0, #209	; 0xd1
 800058e:	30ff      	adds	r0, #255	; 0xff
 8000590:	f000 fc84 	bl	8000e9c <__gnu_Unwind_Restore_WMMXC>
 8000594:	bd10      	pop	{r4, pc}
 8000596:	3048      	adds	r0, #72	; 0x48
 8000598:	f000 fc70 	bl	8000e7c <__gnu_Unwind_Restore_VFP>
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	075a      	lsls	r2, r3, #29
 80005a0:	d4ef      	bmi.n	8000582 <restore_non_core_regs+0x1a>
 80005a2:	0020      	movs	r0, r4
 80005a4:	30d0      	adds	r0, #208	; 0xd0
 80005a6:	f000 fc71 	bl	8000e8c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	071a      	lsls	r2, r3, #28
 80005ae:	d4ea      	bmi.n	8000586 <restore_non_core_regs+0x1e>
 80005b0:	0020      	movs	r0, r4
 80005b2:	3051      	adds	r0, #81	; 0x51
 80005b4:	30ff      	adds	r0, #255	; 0xff
 80005b6:	f000 fc6d 	bl	8000e94 <__gnu_Unwind_Restore_WMMXD>
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	e7e3      	b.n	8000586 <restore_non_core_regs+0x1e>
 80005be:	46c0      	nop			; (mov r8, r8)

080005c0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80005c0:	6803      	ldr	r3, [r0, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d000      	beq.n	80005c8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80005c6:	181b      	adds	r3, r3, r0
 80005c8:	0018      	movs	r0, r3
 80005ca:	4770      	bx	lr

080005cc <__gnu_unwind_24bit.isra.1>:
 80005cc:	2009      	movs	r0, #9
 80005ce:	4770      	bx	lr

080005d0 <_Unwind_DebugHook>:
 80005d0:	4770      	bx	lr
 80005d2:	46c0      	nop			; (mov r8, r8)

080005d4 <unwind_phase2>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	0004      	movs	r4, r0
 80005d8:	000d      	movs	r5, r1
 80005da:	e008      	b.n	80005ee <unwind_phase2+0x1a>
 80005dc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80005de:	002a      	movs	r2, r5
 80005e0:	6163      	str	r3, [r4, #20]
 80005e2:	0021      	movs	r1, r4
 80005e4:	2001      	movs	r0, #1
 80005e6:	6923      	ldr	r3, [r4, #16]
 80005e8:	4798      	blx	r3
 80005ea:	2808      	cmp	r0, #8
 80005ec:	d107      	bne.n	80005fe <unwind_phase2+0x2a>
 80005ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005f0:	0020      	movs	r0, r4
 80005f2:	f7ff ff6b 	bl	80004cc <get_eit_entry>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d0f0      	beq.n	80005dc <unwind_phase2+0x8>
 80005fa:	f00a fab8 	bl	800ab6e <abort>
 80005fe:	2807      	cmp	r0, #7
 8000600:	d1fb      	bne.n	80005fa <unwind_phase2+0x26>
 8000602:	2000      	movs	r0, #0
 8000604:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000606:	f7ff ffe3 	bl	80005d0 <_Unwind_DebugHook>
 800060a:	1d28      	adds	r0, r5, #4
 800060c:	f000 fc20 	bl	8000e50 <__restore_core_regs>

08000610 <unwind_phase2_forced>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	46ce      	mov	lr, r9
 8000614:	4647      	mov	r7, r8
 8000616:	b580      	push	{r7, lr}
 8000618:	68c3      	ldr	r3, [r0, #12]
 800061a:	4c32      	ldr	r4, [pc, #200]	; (80006e4 <unwind_phase2_forced+0xd4>)
 800061c:	4698      	mov	r8, r3
 800061e:	44a5      	add	sp, r4
 8000620:	6983      	ldr	r3, [r0, #24]
 8000622:	0006      	movs	r6, r0
 8000624:	0014      	movs	r4, r2
 8000626:	3104      	adds	r1, #4
 8000628:	2240      	movs	r2, #64	; 0x40
 800062a:	a805      	add	r0, sp, #20
 800062c:	4699      	mov	r9, r3
 800062e:	f00a fa8d 	bl	800ab4c <memcpy>
 8000632:	2300      	movs	r3, #0
 8000634:	ad04      	add	r5, sp, #16
 8000636:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000638:	0030      	movs	r0, r6
 800063a:	9304      	str	r3, [sp, #16]
 800063c:	f7ff ff46 	bl	80004cc <get_eit_entry>
 8000640:	1e63      	subs	r3, r4, #1
 8000642:	419c      	sbcs	r4, r3
 8000644:	0007      	movs	r7, r0
 8000646:	3409      	adds	r4, #9
 8000648:	2f00      	cmp	r7, #0
 800064a:	d015      	beq.n	8000678 <unwind_phase2_forced+0x68>
 800064c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800064e:	2110      	movs	r1, #16
 8000650:	646b      	str	r3, [r5, #68]	; 0x44
 8000652:	464b      	mov	r3, r9
 8000654:	4321      	orrs	r1, r4
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	b2c9      	uxtb	r1, r1
 800065a:	9500      	str	r5, [sp, #0]
 800065c:	0033      	movs	r3, r6
 800065e:	0032      	movs	r2, r6
 8000660:	2001      	movs	r0, #1
 8000662:	47c0      	blx	r8
 8000664:	2800      	cmp	r0, #0
 8000666:	d133      	bne.n	80006d0 <unwind_phase2_forced+0xc0>
 8000668:	0038      	movs	r0, r7
 800066a:	23f5      	movs	r3, #245	; 0xf5
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	449d      	add	sp, r3
 8000670:	bc0c      	pop	{r2, r3}
 8000672:	4690      	mov	r8, r2
 8000674:	4699      	mov	r9, r3
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000678:	22f0      	movs	r2, #240	; 0xf0
 800067a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	6173      	str	r3, [r6, #20]
 8000680:	0029      	movs	r1, r5
 8000682:	a87c      	add	r0, sp, #496	; 0x1f0
 8000684:	f00a fa62 	bl	800ab4c <memcpy>
 8000688:	aa7c      	add	r2, sp, #496	; 0x1f0
 800068a:	0031      	movs	r1, r6
 800068c:	6933      	ldr	r3, [r6, #16]
 800068e:	0020      	movs	r0, r4
 8000690:	4798      	blx	r3
 8000692:	9b8a      	ldr	r3, [sp, #552]	; 0x228
 8000694:	0007      	movs	r7, r0
 8000696:	646b      	str	r3, [r5, #68]	; 0x44
 8000698:	9303      	str	r3, [sp, #12]
 800069a:	464b      	mov	r3, r9
 800069c:	9500      	str	r5, [sp, #0]
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	0032      	movs	r2, r6
 80006a2:	0033      	movs	r3, r6
 80006a4:	0021      	movs	r1, r4
 80006a6:	2001      	movs	r0, #1
 80006a8:	47c0      	blx	r8
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d110      	bne.n	80006d0 <unwind_phase2_forced+0xc0>
 80006ae:	22f0      	movs	r2, #240	; 0xf0
 80006b0:	a97c      	add	r1, sp, #496	; 0x1f0
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	0028      	movs	r0, r5
 80006b6:	f00a fa49 	bl	800ab4c <memcpy>
 80006ba:	2f08      	cmp	r7, #8
 80006bc:	d106      	bne.n	80006cc <unwind_phase2_forced+0xbc>
 80006be:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006c0:	0030      	movs	r0, r6
 80006c2:	f7ff ff03 	bl	80004cc <get_eit_entry>
 80006c6:	2409      	movs	r4, #9
 80006c8:	0007      	movs	r7, r0
 80006ca:	e7bd      	b.n	8000648 <unwind_phase2_forced+0x38>
 80006cc:	2f07      	cmp	r7, #7
 80006ce:	d001      	beq.n	80006d4 <unwind_phase2_forced+0xc4>
 80006d0:	2709      	movs	r7, #9
 80006d2:	e7c9      	b.n	8000668 <unwind_phase2_forced+0x58>
 80006d4:	2000      	movs	r0, #0
 80006d6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006d8:	f7ff ff7a 	bl	80005d0 <_Unwind_DebugHook>
 80006dc:	a805      	add	r0, sp, #20
 80006de:	f000 fbb7 	bl	8000e50 <__restore_core_regs>
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	fffffc2c 	.word	0xfffffc2c

080006e8 <_Unwind_GetCFA>:
 80006e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80006ea:	4770      	bx	lr

080006ec <__gnu_Unwind_RaiseException>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80006f0:	b0fa      	sub	sp, #488	; 0x1e8
 80006f2:	640b      	str	r3, [r1, #64]	; 0x40
 80006f4:	0004      	movs	r4, r0
 80006f6:	000e      	movs	r6, r1
 80006f8:	2240      	movs	r2, #64	; 0x40
 80006fa:	3104      	adds	r1, #4
 80006fc:	a803      	add	r0, sp, #12
 80006fe:	f00a fa25 	bl	800ab4c <memcpy>
 8000702:	2301      	movs	r3, #1
 8000704:	425b      	negs	r3, r3
 8000706:	9302      	str	r3, [sp, #8]
 8000708:	e006      	b.n	8000718 <__gnu_Unwind_RaiseException+0x2c>
 800070a:	aa02      	add	r2, sp, #8
 800070c:	0021      	movs	r1, r4
 800070e:	6923      	ldr	r3, [r4, #16]
 8000710:	4798      	blx	r3
 8000712:	0005      	movs	r5, r0
 8000714:	2808      	cmp	r0, #8
 8000716:	d10a      	bne.n	800072e <__gnu_Unwind_RaiseException+0x42>
 8000718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800071a:	0020      	movs	r0, r4
 800071c:	0019      	movs	r1, r3
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	f7ff fed4 	bl	80004cc <get_eit_entry>
 8000724:	2800      	cmp	r0, #0
 8000726:	d0f0      	beq.n	800070a <__gnu_Unwind_RaiseException+0x1e>
 8000728:	2009      	movs	r0, #9
 800072a:	b07a      	add	sp, #488	; 0x1e8
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	a802      	add	r0, sp, #8
 8000730:	f7ff ff1a 	bl	8000568 <restore_non_core_regs>
 8000734:	2d06      	cmp	r5, #6
 8000736:	d1f7      	bne.n	8000728 <__gnu_Unwind_RaiseException+0x3c>
 8000738:	0031      	movs	r1, r6
 800073a:	0020      	movs	r0, r4
 800073c:	f7ff ff4a 	bl	80005d4 <unwind_phase2>

08000740 <__gnu_Unwind_ForcedUnwind>:
 8000740:	b510      	push	{r4, lr}
 8000742:	6182      	str	r2, [r0, #24]
 8000744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000746:	60c1      	str	r1, [r0, #12]
 8000748:	641a      	str	r2, [r3, #64]	; 0x40
 800074a:	0019      	movs	r1, r3
 800074c:	2200      	movs	r2, #0
 800074e:	f7ff ff5f 	bl	8000610 <unwind_phase2_forced>
 8000752:	bd10      	pop	{r4, pc}

08000754 <__gnu_Unwind_Resume>:
 8000754:	6943      	ldr	r3, [r0, #20]
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	640b      	str	r3, [r1, #64]	; 0x40
 800075a:	68c3      	ldr	r3, [r0, #12]
 800075c:	0004      	movs	r4, r0
 800075e:	000d      	movs	r5, r1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <__gnu_Unwind_Resume+0x1a>
 8000764:	2201      	movs	r2, #1
 8000766:	f7ff ff53 	bl	8000610 <unwind_phase2_forced>
 800076a:	f00a fa00 	bl	800ab6e <abort>
 800076e:	000a      	movs	r2, r1
 8000770:	6923      	ldr	r3, [r4, #16]
 8000772:	0001      	movs	r1, r0
 8000774:	2002      	movs	r0, #2
 8000776:	4798      	blx	r3
 8000778:	2807      	cmp	r0, #7
 800077a:	d007      	beq.n	800078c <__gnu_Unwind_Resume+0x38>
 800077c:	2808      	cmp	r0, #8
 800077e:	d103      	bne.n	8000788 <__gnu_Unwind_Resume+0x34>
 8000780:	0029      	movs	r1, r5
 8000782:	0020      	movs	r0, r4
 8000784:	f7ff ff26 	bl	80005d4 <unwind_phase2>
 8000788:	f00a f9f1 	bl	800ab6e <abort>
 800078c:	2000      	movs	r0, #0
 800078e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000790:	f7ff ff1e 	bl	80005d0 <_Unwind_DebugHook>
 8000794:	1d28      	adds	r0, r5, #4
 8000796:	f000 fb5b 	bl	8000e50 <__restore_core_regs>
 800079a:	46c0      	nop			; (mov r8, r8)

0800079c <__gnu_Unwind_Resume_or_Rethrow>:
 800079c:	68c3      	ldr	r3, [r0, #12]
 800079e:	b510      	push	{r4, lr}
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <__gnu_Unwind_Resume_or_Rethrow+0x14>
 80007a4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007a6:	2200      	movs	r2, #0
 80007a8:	640b      	str	r3, [r1, #64]	; 0x40
 80007aa:	f7ff ff31 	bl	8000610 <unwind_phase2_forced>
 80007ae:	bd10      	pop	{r4, pc}
 80007b0:	f7ff ff9c 	bl	80006ec <__gnu_Unwind_RaiseException>
 80007b4:	e7fb      	b.n	80007ae <__gnu_Unwind_Resume_or_Rethrow+0x12>
 80007b6:	46c0      	nop			; (mov r8, r8)

080007b8 <_Unwind_Complete>:
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			; (mov r8, r8)

080007bc <_Unwind_DeleteException>:
 80007bc:	6883      	ldr	r3, [r0, #8]
 80007be:	b510      	push	{r4, lr}
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <_Unwind_DeleteException+0xe>
 80007c4:	0001      	movs	r1, r0
 80007c6:	2001      	movs	r0, #1
 80007c8:	4798      	blx	r3
 80007ca:	bd10      	pop	{r4, pc}

080007cc <_Unwind_VRS_Get>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	2901      	cmp	r1, #1
 80007d0:	d007      	beq.n	80007e2 <_Unwind_VRS_Get+0x16>
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d007      	beq.n	80007e6 <_Unwind_VRS_Get+0x1a>
 80007d6:	3903      	subs	r1, #3
 80007d8:	2402      	movs	r4, #2
 80007da:	2901      	cmp	r1, #1
 80007dc:	d901      	bls.n	80007e2 <_Unwind_VRS_Get+0x16>
 80007de:	0020      	movs	r0, r4
 80007e0:	bd10      	pop	{r4, pc}
 80007e2:	2401      	movs	r4, #1
 80007e4:	e7fb      	b.n	80007de <_Unwind_VRS_Get+0x12>
 80007e6:	2402      	movs	r4, #2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f8      	bne.n	80007de <_Unwind_VRS_Get+0x12>
 80007ec:	2a0f      	cmp	r2, #15
 80007ee:	d8f6      	bhi.n	80007de <_Unwind_VRS_Get+0x12>
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	1882      	adds	r2, r0, r2
 80007f4:	6852      	ldr	r2, [r2, #4]
 80007f6:	9b02      	ldr	r3, [sp, #8]
 80007f8:	2400      	movs	r4, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e7ef      	b.n	80007de <_Unwind_VRS_Get+0x12>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <_Unwind_GetGR>:
 8000800:	b500      	push	{lr}
 8000802:	b085      	sub	sp, #20
 8000804:	ab03      	add	r3, sp, #12
 8000806:	000a      	movs	r2, r1
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2100      	movs	r1, #0
 800080c:	2300      	movs	r3, #0
 800080e:	f7ff ffdd 	bl	80007cc <_Unwind_VRS_Get>
 8000812:	9803      	ldr	r0, [sp, #12]
 8000814:	b005      	add	sp, #20
 8000816:	bd00      	pop	{pc}

08000818 <_Unwind_VRS_Set>:
 8000818:	b510      	push	{r4, lr}
 800081a:	2901      	cmp	r1, #1
 800081c:	d007      	beq.n	800082e <_Unwind_VRS_Set+0x16>
 800081e:	2900      	cmp	r1, #0
 8000820:	d007      	beq.n	8000832 <_Unwind_VRS_Set+0x1a>
 8000822:	3903      	subs	r1, #3
 8000824:	2402      	movs	r4, #2
 8000826:	2901      	cmp	r1, #1
 8000828:	d901      	bls.n	800082e <_Unwind_VRS_Set+0x16>
 800082a:	0020      	movs	r0, r4
 800082c:	bd10      	pop	{r4, pc}
 800082e:	2401      	movs	r4, #1
 8000830:	e7fb      	b.n	800082a <_Unwind_VRS_Set+0x12>
 8000832:	2402      	movs	r4, #2
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1f8      	bne.n	800082a <_Unwind_VRS_Set+0x12>
 8000838:	2a0f      	cmp	r2, #15
 800083a:	d8f6      	bhi.n	800082a <_Unwind_VRS_Set+0x12>
 800083c:	9b02      	ldr	r3, [sp, #8]
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1882      	adds	r2, r0, r2
 8000844:	6053      	str	r3, [r2, #4]
 8000846:	2400      	movs	r4, #0
 8000848:	e7ef      	b.n	800082a <_Unwind_VRS_Set+0x12>
 800084a:	46c0      	nop			; (mov r8, r8)

0800084c <_Unwind_SetGR>:
 800084c:	b500      	push	{lr}
 800084e:	b085      	sub	sp, #20
 8000850:	ab03      	add	r3, sp, #12
 8000852:	9203      	str	r2, [sp, #12]
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	000a      	movs	r2, r1
 8000858:	2300      	movs	r3, #0
 800085a:	2100      	movs	r1, #0
 800085c:	f7ff ffdc 	bl	8000818 <_Unwind_VRS_Set>
 8000860:	b005      	add	sp, #20
 8000862:	bd00      	pop	{pc}

08000864 <__gnu_Unwind_Backtrace>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	4c1a      	ldr	r4, [pc, #104]	; (80008d0 <__gnu_Unwind_Backtrace+0x6c>)
 8000868:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800086a:	44a5      	add	sp, r4
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	0006      	movs	r6, r0
 8000870:	000d      	movs	r5, r1
 8000872:	a819      	add	r0, sp, #100	; 0x64
 8000874:	1d11      	adds	r1, r2, #4
 8000876:	2240      	movs	r2, #64	; 0x40
 8000878:	f00a f968 	bl	800ab4c <memcpy>
 800087c:	2301      	movs	r3, #1
 800087e:	425b      	negs	r3, r3
 8000880:	9318      	str	r3, [sp, #96]	; 0x60
 8000882:	e014      	b.n	80008ae <__gnu_Unwind_Backtrace+0x4a>
 8000884:	210c      	movs	r1, #12
 8000886:	a818      	add	r0, sp, #96	; 0x60
 8000888:	aa02      	add	r2, sp, #8
 800088a:	f7ff ffdf 	bl	800084c <_Unwind_SetGR>
 800088e:	0029      	movs	r1, r5
 8000890:	a818      	add	r0, sp, #96	; 0x60
 8000892:	47b0      	blx	r6
 8000894:	2800      	cmp	r0, #0
 8000896:	d112      	bne.n	80008be <__gnu_Unwind_Backtrace+0x5a>
 8000898:	9b06      	ldr	r3, [sp, #24]
 800089a:	aa18      	add	r2, sp, #96	; 0x60
 800089c:	a902      	add	r1, sp, #8
 800089e:	3008      	adds	r0, #8
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	4798      	blx	r3
 80008a4:	0004      	movs	r4, r0
 80008a6:	2805      	cmp	r0, #5
 80008a8:	d00a      	beq.n	80008c0 <__gnu_Unwind_Backtrace+0x5c>
 80008aa:	2809      	cmp	r0, #9
 80008ac:	d007      	beq.n	80008be <__gnu_Unwind_Backtrace+0x5a>
 80008ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80008b0:	a802      	add	r0, sp, #8
 80008b2:	0019      	movs	r1, r3
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	f7ff fe09 	bl	80004cc <get_eit_entry>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d0e2      	beq.n	8000884 <__gnu_Unwind_Backtrace+0x20>
 80008be:	2409      	movs	r4, #9
 80008c0:	a818      	add	r0, sp, #96	; 0x60
 80008c2:	f7ff fe51 	bl	8000568 <restore_non_core_regs>
 80008c6:	0020      	movs	r0, r4
 80008c8:	2390      	movs	r3, #144	; 0x90
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	449d      	add	sp, r3
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	fffffdc0 	.word	0xfffffdc0

080008d4 <__gnu_unwind_pr_common>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	46de      	mov	lr, fp
 80008d8:	464e      	mov	r6, r9
 80008da:	4645      	mov	r5, r8
 80008dc:	4657      	mov	r7, sl
 80008de:	4693      	mov	fp, r2
 80008e0:	2203      	movs	r2, #3
 80008e2:	b5e0      	push	{r5, r6, r7, lr}
 80008e4:	001e      	movs	r6, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	b08b      	sub	sp, #44	; 0x2c
 80008ea:	4003      	ands	r3, r0
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80008f0:	000d      	movs	r5, r1
 80008f2:	1d1c      	adds	r4, r3, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	9408      	str	r4, [sp, #32]
 80008f8:	9307      	str	r3, [sp, #28]
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d166      	bne.n	80009cc <__gnu_unwind_pr_common+0xf8>
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	9307      	str	r3, [sp, #28]
 8000902:	ab06      	add	r3, sp, #24
 8000904:	735e      	strb	r6, [r3, #13]
 8000906:	731a      	strb	r2, [r3, #12]
 8000908:	9b01      	ldr	r3, [sp, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d100      	bne.n	8000910 <__gnu_unwind_pr_common+0x3c>
 800090e:	e06e      	b.n	80009ee <__gnu_unwind_pr_common+0x11a>
 8000910:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000912:	07db      	lsls	r3, r3, #31
 8000914:	d447      	bmi.n	80009a6 <__gnu_unwind_pr_common+0xd2>
 8000916:	2300      	movs	r3, #0
 8000918:	46a8      	mov	r8, r5
 800091a:	46b2      	mov	sl, r6
 800091c:	9302      	str	r3, [sp, #8]
 800091e:	3308      	adds	r3, #8
 8000920:	4003      	ands	r3, r0
 8000922:	9303      	str	r3, [sp, #12]
 8000924:	6825      	ldr	r5, [r4, #0]
 8000926:	2d00      	cmp	r5, #0
 8000928:	d100      	bne.n	800092c <__gnu_unwind_pr_common+0x58>
 800092a:	e137      	b.n	8000b9c <__gnu_unwind_pr_common+0x2c8>
 800092c:	4653      	mov	r3, sl
 800092e:	2b02      	cmp	r3, #2
 8000930:	d049      	beq.n	80009c6 <__gnu_unwind_pr_common+0xf2>
 8000932:	8825      	ldrh	r5, [r4, #0]
 8000934:	8866      	ldrh	r6, [r4, #2]
 8000936:	3404      	adds	r4, #4
 8000938:	2301      	movs	r3, #1
 800093a:	0037      	movs	r7, r6
 800093c:	4699      	mov	r9, r3
 800093e:	439f      	bics	r7, r3
 8000940:	4643      	mov	r3, r8
 8000942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000944:	210f      	movs	r1, #15
 8000946:	469c      	mov	ip, r3
 8000948:	4658      	mov	r0, fp
 800094a:	4467      	add	r7, ip
 800094c:	f7ff ff58 	bl	8000800 <_Unwind_GetGR>
 8000950:	2200      	movs	r2, #0
 8000952:	4287      	cmp	r7, r0
 8000954:	d806      	bhi.n	8000964 <__gnu_unwind_pr_common+0x90>
 8000956:	002a      	movs	r2, r5
 8000958:	464b      	mov	r3, r9
 800095a:	439a      	bics	r2, r3
 800095c:	19d7      	adds	r7, r2, r7
 800095e:	42b8      	cmp	r0, r7
 8000960:	4180      	sbcs	r0, r0
 8000962:	4242      	negs	r2, r0
 8000964:	2302      	movs	r3, #2
 8000966:	2101      	movs	r1, #1
 8000968:	0076      	lsls	r6, r6, #1
 800096a:	4033      	ands	r3, r6
 800096c:	400d      	ands	r5, r1
 800096e:	432b      	orrs	r3, r5
 8000970:	2b01      	cmp	r3, #1
 8000972:	d03e      	beq.n	80009f2 <__gnu_unwind_pr_common+0x11e>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d05a      	beq.n	8000a2e <__gnu_unwind_pr_common+0x15a>
 8000978:	2b02      	cmp	r3, #2
 800097a:	d11c      	bne.n	80009b6 <__gnu_unwind_pr_common+0xe2>
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	9901      	ldr	r1, [sp, #4]
 8000980:	005f      	lsls	r7, r3, #1
 8000982:	087f      	lsrs	r7, r7, #1
 8000984:	2900      	cmp	r1, #0
 8000986:	d165      	bne.n	8000a54 <__gnu_unwind_pr_common+0x180>
 8000988:	2a00      	cmp	r2, #0
 800098a:	d006      	beq.n	800099a <__gnu_unwind_pr_common+0xc6>
 800098c:	9a03      	ldr	r2, [sp, #12]
 800098e:	2a00      	cmp	r2, #0
 8000990:	d100      	bne.n	8000994 <__gnu_unwind_pr_common+0xc0>
 8000992:	e088      	b.n	8000aa6 <__gnu_unwind_pr_common+0x1d2>
 8000994:	2f00      	cmp	r7, #0
 8000996:	d100      	bne.n	800099a <__gnu_unwind_pr_common+0xc6>
 8000998:	e0aa      	b.n	8000af0 <__gnu_unwind_pr_common+0x21c>
 800099a:	2b00      	cmp	r3, #0
 800099c:	db65      	blt.n	8000a6a <__gnu_unwind_pr_common+0x196>
 800099e:	3701      	adds	r7, #1
 80009a0:	00bf      	lsls	r7, r7, #2
 80009a2:	19e4      	adds	r4, r4, r7
 80009a4:	e7be      	b.n	8000924 <__gnu_unwind_pr_common+0x50>
 80009a6:	2300      	movs	r3, #0
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	2e02      	cmp	r6, #2
 80009ac:	dd47      	ble.n	8000a3e <__gnu_unwind_pr_common+0x16a>
 80009ae:	f7ff fe0d 	bl	80005cc <__gnu_unwind_24bit.isra.1>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d049      	beq.n	8000a4a <__gnu_unwind_pr_common+0x176>
 80009b6:	2009      	movs	r0, #9
 80009b8:	b00b      	add	sp, #44	; 0x2c
 80009ba:	bc3c      	pop	{r2, r3, r4, r5}
 80009bc:	4690      	mov	r8, r2
 80009be:	4699      	mov	r9, r3
 80009c0:	46a2      	mov	sl, r4
 80009c2:	46ab      	mov	fp, r5
 80009c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c6:	6866      	ldr	r6, [r4, #4]
 80009c8:	3408      	adds	r4, #8
 80009ca:	e7b5      	b.n	8000938 <__gnu_unwind_pr_common+0x64>
 80009cc:	2e02      	cmp	r6, #2
 80009ce:	dc9b      	bgt.n	8000908 <__gnu_unwind_pr_common+0x34>
 80009d0:	0c1a      	lsrs	r2, r3, #16
 80009d2:	041b      	lsls	r3, r3, #16
 80009d4:	9307      	str	r3, [sp, #28]
 80009d6:	2302      	movs	r3, #2
 80009d8:	a906      	add	r1, sp, #24
 80009da:	730b      	strb	r3, [r1, #12]
 80009dc:	33fd      	adds	r3, #253	; 0xfd
 80009de:	4013      	ands	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	18e4      	adds	r4, r4, r3
 80009e4:	9b01      	ldr	r3, [sp, #4]
 80009e6:	734a      	strb	r2, [r1, #13]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d000      	beq.n	80009ee <__gnu_unwind_pr_common+0x11a>
 80009ec:	e790      	b.n	8000910 <__gnu_unwind_pr_common+0x3c>
 80009ee:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80009f0:	e78e      	b.n	8000910 <__gnu_unwind_pr_common+0x3c>
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d13a      	bne.n	8000a6e <__gnu_unwind_pr_common+0x19a>
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d016      	beq.n	8000a2a <__gnu_unwind_pr_common+0x156>
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	0fdd      	lsrs	r5, r3, #31
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	1c9a      	adds	r2, r3, #2
 8000a04:	d0d7      	beq.n	80009b6 <__gnu_unwind_pr_common+0xe2>
 8000a06:	4642      	mov	r2, r8
 8000a08:	3258      	adds	r2, #88	; 0x58
 8000a0a:	9206      	str	r2, [sp, #24]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	d100      	bne.n	8000a12 <__gnu_unwind_pr_common+0x13e>
 8000a10:	e0c6      	b.n	8000ba0 <__gnu_unwind_pr_common+0x2cc>
 8000a12:	1d20      	adds	r0, r4, #4
 8000a14:	f7ff fdd4 	bl	80005c0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000a18:	ab06      	add	r3, sp, #24
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	4640      	mov	r0, r8
 8000a20:	e000      	b.n	8000a24 <__gnu_unwind_pr_common+0x150>
 8000a22:	bf00      	nop
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d000      	beq.n	8000a2a <__gnu_unwind_pr_common+0x156>
 8000a28:	e0a7      	b.n	8000b7a <__gnu_unwind_pr_common+0x2a6>
 8000a2a:	3408      	adds	r4, #8
 8000a2c:	e77a      	b.n	8000924 <__gnu_unwind_pr_common+0x50>
 8000a2e:	9b01      	ldr	r3, [sp, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <__gnu_unwind_pr_common+0x166>
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	d000      	beq.n	8000a3a <__gnu_unwind_pr_common+0x166>
 8000a38:	e08b      	b.n	8000b52 <__gnu_unwind_pr_common+0x27e>
 8000a3a:	3404      	adds	r4, #4
 8000a3c:	e772      	b.n	8000924 <__gnu_unwind_pr_common+0x50>
 8000a3e:	a907      	add	r1, sp, #28
 8000a40:	4658      	mov	r0, fp
 8000a42:	f000 fad1 	bl	8000fe8 <__gnu_unwind_execute>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d1b5      	bne.n	80009b6 <__gnu_unwind_pr_common+0xe2>
 8000a4a:	9b02      	ldr	r3, [sp, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d15d      	bne.n	8000b0c <__gnu_unwind_pr_common+0x238>
 8000a50:	2008      	movs	r0, #8
 8000a52:	e7b1      	b.n	80009b8 <__gnu_unwind_pr_common+0xe4>
 8000a54:	4643      	mov	r3, r8
 8000a56:	210d      	movs	r1, #13
 8000a58:	4658      	mov	r0, fp
 8000a5a:	6a1d      	ldr	r5, [r3, #32]
 8000a5c:	f7ff fed0 	bl	8000800 <_Unwind_GetGR>
 8000a60:	4285      	cmp	r5, r0
 8000a62:	d063      	beq.n	8000b2c <__gnu_unwind_pr_common+0x258>
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da99      	bge.n	800099e <__gnu_unwind_pr_common+0xca>
 8000a6a:	3404      	adds	r4, #4
 8000a6c:	e797      	b.n	800099e <__gnu_unwind_pr_common+0xca>
 8000a6e:	4643      	mov	r3, r8
 8000a70:	210d      	movs	r1, #13
 8000a72:	4658      	mov	r0, fp
 8000a74:	6a1d      	ldr	r5, [r3, #32]
 8000a76:	f7ff fec3 	bl	8000800 <_Unwind_GetGR>
 8000a7a:	4285      	cmp	r5, r0
 8000a7c:	d1d5      	bne.n	8000a2a <__gnu_unwind_pr_common+0x156>
 8000a7e:	4643      	mov	r3, r8
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	429c      	cmp	r4, r3
 8000a84:	d1d1      	bne.n	8000a2a <__gnu_unwind_pr_common+0x156>
 8000a86:	4645      	mov	r5, r8
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f7ff fcc5 	bl	8000418 <selfrel_offset31>
 8000a8e:	210f      	movs	r1, #15
 8000a90:	0002      	movs	r2, r0
 8000a92:	4658      	mov	r0, fp
 8000a94:	f7ff feda 	bl	800084c <_Unwind_SetGR>
 8000a98:	4658      	mov	r0, fp
 8000a9a:	002a      	movs	r2, r5
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f7ff fed5 	bl	800084c <_Unwind_SetGR>
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	e788      	b.n	80009b8 <__gnu_unwind_pr_common+0xe4>
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d022      	beq.n	8000af0 <__gnu_unwind_pr_common+0x21c>
 8000aaa:	2358      	movs	r3, #88	; 0x58
 8000aac:	4651      	mov	r1, sl
 8000aae:	4443      	add	r3, r8
 8000ab0:	aa06      	add	r2, sp, #24
 8000ab2:	46ba      	mov	sl, r7
 8000ab4:	1d25      	adds	r5, r4, #4
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	9404      	str	r4, [sp, #16]
 8000aba:	9105      	str	r1, [sp, #20]
 8000abc:	001f      	movs	r7, r3
 8000abe:	4691      	mov	r9, r2
 8000ac0:	e003      	b.n	8000aca <__gnu_unwind_pr_common+0x1f6>
 8000ac2:	3504      	adds	r5, #4
 8000ac4:	0026      	movs	r6, r4
 8000ac6:	45a2      	cmp	sl, r4
 8000ac8:	d014      	beq.n	8000af4 <__gnu_unwind_pr_common+0x220>
 8000aca:	0028      	movs	r0, r5
 8000acc:	9706      	str	r7, [sp, #24]
 8000ace:	f7ff fd77 	bl	80005c0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ad2:	464b      	mov	r3, r9
 8000ad4:	0001      	movs	r1, r0
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4640      	mov	r0, r8
 8000ada:	1c74      	adds	r4, r6, #1
 8000adc:	e000      	b.n	8000ae0 <__gnu_unwind_pr_common+0x20c>
 8000ade:	bf00      	nop
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d0ee      	beq.n	8000ac2 <__gnu_unwind_pr_common+0x1ee>
 8000ae4:	4657      	mov	r7, sl
 8000ae6:	9b05      	ldr	r3, [sp, #20]
 8000ae8:	9c04      	ldr	r4, [sp, #16]
 8000aea:	469a      	mov	sl, r3
 8000aec:	42b7      	cmp	r7, r6
 8000aee:	d1b9      	bne.n	8000a64 <__gnu_unwind_pr_common+0x190>
 8000af0:	4645      	mov	r5, r8
 8000af2:	e001      	b.n	8000af8 <__gnu_unwind_pr_common+0x224>
 8000af4:	4645      	mov	r5, r8
 8000af6:	9c04      	ldr	r4, [sp, #16]
 8000af8:	210d      	movs	r1, #13
 8000afa:	4658      	mov	r0, fp
 8000afc:	f7ff fe80 	bl	8000800 <_Unwind_GetGR>
 8000b00:	9b06      	ldr	r3, [sp, #24]
 8000b02:	6228      	str	r0, [r5, #32]
 8000b04:	626b      	str	r3, [r5, #36]	; 0x24
 8000b06:	62ac      	str	r4, [r5, #40]	; 0x28
 8000b08:	2006      	movs	r0, #6
 8000b0a:	e755      	b.n	80009b8 <__gnu_unwind_pr_common+0xe4>
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	4658      	mov	r0, fp
 8000b10:	f7ff fe76 	bl	8000800 <_Unwind_GetGR>
 8000b14:	210e      	movs	r1, #14
 8000b16:	0002      	movs	r2, r0
 8000b18:	4658      	mov	r0, fp
 8000b1a:	f7ff fe97 	bl	800084c <_Unwind_SetGR>
 8000b1e:	4658      	mov	r0, fp
 8000b20:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <__gnu_unwind_pr_common+0x2ec>)
 8000b22:	210f      	movs	r1, #15
 8000b24:	f7ff fe92 	bl	800084c <_Unwind_SetGR>
 8000b28:	2007      	movs	r0, #7
 8000b2a:	e745      	b.n	80009b8 <__gnu_unwind_pr_common+0xe4>
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	429c      	cmp	r4, r3
 8000b32:	d197      	bne.n	8000a64 <__gnu_unwind_pr_common+0x190>
 8000b34:	4643      	mov	r3, r8
 8000b36:	4642      	mov	r2, r8
 8000b38:	629f      	str	r7, [r3, #40]	; 0x28
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b3e:	3304      	adds	r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	1d23      	adds	r3, r4, #4
 8000b44:	6353      	str	r3, [r2, #52]	; 0x34
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db32      	blt.n	8000bb2 <__gnu_unwind_pr_common+0x2de>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	9302      	str	r3, [sp, #8]
 8000b50:	e725      	b.n	800099e <__gnu_unwind_pr_common+0xca>
 8000b52:	0020      	movs	r0, r4
 8000b54:	f7ff fc60 	bl	8000418 <selfrel_offset31>
 8000b58:	4645      	mov	r5, r8
 8000b5a:	3404      	adds	r4, #4
 8000b5c:	0006      	movs	r6, r0
 8000b5e:	63ac      	str	r4, [r5, #56]	; 0x38
 8000b60:	4640      	mov	r0, r8
 8000b62:	e000      	b.n	8000b66 <__gnu_unwind_pr_common+0x292>
 8000b64:	bf00      	nop
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d100      	bne.n	8000b6c <__gnu_unwind_pr_common+0x298>
 8000b6a:	e724      	b.n	80009b6 <__gnu_unwind_pr_common+0xe2>
 8000b6c:	4658      	mov	r0, fp
 8000b6e:	0032      	movs	r2, r6
 8000b70:	210f      	movs	r1, #15
 8000b72:	f7ff fe6b 	bl	800084c <_Unwind_SetGR>
 8000b76:	2007      	movs	r0, #7
 8000b78:	e71e      	b.n	80009b8 <__gnu_unwind_pr_common+0xe4>
 8000b7a:	0007      	movs	r7, r0
 8000b7c:	210d      	movs	r1, #13
 8000b7e:	4658      	mov	r0, fp
 8000b80:	4645      	mov	r5, r8
 8000b82:	f7ff fe3d 	bl	8000800 <_Unwind_GetGR>
 8000b86:	6228      	str	r0, [r5, #32]
 8000b88:	2f02      	cmp	r7, #2
 8000b8a:	d10f      	bne.n	8000bac <__gnu_unwind_pr_common+0x2d8>
 8000b8c:	9b06      	ldr	r3, [sp, #24]
 8000b8e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000b90:	4643      	mov	r3, r8
 8000b92:	332c      	adds	r3, #44	; 0x2c
 8000b94:	626b      	str	r3, [r5, #36]	; 0x24
 8000b96:	62ac      	str	r4, [r5, #40]	; 0x28
 8000b98:	2006      	movs	r0, #6
 8000b9a:	e70d      	b.n	80009b8 <__gnu_unwind_pr_common+0xe4>
 8000b9c:	4656      	mov	r6, sl
 8000b9e:	e704      	b.n	80009aa <__gnu_unwind_pr_common+0xd6>
 8000ba0:	210d      	movs	r1, #13
 8000ba2:	4658      	mov	r0, fp
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	f7ff fe2b 	bl	8000800 <_Unwind_GetGR>
 8000baa:	6228      	str	r0, [r5, #32]
 8000bac:	9b06      	ldr	r3, [sp, #24]
 8000bae:	626b      	str	r3, [r5, #36]	; 0x24
 8000bb0:	e7f1      	b.n	8000b96 <__gnu_unwind_pr_common+0x2c2>
 8000bb2:	0038      	movs	r0, r7
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	0080      	lsls	r0, r0, #2
 8000bb8:	4645      	mov	r5, r8
 8000bba:	1820      	adds	r0, r4, r0
 8000bbc:	e765      	b.n	8000a8a <__gnu_unwind_pr_common+0x1b6>
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	00000000 	.word	0x00000000

08000bc4 <__aeabi_unwind_cpp_pr0>:
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f7ff fe84 	bl	80008d4 <__gnu_unwind_pr_common>
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)

08000bd0 <__aeabi_unwind_cpp_pr1>:
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f7ff fe7e 	bl	80008d4 <__gnu_unwind_pr_common>
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)

08000bdc <__aeabi_unwind_cpp_pr2>:
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	2302      	movs	r3, #2
 8000be0:	f7ff fe78 	bl	80008d4 <__gnu_unwind_pr_common>
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <_Unwind_VRS_Pop>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	46ce      	mov	lr, r9
 8000bec:	4647      	mov	r7, r8
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	0006      	movs	r6, r0
 8000bf2:	b0c3      	sub	sp, #268	; 0x10c
 8000bf4:	0014      	movs	r4, r2
 8000bf6:	001d      	movs	r5, r3
 8000bf8:	2901      	cmp	r1, #1
 8000bfa:	d04e      	beq.n	8000c9a <_Unwind_VRS_Pop+0xb2>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d033      	beq.n	8000c68 <_Unwind_VRS_Pop+0x80>
 8000c00:	2903      	cmp	r1, #3
 8000c02:	d00a      	beq.n	8000c1a <_Unwind_VRS_Pop+0x32>
 8000c04:	2904      	cmp	r1, #4
 8000c06:	d102      	bne.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d100      	bne.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000c0c:	e089      	b.n	8000d22 <_Unwind_VRS_Pop+0x13a>
 8000c0e:	2002      	movs	r0, #2
 8000c10:	b043      	add	sp, #268	; 0x10c
 8000c12:	bc0c      	pop	{r2, r3}
 8000c14:	4690      	mov	r8, r2
 8000c16:	4699      	mov	r9, r3
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d1f7      	bne.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000c1e:	0414      	lsls	r4, r2, #16
 8000c20:	0c15      	lsrs	r5, r2, #16
 8000c22:	0c24      	lsrs	r4, r4, #16
 8000c24:	192b      	adds	r3, r5, r4
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d8f1      	bhi.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	6803      	ldr	r3, [r0, #0]
 8000c2e:	421a      	tst	r2, r3
 8000c30:	d000      	beq.n	8000c34 <_Unwind_VRS_Pop+0x4c>
 8000c32:	e0e7      	b.n	8000e04 <_Unwind_VRS_Pop+0x21c>
 8000c34:	ab20      	add	r3, sp, #128	; 0x80
 8000c36:	0018      	movs	r0, r3
 8000c38:	4698      	mov	r8, r3
 8000c3a:	f000 f92d 	bl	8000e98 <__gnu_Unwind_Save_WMMXD>
 8000c3e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c40:	00ed      	lsls	r5, r5, #3
 8000c42:	001a      	movs	r2, r3
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d009      	beq.n	8000c5c <_Unwind_VRS_Pop+0x74>
 8000c48:	00e4      	lsls	r4, r4, #3
 8000c4a:	1aea      	subs	r2, r5, r3
 8000c4c:	191c      	adds	r4, r3, r4
 8000c4e:	4442      	add	r2, r8
 8000c50:	6819      	ldr	r1, [r3, #0]
 8000c52:	50d1      	str	r1, [r2, r3]
 8000c54:	3304      	adds	r3, #4
 8000c56:	429c      	cmp	r4, r3
 8000c58:	d1fa      	bne.n	8000c50 <_Unwind_VRS_Pop+0x68>
 8000c5a:	0022      	movs	r2, r4
 8000c5c:	63b2      	str	r2, [r6, #56]	; 0x38
 8000c5e:	4640      	mov	r0, r8
 8000c60:	f000 f918 	bl	8000e94 <__gnu_Unwind_Restore_WMMXD>
 8000c64:	2000      	movs	r0, #0
 8000c66:	e7d3      	b.n	8000c10 <_Unwind_VRS_Pop+0x28>
 8000c68:	2002      	movs	r0, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1d0      	bne.n	8000c10 <_Unwind_VRS_Pop+0x28>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2701      	movs	r7, #1
 8000c72:	0410      	lsls	r0, r2, #16
 8000c74:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8000c76:	0c00      	lsrs	r0, r0, #16
 8000c78:	1d32      	adds	r2, r6, #4
 8000c7a:	0039      	movs	r1, r7
 8000c7c:	4099      	lsls	r1, r3
 8000c7e:	4208      	tst	r0, r1
 8000c80:	d002      	beq.n	8000c88 <_Unwind_VRS_Pop+0xa0>
 8000c82:	6829      	ldr	r1, [r5, #0]
 8000c84:	3504      	adds	r5, #4
 8000c86:	6011      	str	r1, [r2, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	3204      	adds	r2, #4
 8000c8c:	2b10      	cmp	r3, #16
 8000c8e:	d1f4      	bne.n	8000c7a <_Unwind_VRS_Pop+0x92>
 8000c90:	2000      	movs	r0, #0
 8000c92:	04a3      	lsls	r3, r4, #18
 8000c94:	d4bc      	bmi.n	8000c10 <_Unwind_VRS_Pop+0x28>
 8000c96:	63b5      	str	r5, [r6, #56]	; 0x38
 8000c98:	e7ba      	b.n	8000c10 <_Unwind_VRS_Pop+0x28>
 8000c9a:	0414      	lsls	r4, r2, #16
 8000c9c:	0c17      	lsrs	r7, r2, #16
 8000c9e:	0c24      	lsrs	r4, r4, #16
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d05f      	beq.n	8000d64 <_Unwind_VRS_Pop+0x17c>
 8000ca4:	2b05      	cmp	r3, #5
 8000ca6:	d1b2      	bne.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2b20      	cmp	r3, #32
 8000cac:	d8af      	bhi.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000cae:	2f0f      	cmp	r7, #15
 8000cb0:	d97d      	bls.n	8000dae <_Unwind_VRS_Pop+0x1c6>
 8000cb2:	46a1      	mov	r9, r4
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	d165      	bne.n	8000d84 <_Unwind_VRS_Pop+0x19c>
 8000cb8:	2200      	movs	r2, #0
 8000cba:	0023      	movs	r3, r4
 8000cbc:	4691      	mov	r9, r2
 8000cbe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dc00      	bgt.n	8000cc6 <_Unwind_VRS_Pop+0xde>
 8000cc4:	e088      	b.n	8000dd8 <_Unwind_VRS_Pop+0x1f0>
 8000cc6:	a820      	add	r0, sp, #128	; 0x80
 8000cc8:	4680      	mov	r8, r0
 8000cca:	00fa      	lsls	r2, r7, #3
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	1a52      	subs	r2, r2, r1
 8000cd0:	18cb      	adds	r3, r1, r3
 8000cd2:	4442      	add	r2, r8
 8000cd4:	6808      	ldr	r0, [r1, #0]
 8000cd6:	5050      	str	r0, [r2, r1]
 8000cd8:	3104      	adds	r1, #4
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d1fa      	bne.n	8000cd4 <_Unwind_VRS_Pop+0xec>
 8000cde:	0019      	movs	r1, r3
 8000ce0:	464b      	mov	r3, r9
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d010      	beq.n	8000d08 <_Unwind_VRS_Pop+0x120>
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	0058      	lsls	r0, r3, #1
 8000cea:	003a      	movs	r2, r7
 8000cec:	2f10      	cmp	r7, #16
 8000cee:	d200      	bcs.n	8000cf2 <_Unwind_VRS_Pop+0x10a>
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	3a10      	subs	r2, #16
 8000cf6:	00d2      	lsls	r2, r2, #3
 8000cf8:	446a      	add	r2, sp
 8000cfa:	0080      	lsls	r0, r0, #2
 8000cfc:	58cc      	ldr	r4, [r1, r3]
 8000cfe:	50d4      	str	r4, [r2, r3]
 8000d00:	3304      	adds	r3, #4
 8000d02:	4283      	cmp	r3, r0
 8000d04:	d1fa      	bne.n	8000cfc <_Unwind_VRS_Pop+0x114>
 8000d06:	18c9      	adds	r1, r1, r3
 8000d08:	2d01      	cmp	r5, #1
 8000d0a:	d05e      	beq.n	8000dca <_Unwind_VRS_Pop+0x1e2>
 8000d0c:	63b1      	str	r1, [r6, #56]	; 0x38
 8000d0e:	2f0f      	cmp	r7, #15
 8000d10:	d974      	bls.n	8000dfc <_Unwind_VRS_Pop+0x214>
 8000d12:	464b      	mov	r3, r9
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0a5      	beq.n	8000c64 <_Unwind_VRS_Pop+0x7c>
 8000d18:	4668      	mov	r0, sp
 8000d1a:	f000 f8b7 	bl	8000e8c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e776      	b.n	8000c10 <_Unwind_VRS_Pop+0x28>
 8000d22:	2a10      	cmp	r2, #16
 8000d24:	d900      	bls.n	8000d28 <_Unwind_VRS_Pop+0x140>
 8000d26:	e772      	b.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000d28:	2210      	movs	r2, #16
 8000d2a:	6803      	ldr	r3, [r0, #0]
 8000d2c:	421a      	tst	r2, r3
 8000d2e:	d145      	bne.n	8000dbc <_Unwind_VRS_Pop+0x1d4>
 8000d30:	ab20      	add	r3, sp, #128	; 0x80
 8000d32:	0018      	movs	r0, r3
 8000d34:	4698      	mov	r8, r3
 8000d36:	f000 f8b3 	bl	8000ea0 <__gnu_Unwind_Save_WMMXC>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000d40:	0002      	movs	r2, r0
 8000d42:	409a      	lsls	r2, r3
 8000d44:	4214      	tst	r4, r2
 8000d46:	d004      	beq.n	8000d52 <_Unwind_VRS_Pop+0x16a>
 8000d48:	4645      	mov	r5, r8
 8000d4a:	680f      	ldr	r7, [r1, #0]
 8000d4c:	009a      	lsls	r2, r3, #2
 8000d4e:	50af      	str	r7, [r5, r2]
 8000d50:	3104      	adds	r1, #4
 8000d52:	3301      	adds	r3, #1
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d1f3      	bne.n	8000d40 <_Unwind_VRS_Pop+0x158>
 8000d58:	4640      	mov	r0, r8
 8000d5a:	63b1      	str	r1, [r6, #56]	; 0x38
 8000d5c:	f000 f89e 	bl	8000e9c <__gnu_Unwind_Restore_WMMXC>
 8000d60:	2000      	movs	r0, #0
 8000d62:	e755      	b.n	8000c10 <_Unwind_VRS_Pop+0x28>
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	d900      	bls.n	8000d6c <_Unwind_VRS_Pop+0x184>
 8000d6a:	e750      	b.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000d6c:	2f0f      	cmp	r7, #15
 8000d6e:	d900      	bls.n	8000d72 <_Unwind_VRS_Pop+0x18a>
 8000d70:	e74d      	b.n	8000c0e <_Unwind_VRS_Pop+0x26>
 8000d72:	2300      	movs	r3, #0
 8000d74:	4699      	mov	r9, r3
 8000d76:	2201      	movs	r2, #1
 8000d78:	6833      	ldr	r3, [r6, #0]
 8000d7a:	421a      	tst	r2, r3
 8000d7c:	d130      	bne.n	8000de0 <_Unwind_VRS_Pop+0x1f8>
 8000d7e:	464b      	mov	r3, r9
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d05a      	beq.n	8000e3a <_Unwind_VRS_Pop+0x252>
 8000d84:	2204      	movs	r2, #4
 8000d86:	6833      	ldr	r3, [r6, #0]
 8000d88:	421a      	tst	r2, r3
 8000d8a:	d142      	bne.n	8000e12 <_Unwind_VRS_Pop+0x22a>
 8000d8c:	2d01      	cmp	r5, #1
 8000d8e:	d047      	beq.n	8000e20 <_Unwind_VRS_Pop+0x238>
 8000d90:	2f0f      	cmp	r7, #15
 8000d92:	d806      	bhi.n	8000da2 <_Unwind_VRS_Pop+0x1ba>
 8000d94:	ab20      	add	r3, sp, #128	; 0x80
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f876 	bl	8000e88 <__gnu_Unwind_Save_VFP_D>
 8000d9c:	464b      	mov	r3, r9
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d08a      	beq.n	8000cb8 <_Unwind_VRS_Pop+0xd0>
 8000da2:	4668      	mov	r0, sp
 8000da4:	f000 f874 	bl	8000e90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000da8:	2310      	movs	r3, #16
 8000daa:	1bdb      	subs	r3, r3, r7
 8000dac:	e787      	b.n	8000cbe <_Unwind_VRS_Pop+0xd6>
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	d9df      	bls.n	8000d72 <_Unwind_VRS_Pop+0x18a>
 8000db2:	2210      	movs	r2, #16
 8000db4:	4252      	negs	r2, r2
 8000db6:	4691      	mov	r9, r2
 8000db8:	4499      	add	r9, r3
 8000dba:	e7dc      	b.n	8000d76 <_Unwind_VRS_Pop+0x18e>
 8000dbc:	4393      	bics	r3, r2
 8000dbe:	6003      	str	r3, [r0, #0]
 8000dc0:	30d1      	adds	r0, #209	; 0xd1
 8000dc2:	30ff      	adds	r0, #255	; 0xff
 8000dc4:	f000 f86c 	bl	8000ea0 <__gnu_Unwind_Save_WMMXC>
 8000dc8:	e7b2      	b.n	8000d30 <_Unwind_VRS_Pop+0x148>
 8000dca:	3104      	adds	r1, #4
 8000dcc:	a820      	add	r0, sp, #128	; 0x80
 8000dce:	63b1      	str	r1, [r6, #56]	; 0x38
 8000dd0:	f000 f854 	bl	8000e7c <__gnu_Unwind_Restore_VFP>
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e71b      	b.n	8000c10 <_Unwind_VRS_Pop+0x28>
 8000dd8:	464b      	mov	r3, r9
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d184      	bne.n	8000ce8 <_Unwind_VRS_Pop+0x100>
 8000dde:	e793      	b.n	8000d08 <_Unwind_VRS_Pop+0x120>
 8000de0:	0019      	movs	r1, r3
 8000de2:	4391      	bics	r1, r2
 8000de4:	000a      	movs	r2, r1
 8000de6:	6031      	str	r1, [r6, #0]
 8000de8:	2d05      	cmp	r5, #5
 8000dea:	d01e      	beq.n	8000e2a <_Unwind_VRS_Pop+0x242>
 8000dec:	2203      	movs	r2, #3
 8000dee:	0030      	movs	r0, r6
 8000df0:	4393      	bics	r3, r2
 8000df2:	6033      	str	r3, [r6, #0]
 8000df4:	3048      	adds	r0, #72	; 0x48
 8000df6:	f000 f843 	bl	8000e80 <__gnu_Unwind_Save_VFP>
 8000dfa:	e7c0      	b.n	8000d7e <_Unwind_VRS_Pop+0x196>
 8000dfc:	a820      	add	r0, sp, #128	; 0x80
 8000dfe:	f000 f841 	bl	8000e84 <__gnu_Unwind_Restore_VFP_D>
 8000e02:	e786      	b.n	8000d12 <_Unwind_VRS_Pop+0x12a>
 8000e04:	4393      	bics	r3, r2
 8000e06:	6003      	str	r3, [r0, #0]
 8000e08:	3051      	adds	r0, #81	; 0x51
 8000e0a:	30ff      	adds	r0, #255	; 0xff
 8000e0c:	f000 f844 	bl	8000e98 <__gnu_Unwind_Save_WMMXD>
 8000e10:	e710      	b.n	8000c34 <_Unwind_VRS_Pop+0x4c>
 8000e12:	0030      	movs	r0, r6
 8000e14:	4393      	bics	r3, r2
 8000e16:	6033      	str	r3, [r6, #0]
 8000e18:	30d0      	adds	r0, #208	; 0xd0
 8000e1a:	f000 f839 	bl	8000e90 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e1e:	e7b5      	b.n	8000d8c <_Unwind_VRS_Pop+0x1a4>
 8000e20:	ab20      	add	r3, sp, #128	; 0x80
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f82c 	bl	8000e80 <__gnu_Unwind_Save_VFP>
 8000e28:	e7be      	b.n	8000da8 <_Unwind_VRS_Pop+0x1c0>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	0030      	movs	r0, r6
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	6032      	str	r2, [r6, #0]
 8000e32:	3048      	adds	r0, #72	; 0x48
 8000e34:	f000 f828 	bl	8000e88 <__gnu_Unwind_Save_VFP_D>
 8000e38:	e7a1      	b.n	8000d7e <_Unwind_VRS_Pop+0x196>
 8000e3a:	2d01      	cmp	r5, #1
 8000e3c:	d003      	beq.n	8000e46 <_Unwind_VRS_Pop+0x25e>
 8000e3e:	2f0f      	cmp	r7, #15
 8000e40:	d900      	bls.n	8000e44 <_Unwind_VRS_Pop+0x25c>
 8000e42:	e739      	b.n	8000cb8 <_Unwind_VRS_Pop+0xd0>
 8000e44:	e7a6      	b.n	8000d94 <_Unwind_VRS_Pop+0x1ac>
 8000e46:	ab20      	add	r3, sp, #128	; 0x80
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 f819 	bl	8000e80 <__gnu_Unwind_Save_VFP>
 8000e4e:	e733      	b.n	8000cb8 <_Unwind_VRS_Pop+0xd0>

08000e50 <__restore_core_regs>:
 8000e50:	1c01      	adds	r1, r0, #0
 8000e52:	3134      	adds	r1, #52	; 0x34
 8000e54:	c938      	ldmia	r1!, {r3, r4, r5}
 8000e56:	3b04      	subs	r3, #4
 8000e58:	469c      	mov	ip, r3
 8000e5a:	601d      	str	r5, [r3, #0]
 8000e5c:	46a6      	mov	lr, r4
 8000e5e:	1c01      	adds	r1, r0, #0
 8000e60:	3120      	adds	r1, #32
 8000e62:	c93c      	ldmia	r1!, {r2, r3, r4, r5}
 8000e64:	4690      	mov	r8, r2
 8000e66:	4699      	mov	r9, r3
 8000e68:	46a2      	mov	sl, r4
 8000e6a:	46ab      	mov	fp, r5
 8000e6c:	1c01      	adds	r1, r0, #0
 8000e6e:	3108      	adds	r1, #8
 8000e70:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
 8000e72:	6841      	ldr	r1, [r0, #4]
 8000e74:	6800      	ldr	r0, [r0, #0]
 8000e76:	46e5      	mov	sp, ip
 8000e78:	bd00      	pop	{pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)

08000e7c <__gnu_Unwind_Restore_VFP>:
 8000e7c:	4770      	bx	lr
 8000e7e:	46c0      	nop			; (mov r8, r8)

08000e80 <__gnu_Unwind_Save_VFP>:
 8000e80:	4770      	bx	lr
 8000e82:	46c0      	nop			; (mov r8, r8)

08000e84 <__gnu_Unwind_Restore_VFP_D>:
 8000e84:	4770      	bx	lr
 8000e86:	46c0      	nop			; (mov r8, r8)

08000e88 <__gnu_Unwind_Save_VFP_D>:
 8000e88:	4770      	bx	lr
 8000e8a:	46c0      	nop			; (mov r8, r8)

08000e8c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000e8c:	4770      	bx	lr
 8000e8e:	46c0      	nop			; (mov r8, r8)

08000e90 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000e90:	4770      	bx	lr
 8000e92:	46c0      	nop			; (mov r8, r8)

08000e94 <__gnu_Unwind_Restore_WMMXD>:
 8000e94:	4770      	bx	lr
 8000e96:	46c0      	nop			; (mov r8, r8)

08000e98 <__gnu_Unwind_Save_WMMXD>:
 8000e98:	4770      	bx	lr
 8000e9a:	46c0      	nop			; (mov r8, r8)

08000e9c <__gnu_Unwind_Restore_WMMXC>:
 8000e9c:	4770      	bx	lr
 8000e9e:	46c0      	nop			; (mov r8, r8)

08000ea0 <__gnu_Unwind_Save_WMMXC>:
 8000ea0:	4770      	bx	lr
 8000ea2:	46c0      	nop			; (mov r8, r8)

08000ea4 <_Unwind_RaiseException>:
 8000ea4:	b401      	push	{r0}
 8000ea6:	a801      	add	r0, sp, #4
 8000ea8:	b501      	push	{r0, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000eae:	a808      	add	r0, sp, #32
 8000eb0:	4641      	mov	r1, r8
 8000eb2:	464a      	mov	r2, r9
 8000eb4:	4653      	mov	r3, sl
 8000eb6:	465c      	mov	r4, fp
 8000eb8:	4665      	mov	r5, ip
 8000eba:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000ebc:	a801      	add	r0, sp, #4
 8000ebe:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000ec0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000ec2:	9000      	str	r0, [sp, #0]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	b40c      	push	{r2, r3}
 8000ec8:	a901      	add	r1, sp, #4
 8000eca:	f7ff fc0f 	bl	80006ec <__gnu_Unwind_RaiseException>
 8000ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000ed0:	b012      	add	sp, #72	; 0x48
 8000ed2:	4718      	bx	r3

08000ed4 <_Unwind_Resume>:
 8000ed4:	b401      	push	{r0}
 8000ed6:	a801      	add	r0, sp, #4
 8000ed8:	b501      	push	{r0, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000ede:	a808      	add	r0, sp, #32
 8000ee0:	4641      	mov	r1, r8
 8000ee2:	464a      	mov	r2, r9
 8000ee4:	4653      	mov	r3, sl
 8000ee6:	465c      	mov	r4, fp
 8000ee8:	4665      	mov	r5, ip
 8000eea:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000eec:	a801      	add	r0, sp, #4
 8000eee:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000ef0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000ef2:	9000      	str	r0, [sp, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	b40c      	push	{r2, r3}
 8000ef8:	a901      	add	r1, sp, #4
 8000efa:	f7ff fc2b 	bl	8000754 <__gnu_Unwind_Resume>
 8000efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f00:	b012      	add	sp, #72	; 0x48
 8000f02:	4718      	bx	r3

08000f04 <_Unwind_Resume_or_Rethrow>:
 8000f04:	b401      	push	{r0}
 8000f06:	a801      	add	r0, sp, #4
 8000f08:	b501      	push	{r0, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000f0e:	a808      	add	r0, sp, #32
 8000f10:	4641      	mov	r1, r8
 8000f12:	464a      	mov	r2, r9
 8000f14:	4653      	mov	r3, sl
 8000f16:	465c      	mov	r4, fp
 8000f18:	4665      	mov	r5, ip
 8000f1a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000f1c:	a801      	add	r0, sp, #4
 8000f1e:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000f20:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000f22:	9000      	str	r0, [sp, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	b40c      	push	{r2, r3}
 8000f28:	a901      	add	r1, sp, #4
 8000f2a:	f7ff fc37 	bl	800079c <__gnu_Unwind_Resume_or_Rethrow>
 8000f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f30:	b012      	add	sp, #72	; 0x48
 8000f32:	4718      	bx	r3

08000f34 <_Unwind_ForcedUnwind>:
 8000f34:	b401      	push	{r0}
 8000f36:	a801      	add	r0, sp, #4
 8000f38:	b501      	push	{r0, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000f3e:	a808      	add	r0, sp, #32
 8000f40:	4641      	mov	r1, r8
 8000f42:	464a      	mov	r2, r9
 8000f44:	4653      	mov	r3, sl
 8000f46:	465c      	mov	r4, fp
 8000f48:	4665      	mov	r5, ip
 8000f4a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000f4c:	a801      	add	r0, sp, #4
 8000f4e:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000f50:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000f52:	9000      	str	r0, [sp, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	b40c      	push	{r2, r3}
 8000f58:	ab01      	add	r3, sp, #4
 8000f5a:	f7ff fbf1 	bl	8000740 <__gnu_Unwind_ForcedUnwind>
 8000f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f60:	b012      	add	sp, #72	; 0x48
 8000f62:	4718      	bx	r3

08000f64 <_Unwind_Backtrace>:
 8000f64:	b401      	push	{r0}
 8000f66:	a801      	add	r0, sp, #4
 8000f68:	b501      	push	{r0, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000f6e:	a808      	add	r0, sp, #32
 8000f70:	4641      	mov	r1, r8
 8000f72:	464a      	mov	r2, r9
 8000f74:	4653      	mov	r3, sl
 8000f76:	465c      	mov	r4, fp
 8000f78:	4665      	mov	r5, ip
 8000f7a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000f7c:	a801      	add	r0, sp, #4
 8000f7e:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000f80:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000f82:	9000      	str	r0, [sp, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	b40c      	push	{r2, r3}
 8000f88:	aa01      	add	r2, sp, #4
 8000f8a:	f7ff fc6b 	bl	8000864 <__gnu_Unwind_Backtrace>
 8000f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f90:	b012      	add	sp, #72	; 0x48
 8000f92:	4718      	bx	r3

08000f94 <next_unwind_byte>:
 8000f94:	7a02      	ldrb	r2, [r0, #8]
 8000f96:	0003      	movs	r3, r0
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	d104      	bne.n	8000fa6 <next_unwind_byte+0x12>
 8000f9c:	7a42      	ldrb	r2, [r0, #9]
 8000f9e:	20b0      	movs	r0, #176	; 0xb0
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d107      	bne.n	8000fb4 <next_unwind_byte+0x20>
 8000fa4:	4770      	bx	lr
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	7202      	strb	r2, [r0, #8]
 8000faa:	6802      	ldr	r2, [r0, #0]
 8000fac:	0e10      	lsrs	r0, r2, #24
 8000fae:	0212      	lsls	r2, r2, #8
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e7f7      	b.n	8000fa4 <next_unwind_byte+0x10>
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	725a      	strb	r2, [r3, #9]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	1d11      	adds	r1, r2, #4
 8000fbc:	6059      	str	r1, [r3, #4]
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	6812      	ldr	r2, [r2, #0]
 8000fc2:	7219      	strb	r1, [r3, #8]
 8000fc4:	e7f2      	b.n	8000fac <next_unwind_byte+0x18>
 8000fc6:	46c0      	nop			; (mov r8, r8)

08000fc8 <_Unwind_GetGR.constprop.0>:
 8000fc8:	b500      	push	{lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	ab03      	add	r3, sp, #12
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f7ff fbf9 	bl	80007cc <_Unwind_VRS_Get>
 8000fda:	9803      	ldr	r0, [sp, #12]
 8000fdc:	b005      	add	sp, #20
 8000fde:	bd00      	pop	{pc}

08000fe0 <unwind_UCB_from_context>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	f7ff fff1 	bl	8000fc8 <_Unwind_GetGR.constprop.0>
 8000fe6:	bd10      	pop	{r4, pc}

08000fe8 <__gnu_unwind_execute>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	4657      	mov	r7, sl
 8000fec:	464e      	mov	r6, r9
 8000fee:	4645      	mov	r5, r8
 8000ff0:	46de      	mov	lr, fp
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	b5e0      	push	{r5, r6, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	9303      	str	r3, [sp, #12]
 8000ffa:	330f      	adds	r3, #15
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	3b08      	subs	r3, #8
 8001000:	4699      	mov	r9, r3
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	031b      	lsls	r3, r3, #12
 8001006:	0006      	movs	r6, r0
 8001008:	000f      	movs	r7, r1
 800100a:	469a      	mov	sl, r3
 800100c:	0038      	movs	r0, r7
 800100e:	f7ff ffc1 	bl	8000f94 <next_unwind_byte>
 8001012:	0004      	movs	r4, r0
 8001014:	28b0      	cmp	r0, #176	; 0xb0
 8001016:	d021      	beq.n	800105c <__gnu_unwind_execute+0x74>
 8001018:	0603      	lsls	r3, r0, #24
 800101a:	d432      	bmi.n	8001082 <__gnu_unwind_execute+0x9a>
 800101c:	25ff      	movs	r5, #255	; 0xff
 800101e:	0083      	lsls	r3, r0, #2
 8001020:	401d      	ands	r5, r3
 8001022:	ab05      	add	r3, sp, #20
 8001024:	469b      	mov	fp, r3
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	220d      	movs	r2, #13
 800102a:	2300      	movs	r3, #0
 800102c:	2100      	movs	r1, #0
 800102e:	0030      	movs	r0, r6
 8001030:	3504      	adds	r5, #4
 8001032:	f7ff fbcb 	bl	80007cc <_Unwind_VRS_Get>
 8001036:	0663      	lsls	r3, r4, #25
 8001038:	d54c      	bpl.n	80010d4 <__gnu_unwind_execute+0xec>
 800103a:	9b05      	ldr	r3, [sp, #20]
 800103c:	1b5d      	subs	r5, r3, r5
 800103e:	9505      	str	r5, [sp, #20]
 8001040:	465b      	mov	r3, fp
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	220d      	movs	r2, #13
 8001048:	2100      	movs	r1, #0
 800104a:	0030      	movs	r0, r6
 800104c:	f7ff fbe4 	bl	8000818 <_Unwind_VRS_Set>
 8001050:	0038      	movs	r0, r7
 8001052:	f7ff ff9f 	bl	8000f94 <next_unwind_byte>
 8001056:	0004      	movs	r4, r0
 8001058:	28b0      	cmp	r0, #176	; 0xb0
 800105a:	d1dd      	bne.n	8001018 <__gnu_unwind_execute+0x30>
 800105c:	9b03      	ldr	r3, [sp, #12]
 800105e:	2400      	movs	r4, #0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d12f      	bne.n	80010c4 <__gnu_unwind_execute+0xdc>
 8001064:	ad05      	add	r5, sp, #20
 8001066:	9500      	str	r5, [sp, #0]
 8001068:	220e      	movs	r2, #14
 800106a:	2100      	movs	r1, #0
 800106c:	0030      	movs	r0, r6
 800106e:	f7ff fbad 	bl	80007cc <_Unwind_VRS_Get>
 8001072:	9500      	str	r5, [sp, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	220f      	movs	r2, #15
 8001078:	2100      	movs	r1, #0
 800107a:	0030      	movs	r0, r6
 800107c:	f7ff fbcc 	bl	8000818 <_Unwind_VRS_Set>
 8001080:	e020      	b.n	80010c4 <__gnu_unwind_execute+0xdc>
 8001082:	0003      	movs	r3, r0
 8001084:	4642      	mov	r2, r8
 8001086:	4393      	bics	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b80      	cmp	r3, #128	; 0x80
 800108c:	d063      	beq.n	8001156 <__gnu_unwind_execute+0x16e>
 800108e:	2b90      	cmp	r3, #144	; 0x90
 8001090:	d025      	beq.n	80010de <__gnu_unwind_execute+0xf6>
 8001092:	2ba0      	cmp	r3, #160	; 0xa0
 8001094:	d032      	beq.n	80010fc <__gnu_unwind_execute+0x114>
 8001096:	2bb0      	cmp	r3, #176	; 0xb0
 8001098:	d045      	beq.n	8001126 <__gnu_unwind_execute+0x13e>
 800109a:	2bc0      	cmp	r3, #192	; 0xc0
 800109c:	d100      	bne.n	80010a0 <__gnu_unwind_execute+0xb8>
 800109e:	e073      	b.n	8001188 <__gnu_unwind_execute+0x1a0>
 80010a0:	0003      	movs	r3, r0
 80010a2:	464a      	mov	r2, r9
 80010a4:	4393      	bics	r3, r2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2bd0      	cmp	r3, #208	; 0xd0
 80010aa:	d10a      	bne.n	80010c2 <__gnu_unwind_execute+0xda>
 80010ac:	4653      	mov	r3, sl
 80010ae:	4002      	ands	r2, r0
 80010b0:	3201      	adds	r2, #1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	2305      	movs	r3, #5
 80010b6:	2101      	movs	r1, #1
 80010b8:	0030      	movs	r0, r6
 80010ba:	f7ff fd95 	bl	8000be8 <_Unwind_VRS_Pop>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d0a4      	beq.n	800100c <__gnu_unwind_execute+0x24>
 80010c2:	2409      	movs	r4, #9
 80010c4:	0020      	movs	r0, r4
 80010c6:	b007      	add	sp, #28
 80010c8:	bc3c      	pop	{r2, r3, r4, r5}
 80010ca:	4690      	mov	r8, r2
 80010cc:	4699      	mov	r9, r3
 80010ce:	46a2      	mov	sl, r4
 80010d0:	46ab      	mov	fp, r5
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d4:	9b05      	ldr	r3, [sp, #20]
 80010d6:	469c      	mov	ip, r3
 80010d8:	4465      	add	r5, ip
 80010da:	9505      	str	r5, [sp, #20]
 80010dc:	e7b0      	b.n	8001040 <__gnu_unwind_execute+0x58>
 80010de:	3b83      	subs	r3, #131	; 0x83
 80010e0:	4003      	ands	r3, r0
 80010e2:	2b0d      	cmp	r3, #13
 80010e4:	d0ed      	beq.n	80010c2 <__gnu_unwind_execute+0xda>
 80010e6:	4642      	mov	r2, r8
 80010e8:	ad05      	add	r5, sp, #20
 80010ea:	4002      	ands	r2, r0
 80010ec:	9500      	str	r5, [sp, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	0030      	movs	r0, r6
 80010f4:	f7ff fb6a 	bl	80007cc <_Unwind_VRS_Get>
 80010f8:	9500      	str	r5, [sp, #0]
 80010fa:	e7a3      	b.n	8001044 <__gnu_unwind_execute+0x5c>
 80010fc:	23ff      	movs	r3, #255	; 0xff
 80010fe:	464a      	mov	r2, r9
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	0019      	movs	r1, r3
 8001104:	4382      	bics	r2, r0
 8001106:	4111      	asrs	r1, r2
 8001108:	000a      	movs	r2, r1
 800110a:	401a      	ands	r2, r3
 800110c:	0703      	lsls	r3, r0, #28
 800110e:	d502      	bpl.n	8001116 <__gnu_unwind_execute+0x12e>
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	01db      	lsls	r3, r3, #7
 8001114:	431a      	orrs	r2, r3
 8001116:	2300      	movs	r3, #0
 8001118:	2100      	movs	r1, #0
 800111a:	0030      	movs	r0, r6
 800111c:	f7ff fd64 	bl	8000be8 <_Unwind_VRS_Pop>
 8001120:	2800      	cmp	r0, #0
 8001122:	d1ce      	bne.n	80010c2 <__gnu_unwind_execute+0xda>
 8001124:	e772      	b.n	800100c <__gnu_unwind_execute+0x24>
 8001126:	28b1      	cmp	r0, #177	; 0xb1
 8001128:	d04a      	beq.n	80011c0 <__gnu_unwind_execute+0x1d8>
 800112a:	28b2      	cmp	r0, #178	; 0xb2
 800112c:	d05e      	beq.n	80011ec <__gnu_unwind_execute+0x204>
 800112e:	28b3      	cmp	r0, #179	; 0xb3
 8001130:	d100      	bne.n	8001134 <__gnu_unwind_execute+0x14c>
 8001132:	e08b      	b.n	800124c <__gnu_unwind_execute+0x264>
 8001134:	23fc      	movs	r3, #252	; 0xfc
 8001136:	4003      	ands	r3, r0
 8001138:	2bb4      	cmp	r3, #180	; 0xb4
 800113a:	d0c2      	beq.n	80010c2 <__gnu_unwind_execute+0xda>
 800113c:	464a      	mov	r2, r9
 800113e:	4653      	mov	r3, sl
 8001140:	4002      	ands	r2, r0
 8001142:	3201      	adds	r2, #1
 8001144:	431a      	orrs	r2, r3
 8001146:	2101      	movs	r1, #1
 8001148:	2301      	movs	r3, #1
 800114a:	0030      	movs	r0, r6
 800114c:	f7ff fd4c 	bl	8000be8 <_Unwind_VRS_Pop>
 8001150:	2800      	cmp	r0, #0
 8001152:	d1b6      	bne.n	80010c2 <__gnu_unwind_execute+0xda>
 8001154:	e75a      	b.n	800100c <__gnu_unwind_execute+0x24>
 8001156:	0204      	lsls	r4, r0, #8
 8001158:	0038      	movs	r0, r7
 800115a:	f7ff ff1b 	bl	8000f94 <next_unwind_byte>
 800115e:	2580      	movs	r5, #128	; 0x80
 8001160:	4320      	orrs	r0, r4
 8001162:	022d      	lsls	r5, r5, #8
 8001164:	42a8      	cmp	r0, r5
 8001166:	d0ac      	beq.n	80010c2 <__gnu_unwind_execute+0xda>
 8001168:	0104      	lsls	r4, r0, #4
 800116a:	0500      	lsls	r0, r0, #20
 800116c:	0c02      	lsrs	r2, r0, #16
 800116e:	2300      	movs	r3, #0
 8001170:	2100      	movs	r1, #0
 8001172:	0030      	movs	r0, r6
 8001174:	f7ff fd38 	bl	8000be8 <_Unwind_VRS_Pop>
 8001178:	2800      	cmp	r0, #0
 800117a:	d1a2      	bne.n	80010c2 <__gnu_unwind_execute+0xda>
 800117c:	422c      	tst	r4, r5
 800117e:	d100      	bne.n	8001182 <__gnu_unwind_execute+0x19a>
 8001180:	e744      	b.n	800100c <__gnu_unwind_execute+0x24>
 8001182:	2301      	movs	r3, #1
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	e741      	b.n	800100c <__gnu_unwind_execute+0x24>
 8001188:	28c6      	cmp	r0, #198	; 0xc6
 800118a:	d06a      	beq.n	8001262 <__gnu_unwind_execute+0x27a>
 800118c:	28c7      	cmp	r0, #199	; 0xc7
 800118e:	d07c      	beq.n	800128a <__gnu_unwind_execute+0x2a2>
 8001190:	0003      	movs	r3, r0
 8001192:	464a      	mov	r2, r9
 8001194:	4393      	bics	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2bc0      	cmp	r3, #192	; 0xc0
 800119a:	d100      	bne.n	800119e <__gnu_unwind_execute+0x1b6>
 800119c:	e08b      	b.n	80012b6 <__gnu_unwind_execute+0x2ce>
 800119e:	28c8      	cmp	r0, #200	; 0xc8
 80011a0:	d100      	bne.n	80011a4 <__gnu_unwind_execute+0x1bc>
 80011a2:	e08f      	b.n	80012c4 <__gnu_unwind_execute+0x2dc>
 80011a4:	28c9      	cmp	r0, #201	; 0xc9
 80011a6:	d000      	beq.n	80011aa <__gnu_unwind_execute+0x1c2>
 80011a8:	e78b      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 80011aa:	0038      	movs	r0, r7
 80011ac:	f7ff fef2 	bl	8000f94 <next_unwind_byte>
 80011b0:	23f0      	movs	r3, #240	; 0xf0
 80011b2:	0302      	lsls	r2, r0, #12
 80011b4:	031b      	lsls	r3, r3, #12
 80011b6:	4013      	ands	r3, r2
 80011b8:	4642      	mov	r2, r8
 80011ba:	4002      	ands	r2, r0
 80011bc:	3201      	adds	r2, #1
 80011be:	e778      	b.n	80010b2 <__gnu_unwind_execute+0xca>
 80011c0:	0038      	movs	r0, r7
 80011c2:	f7ff fee7 	bl	8000f94 <next_unwind_byte>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d100      	bne.n	80011cc <__gnu_unwind_execute+0x1e4>
 80011ca:	e77a      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 80011cc:	0003      	movs	r3, r0
 80011ce:	4642      	mov	r2, r8
 80011d0:	4393      	bics	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d000      	beq.n	80011da <__gnu_unwind_execute+0x1f2>
 80011d8:	e773      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 80011da:	0002      	movs	r2, r0
 80011dc:	2100      	movs	r1, #0
 80011de:	0030      	movs	r0, r6
 80011e0:	f7ff fd02 	bl	8000be8 <_Unwind_VRS_Pop>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d000      	beq.n	80011ea <__gnu_unwind_execute+0x202>
 80011e8:	e76b      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 80011ea:	e70f      	b.n	800100c <__gnu_unwind_execute+0x24>
 80011ec:	ab05      	add	r3, sp, #20
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	469b      	mov	fp, r3
 80011f2:	220d      	movs	r2, #13
 80011f4:	2300      	movs	r3, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	0030      	movs	r0, r6
 80011fa:	f7ff fae7 	bl	80007cc <_Unwind_VRS_Get>
 80011fe:	0038      	movs	r0, r7
 8001200:	f7ff fec8 	bl	8000f94 <next_unwind_byte>
 8001204:	0603      	lsls	r3, r0, #24
 8001206:	d56a      	bpl.n	80012de <__gnu_unwind_execute+0x2f6>
 8001208:	257f      	movs	r5, #127	; 0x7f
 800120a:	3cb0      	subs	r4, #176	; 0xb0
 800120c:	9b05      	ldr	r3, [sp, #20]
 800120e:	4028      	ands	r0, r5
 8001210:	40a0      	lsls	r0, r4
 8001212:	469c      	mov	ip, r3
 8001214:	4460      	add	r0, ip
 8001216:	9005      	str	r0, [sp, #20]
 8001218:	0038      	movs	r0, r7
 800121a:	3407      	adds	r4, #7
 800121c:	f7ff feba 	bl	8000f94 <next_unwind_byte>
 8001220:	0603      	lsls	r3, r0, #24
 8001222:	d4f3      	bmi.n	800120c <__gnu_unwind_execute+0x224>
 8001224:	2281      	movs	r2, #129	; 0x81
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4694      	mov	ip, r2
 800122a:	3a86      	subs	r2, #134	; 0x86
 800122c:	3aff      	subs	r2, #255	; 0xff
 800122e:	4010      	ands	r0, r2
 8001230:	40a0      	lsls	r0, r4
 8001232:	9b05      	ldr	r3, [sp, #20]
 8001234:	3a72      	subs	r2, #114	; 0x72
 8001236:	4463      	add	r3, ip
 8001238:	1818      	adds	r0, r3, r0
 800123a:	465b      	mov	r3, fp
 800123c:	9005      	str	r0, [sp, #20]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2100      	movs	r1, #0
 8001242:	2300      	movs	r3, #0
 8001244:	0030      	movs	r0, r6
 8001246:	f7ff fae7 	bl	8000818 <_Unwind_VRS_Set>
 800124a:	e6df      	b.n	800100c <__gnu_unwind_execute+0x24>
 800124c:	0038      	movs	r0, r7
 800124e:	f7ff fea1 	bl	8000f94 <next_unwind_byte>
 8001252:	23f0      	movs	r3, #240	; 0xf0
 8001254:	0302      	lsls	r2, r0, #12
 8001256:	031b      	lsls	r3, r3, #12
 8001258:	4013      	ands	r3, r2
 800125a:	4642      	mov	r2, r8
 800125c:	4002      	ands	r2, r0
 800125e:	3201      	adds	r2, #1
 8001260:	e770      	b.n	8001144 <__gnu_unwind_execute+0x15c>
 8001262:	0038      	movs	r0, r7
 8001264:	f7ff fe96 	bl	8000f94 <next_unwind_byte>
 8001268:	23f0      	movs	r3, #240	; 0xf0
 800126a:	0302      	lsls	r2, r0, #12
 800126c:	031b      	lsls	r3, r3, #12
 800126e:	4013      	ands	r3, r2
 8001270:	4642      	mov	r2, r8
 8001272:	4002      	ands	r2, r0
 8001274:	3201      	adds	r2, #1
 8001276:	431a      	orrs	r2, r3
 8001278:	2303      	movs	r3, #3
 800127a:	2103      	movs	r1, #3
 800127c:	0030      	movs	r0, r6
 800127e:	f7ff fcb3 	bl	8000be8 <_Unwind_VRS_Pop>
 8001282:	2800      	cmp	r0, #0
 8001284:	d000      	beq.n	8001288 <__gnu_unwind_execute+0x2a0>
 8001286:	e71c      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 8001288:	e6c0      	b.n	800100c <__gnu_unwind_execute+0x24>
 800128a:	0038      	movs	r0, r7
 800128c:	f7ff fe82 	bl	8000f94 <next_unwind_byte>
 8001290:	2800      	cmp	r0, #0
 8001292:	d100      	bne.n	8001296 <__gnu_unwind_execute+0x2ae>
 8001294:	e715      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 8001296:	0003      	movs	r3, r0
 8001298:	4642      	mov	r2, r8
 800129a:	4393      	bics	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d000      	beq.n	80012a4 <__gnu_unwind_execute+0x2bc>
 80012a2:	e70e      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 80012a4:	0002      	movs	r2, r0
 80012a6:	2104      	movs	r1, #4
 80012a8:	0030      	movs	r0, r6
 80012aa:	f7ff fc9d 	bl	8000be8 <_Unwind_VRS_Pop>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d000      	beq.n	80012b4 <__gnu_unwind_execute+0x2cc>
 80012b2:	e706      	b.n	80010c2 <__gnu_unwind_execute+0xda>
 80012b4:	e6aa      	b.n	800100c <__gnu_unwind_execute+0x24>
 80012b6:	4643      	mov	r3, r8
 80012b8:	22a0      	movs	r2, #160	; 0xa0
 80012ba:	401c      	ands	r4, r3
 80012bc:	3401      	adds	r4, #1
 80012be:	0312      	lsls	r2, r2, #12
 80012c0:	4322      	orrs	r2, r4
 80012c2:	e7d9      	b.n	8001278 <__gnu_unwind_execute+0x290>
 80012c4:	0038      	movs	r0, r7
 80012c6:	f7ff fe65 	bl	8000f94 <next_unwind_byte>
 80012ca:	4643      	mov	r3, r8
 80012cc:	0002      	movs	r2, r0
 80012ce:	439a      	bics	r2, r3
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	3210      	adds	r2, #16
 80012d4:	4018      	ands	r0, r3
 80012d6:	0312      	lsls	r2, r2, #12
 80012d8:	3001      	adds	r0, #1
 80012da:	4302      	orrs	r2, r0
 80012dc:	e6ea      	b.n	80010b4 <__gnu_unwind_execute+0xcc>
 80012de:	2402      	movs	r4, #2
 80012e0:	e7a0      	b.n	8001224 <__gnu_unwind_execute+0x23c>
 80012e2:	46c0      	nop			; (mov r8, r8)

080012e4 <__gnu_unwind_frame>:
 80012e4:	0003      	movs	r3, r0
 80012e6:	b500      	push	{lr}
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	b085      	sub	sp, #20
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	0008      	movs	r0, r1
 80012f0:	0212      	lsls	r2, r2, #8
 80012f2:	9201      	str	r2, [sp, #4]
 80012f4:	001a      	movs	r2, r3
 80012f6:	a901      	add	r1, sp, #4
 80012f8:	3208      	adds	r2, #8
 80012fa:	604a      	str	r2, [r1, #4]
 80012fc:	2203      	movs	r2, #3
 80012fe:	720a      	strb	r2, [r1, #8]
 8001300:	79db      	ldrb	r3, [r3, #7]
 8001302:	724b      	strb	r3, [r1, #9]
 8001304:	f7ff fe70 	bl	8000fe8 <__gnu_unwind_execute>
 8001308:	b005      	add	sp, #20
 800130a:	bd00      	pop	{pc}

0800130c <_Unwind_GetRegionStart>:
 800130c:	b510      	push	{r4, lr}
 800130e:	f7ff fe67 	bl	8000fe0 <unwind_UCB_from_context>
 8001312:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001314:	bd10      	pop	{r4, pc}
 8001316:	46c0      	nop			; (mov r8, r8)

08001318 <_Unwind_GetLanguageSpecificData>:
 8001318:	b510      	push	{r4, lr}
 800131a:	f7ff fe61 	bl	8000fe0 <unwind_UCB_from_context>
 800131e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001320:	79d3      	ldrb	r3, [r2, #7]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	3308      	adds	r3, #8
 8001326:	18d0      	adds	r0, r2, r3
 8001328:	bd10      	pop	{r4, pc}
 800132a:	46c0      	nop			; (mov r8, r8)

0800132c <_Unwind_GetTextRelBase>:
 800132c:	b510      	push	{r4, lr}
 800132e:	f009 fc1e 	bl	800ab6e <abort>
 8001332:	46c0      	nop			; (mov r8, r8)

08001334 <_Unwind_GetDataRelBase>:
 8001334:	b510      	push	{r4, lr}
 8001336:	f7ff fff9 	bl	800132c <_Unwind_GetTextRelBase>
 800133a:	46c0      	nop			; (mov r8, r8)

0800133c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_Init+0x24>)
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x24>)
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	2110      	movs	r1, #16
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800134c:	2000      	movs	r0, #0
 800134e:	f007 f9bb 	bl	80086c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001352:	f007 f93b 	bl	80085cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40022000 	.word	0x40022000

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  uwTick++;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_IncTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	4b02      	ldr	r3, [pc, #8]	; (8001378 <HAL_IncTick+0x14>)
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200012cc 	.word	0x200012cc

0800137c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_GetTick+0x10>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	0018      	movs	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	200012cc 	.word	0x200012cc

08001390 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e111      	b.n	80015ce <HAL_CAN_Init+0x23e>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	223d      	movs	r2, #61	; 0x3d
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <HAL_CAN_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	223c      	movs	r2, #60	; 0x3c
 80013ba:	2100      	movs	r1, #0
 80013bc:	5499      	strb	r1, [r3, r2]
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f007 f92d 	bl	8008620 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	223d      	movs	r2, #61	; 0x3d
 80013ca:	2102      	movs	r1, #2
 80013cc:	5499      	strb	r1, [r3, r2]
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	2102      	movs	r1, #2
 80013da:	438a      	bics	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 80013ee:	f7ff ffc5 	bl	800137c <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	60bb      	str	r3, [r7, #8]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80013f6:	e010      	b.n	800141a <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80013f8:	f7ff ffc0 	bl	800137c <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d909      	bls.n	800141a <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	223d      	movs	r2, #61	; 0x3d
 800140a:	2103      	movs	r1, #3
 800140c:	5499      	strb	r1, [r3, r2]
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	223c      	movs	r2, #60	; 0x3c
 8001412:	2100      	movs	r1, #0
 8001414:	5499      	strb	r1, [r3, r2]
      return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0d9      	b.n	80015ce <HAL_CAN_Init+0x23e>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	d0e8      	beq.n	80013f8 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	d100      	bne.n	8001434 <HAL_CAN_Init+0xa4>
 8001432:	e0bb      	b.n	80015ac <HAL_CAN_Init+0x21c>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d108      	bne.n	800144e <HAL_CAN_Init+0xbe>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e007      	b.n	800145e <HAL_CAN_Init+0xce>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	438a      	bics	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <HAL_CAN_Init+0xe8>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	430a      	orrs	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e007      	b.n	8001488 <HAL_CAN_Init+0xf8>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	438a      	bics	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d108      	bne.n	80014a2 <HAL_CAN_Init+0x112>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	2120      	movs	r1, #32
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e007      	b.n	80014b2 <HAL_CAN_Init+0x122>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	2120      	movs	r1, #32
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <HAL_CAN_Init+0x13c>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	2110      	movs	r1, #16
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e007      	b.n	80014dc <HAL_CAN_Init+0x14c>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	2110      	movs	r1, #16
 80014d8:	438a      	bics	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_CAN_Init+0x166>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	2108      	movs	r1, #8
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e007      	b.n	8001506 <HAL_CAN_Init+0x176>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	2108      	movs	r1, #8
 8001502:	438a      	bics	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_CAN_Init+0x190>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	2104      	movs	r1, #4
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e007      	b.n	8001530 <HAL_CAN_Init+0x1a0>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	2104      	movs	r1, #4
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6891      	ldr	r1, [r2, #8]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	68d2      	ldr	r2, [r2, #12]
 800153c:	4311      	orrs	r1, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6912      	ldr	r2, [r2, #16]
 8001542:	4311      	orrs	r1, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6952      	ldr	r2, [r2, #20]
 8001548:	4311      	orrs	r1, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6852      	ldr	r2, [r2, #4]
 800154e:	3a01      	subs	r2, #1
 8001550:	430a      	orrs	r2, r1
 8001552:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	2101      	movs	r1, #1
 8001560:	438a      	bics	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 8001564:	f7ff ff0a 	bl	800137c <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	60bb      	str	r3, [r7, #8]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 800156c:	e010      	b.n	8001590 <HAL_CAN_Init+0x200>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800156e:	f7ff ff05 	bl	800137c <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b0a      	cmp	r3, #10
 800157a:	d909      	bls.n	8001590 <HAL_CAN_Init+0x200>
      {
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	223d      	movs	r2, #61	; 0x3d
 8001580:	2103      	movs	r1, #3
 8001582:	5499      	strb	r1, [r3, r2]

       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	223c      	movs	r2, #60	; 0x3c
 8001588:	2100      	movs	r1, #0
 800158a:	5499      	strb	r1, [r3, r2]

       return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e01e      	b.n	80015ce <HAL_CAN_Init+0x23e>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	4013      	ands	r3, r2
 800159a:	d1e8      	bne.n	800156e <HAL_CAN_Init+0x1de>
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	d101      	bne.n	80015ac <HAL_CAN_Init+0x21c>
    {
      status = CAN_INITSTATUS_SUCCESS;
 80015a8:	2301      	movs	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <HAL_CAN_Init+0x234>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	223d      	movs	r2, #61	; 0x3d
 80015bc:	2101      	movs	r1, #1
 80015be:	5499      	strb	r1, [r3, r2]
  
    /* Return function status */
    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e004      	b.n	80015ce <HAL_CAN_Init+0x23e>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	223d      	movs	r2, #61	; 0x3d
 80015c8:	2104      	movs	r1, #4
 80015ca:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
  }
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	0002      	movs	r2, r0
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <NVIC_EnableIRQ+0x28>)
 80015e6:	1dfa      	adds	r2, r7, #7
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	0011      	movs	r1, r2
 80015ec:	221f      	movs	r2, #31
 80015ee:	400a      	ands	r2, r1
 80015f0:	2101      	movs	r1, #1
 80015f2:	4091      	lsls	r1, r2
 80015f4:	000a      	movs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	e000e100 	.word	0xe000e100

08001604 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b7f      	cmp	r3, #127	; 0x7f
 8001618:	d932      	bls.n	8001680 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161a:	4c2f      	ldr	r4, [pc, #188]	; (80016d8 <NVIC_SetPriority+0xd4>)
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	001a      	movs	r2, r3
 8001622:	230f      	movs	r3, #15
 8001624:	4013      	ands	r3, r2
 8001626:	3b08      	subs	r3, #8
 8001628:	0899      	lsrs	r1, r3, #2
 800162a:	4a2b      	ldr	r2, [pc, #172]	; (80016d8 <NVIC_SetPriority+0xd4>)
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	0018      	movs	r0, r3
 8001632:	230f      	movs	r3, #15
 8001634:	4003      	ands	r3, r0
 8001636:	3b08      	subs	r3, #8
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3306      	adds	r3, #6
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	18d3      	adds	r3, r2, r3
 8001640:	3304      	adds	r3, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1dfa      	adds	r2, r7, #7
 8001646:	7812      	ldrb	r2, [r2, #0]
 8001648:	0010      	movs	r0, r2
 800164a:	2203      	movs	r2, #3
 800164c:	4002      	ands	r2, r0
 800164e:	00d2      	lsls	r2, r2, #3
 8001650:	20ff      	movs	r0, #255	; 0xff
 8001652:	4090      	lsls	r0, r2
 8001654:	0002      	movs	r2, r0
 8001656:	43d2      	mvns	r2, r2
 8001658:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	20ff      	movs	r0, #255	; 0xff
 8001660:	4018      	ands	r0, r3
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	001d      	movs	r5, r3
 8001668:	2303      	movs	r3, #3
 800166a:	402b      	ands	r3, r5
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4098      	lsls	r0, r3
 8001670:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001672:	431a      	orrs	r2, r3
 8001674:	1d8b      	adds	r3, r1, #6
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	18e3      	adds	r3, r4, r3
 800167a:	3304      	adds	r3, #4
 800167c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800167e:	e027      	b.n	80016d0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001680:	4c16      	ldr	r4, [pc, #88]	; (80016dc <NVIC_SetPriority+0xd8>)
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b25b      	sxtb	r3, r3
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	4914      	ldr	r1, [pc, #80]	; (80016dc <NVIC_SetPriority+0xd8>)
 800168c:	1dfa      	adds	r2, r7, #7
 800168e:	7812      	ldrb	r2, [r2, #0]
 8001690:	b252      	sxtb	r2, r2
 8001692:	0892      	lsrs	r2, r2, #2
 8001694:	32c0      	adds	r2, #192	; 0xc0
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	5852      	ldr	r2, [r2, r1]
 800169a:	1df9      	adds	r1, r7, #7
 800169c:	7809      	ldrb	r1, [r1, #0]
 800169e:	0008      	movs	r0, r1
 80016a0:	2103      	movs	r1, #3
 80016a2:	4001      	ands	r1, r0
 80016a4:	00c9      	lsls	r1, r1, #3
 80016a6:	20ff      	movs	r0, #255	; 0xff
 80016a8:	4088      	lsls	r0, r1
 80016aa:	0001      	movs	r1, r0
 80016ac:	43c9      	mvns	r1, r1
 80016ae:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	0192      	lsls	r2, r2, #6
 80016b4:	20ff      	movs	r0, #255	; 0xff
 80016b6:	4010      	ands	r0, r2
 80016b8:	1dfa      	adds	r2, r7, #7
 80016ba:	7812      	ldrb	r2, [r2, #0]
 80016bc:	0015      	movs	r5, r2
 80016be:	2203      	movs	r2, #3
 80016c0:	402a      	ands	r2, r5
 80016c2:	00d2      	lsls	r2, r2, #3
 80016c4:	4090      	lsls	r0, r2
 80016c6:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	430a      	orrs	r2, r1
 80016ca:	33c0      	adds	r3, #192	; 0xc0
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	511a      	str	r2, [r3, r4]
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bdb0      	pop	{r4, r5, r7, pc}
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	1c02      	adds	r2, r0, #0
 80016f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	230f      	movs	r3, #15
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	0011      	movs	r1, r2
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff ff80 	bl	8001604 <NVIC_SetPriority>
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	0002      	movs	r2, r0
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b25b      	sxtb	r3, r3
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff ff5a 	bl	80015d8 <NVIC_EnableIRQ>
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001742:	e155      	b.n	80019f0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4091      	lsls	r1, r2
 800174e:	000a      	movs	r2, r1
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d100      	bne.n	800175c <HAL_GPIO_Init+0x30>
 800175a:	e146      	b.n	80019ea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x40>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d123      	bne.n	80017b4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	58d3      	ldr	r3, [r2, r3]
 8001778:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2207      	movs	r2, #7
 800177e:	4013      	ands	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	43da      	mvns	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2107      	movs	r1, #7
 8001798:	400b      	ands	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	409a      	lsls	r2, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	6939      	ldr	r1, [r7, #16]
 80017b2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	409a      	lsls	r2, r3
 80017c2:	0013      	movs	r3, r2
 80017c4:	43da      	mvns	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	0013      	movs	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d00b      	beq.n	8001808 <HAL_GPIO_Init+0xdc>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d130      	bne.n	800186a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	409a      	lsls	r2, r3
 8001816:	0013      	movs	r3, r2
 8001818:	43da      	mvns	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	0013      	movs	r3, r2
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800183e:	2201      	movs	r2, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	2201      	movs	r2, #1
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	43da      	mvns	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	055b      	lsls	r3, r3, #21
 80018a2:	4013      	ands	r3, r2
 80018a4:	d100      	bne.n	80018a8 <HAL_GPIO_Init+0x17c>
 80018a6:	e0a0      	b.n	80019ea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <HAL_GPIO_Init+0x2dc>)
 80018aa:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <HAL_GPIO_Init+0x2dc>)
 80018ac:	6992      	ldr	r2, [r2, #24]
 80018ae:	2101      	movs	r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	619a      	str	r2, [r3, #24]
 80018b4:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HAL_GPIO_Init+0x2dc>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x2e0>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	589b      	ldr	r3, [r3, r2]
 80018cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2203      	movs	r2, #3
 80018d2:	4013      	ands	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	2390      	movs	r3, #144	; 0x90
 80018e8:	05db      	lsls	r3, r3, #23
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x1f6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a47      	ldr	r2, [pc, #284]	; (8001a10 <HAL_GPIO_Init+0x2e4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x1f2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a46      	ldr	r2, [pc, #280]	; (8001a14 <HAL_GPIO_Init+0x2e8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x1ee>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a45      	ldr	r2, [pc, #276]	; (8001a18 <HAL_GPIO_Init+0x2ec>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x1ea>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <HAL_GPIO_Init+0x2f0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x1e6>
 800190e:	2304      	movs	r3, #4
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x1f8>
 8001912:	2305      	movs	r3, #5
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x1f8>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x1f8>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x1f8>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x1f8>
 8001922:	2300      	movs	r3, #0
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	2103      	movs	r1, #3
 8001928:	400a      	ands	r2, r1
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001934:	4935      	ldr	r1, [pc, #212]	; (8001a0c <HAL_GPIO_Init+0x2e0>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	43da      	mvns	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	4013      	ands	r3, r2
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43da      	mvns	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4013      	ands	r3, r2
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43da      	mvns	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	035b      	lsls	r3, r3, #13
 80019ae:	4013      	ands	r3, r2
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43da      	mvns	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	039b      	lsls	r3, r3, #14
 80019d8:	4013      	ands	r3, r2
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	40da      	lsrs	r2, r3
 80019f8:	1e13      	subs	r3, r2, #0
 80019fa:	d000      	beq.n	80019fe <HAL_GPIO_Init+0x2d2>
 80019fc:	e6a2      	b.n	8001744 <HAL_GPIO_Init+0x18>
  } 
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b006      	add	sp, #24
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800
 8001a18:	48000c00 	.word	0x48000c00
 8001a1c:	48001000 	.word	0x48001000
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8001a3a:	e0b9      	b.n	8001bb0 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1U << position);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	409a      	lsls	r2, r3
 8001a42:	0013      	movs	r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <HAL_GPIO_DeInit+0x2e>
 8001a50:	e0ab      	b.n	8001baa <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2U)); 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	0052      	lsls	r2, r2, #1
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	4091      	lsls	r1, r2
 8001a5e:	000a      	movs	r2, r1
 8001a60:	43d2      	mvns	r2, r2
 8001a62:	401a      	ands	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3U], 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	08d9      	lsrs	r1, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3108      	adds	r1, #8
 8001a74:	0089      	lsls	r1, r1, #2
 8001a76:	58cb      	ldr	r3, [r1, r3]
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	4001      	ands	r1, r0
 8001a7e:	0089      	lsls	r1, r1, #2
 8001a80:	200f      	movs	r0, #15
 8001a82:	4088      	lsls	r0, r1
 8001a84:	0001      	movs	r1, r0
 8001a86:	43c9      	mvns	r1, r1
 8001a88:	4019      	ands	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	50d1      	str	r1, [r2, r3]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	0052      	lsls	r2, r2, #1
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	4091      	lsls	r1, r2
 8001a9e:	000a      	movs	r2, r1
 8001aa0:	43d2      	mvns	r2, r2
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2101      	movs	r1, #1
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4091      	lsls	r1, r2
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	43d2      	mvns	r2, r2
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	0052      	lsls	r2, r2, #1
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	000a      	movs	r2, r1
 8001aca:	43d2      	mvns	r2, r2
 8001acc:	401a      	ands	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a3c      	ldr	r2, [pc, #240]	; (8001bc4 <HAL_GPIO_DeInit+0x1a0>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	589b      	ldr	r3, [r3, r2]
 8001ade:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	2390      	movs	r3, #144	; 0x90
 8001af6:	05db      	lsls	r3, r3, #23
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d019      	beq.n	8001b30 <HAL_GPIO_DeInit+0x10c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_GPIO_DeInit+0x1a4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_DeInit+0x108>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a31      	ldr	r2, [pc, #196]	; (8001bcc <HAL_GPIO_DeInit+0x1a8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_DeInit+0x104>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <HAL_GPIO_DeInit+0x1ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_DeInit+0x100>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_GPIO_DeInit+0x1b0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_DeInit+0xfc>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e008      	b.n	8001b32 <HAL_GPIO_DeInit+0x10e>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_DeInit+0x10e>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_DeInit+0x10e>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_DeInit+0x10e>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_DeInit+0x10e>
 8001b30:	2300      	movs	r3, #0
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	2103      	movs	r1, #3
 8001b36:	400a      	ands	r2, r1
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d132      	bne.n	8001baa <HAL_GPIO_DeInit+0x186>
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2203      	movs	r2, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2U], tmp);
 8001b54:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <HAL_GPIO_DeInit+0x1a0>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	491a      	ldr	r1, [pc, #104]	; (8001bc4 <HAL_GPIO_DeInit+0x1a0>)
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	0892      	lsrs	r2, r2, #2
 8001b60:	3202      	adds	r2, #2
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	5852      	ldr	r2, [r2, r1]
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	43c9      	mvns	r1, r1
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	501a      	str	r2, [r3, r0]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	43c9      	mvns	r1, r1
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001b84:	6852      	ldr	r2, [r2, #4]
 8001b86:	6939      	ldr	r1, [r7, #16]
 8001b88:	43c9      	mvns	r1, r1
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001b90:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001b92:	6892      	ldr	r2, [r2, #8]
 8001b94:	6939      	ldr	r1, [r7, #16]
 8001b96:	43c9      	mvns	r1, r1
 8001b98:	400a      	ands	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_GPIO_DeInit+0x1b4>)
 8001ba0:	68d2      	ldr	r2, [r2, #12]
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	43c9      	mvns	r1, r1
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	40da      	lsrs	r2, r3
 8001bb6:	1e13      	subs	r3, r2, #0
 8001bb8:	d000      	beq.n	8001bbc <HAL_GPIO_DeInit+0x198>
 8001bba:	e73f      	b.n	8001a3c <HAL_GPIO_DeInit+0x18>
  }
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b006      	add	sp, #24
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48000800 	.word	0x48000800
 8001bd0:	48000c00 	.word	0x48000c00
 8001bd4:	48001000 	.word	0x48001000
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	000a      	movs	r2, r1
 8001be6:	1cbb      	adds	r3, r7, #2
 8001be8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	1cba      	adds	r2, r7, #2
 8001bf0:	8812      	ldrh	r2, [r2, #0]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d004      	beq.n	8001c00 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf6:	230f      	movs	r3, #15
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e003      	b.n	8001c08 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c00:	230f      	movs	r3, #15
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c08:	230f      	movs	r3, #15
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
  }
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b004      	add	sp, #16
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	0008      	movs	r0, r1
 8001c20:	0011      	movs	r1, r2
 8001c22:	1cbb      	adds	r3, r7, #2
 8001c24:	1c02      	adds	r2, r0, #0
 8001c26:	801a      	strh	r2, [r3, #0]
 8001c28:	1c7b      	adds	r3, r7, #1
 8001c2a:	1c0a      	adds	r2, r1, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c2e:	1c7b      	adds	r3, r7, #1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	1cbb      	adds	r3, r7, #2
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c3e:	e003      	b.n	8001c48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c40:	1cbb      	adds	r3, r7, #2
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0de      	b.n	8001e28 <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	23ea      	movs	r3, #234	; 0xea
 8001c6e:	33ff      	adds	r3, #255	; 0xff
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d108      	bne.n	8001c8a <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	23f4      	movs	r3, #244	; 0xf4
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2100      	movs	r1, #0
 8001c80:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f008 fa23 	bl	800a0d0 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	23ea      	movs	r3, #234	; 0xea
 8001c8e:	33ff      	adds	r3, #255	; 0xff
 8001c90:	2103      	movs	r1, #3
 8001c92:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e043      	b.n	8001d22 <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	2029      	movs	r0, #41	; 0x29
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	18cb      	adds	r3, r1, r3
 8001caa:	181b      	adds	r3, r3, r0
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	b2dc      	uxtb	r4, r3
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	2028      	movs	r0, #40	; 0x28
 8001cba:	0013      	movs	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	18cb      	adds	r3, r1, r3
 8001cc4:	181b      	adds	r3, r3, r0
 8001cc6:	1c22      	adds	r2, r4, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	202b      	movs	r0, #43	; 0x2b
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	18cb      	adds	r3, r1, r3
 8001cda:	181b      	adds	r3, r3, r0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	18cb      	adds	r3, r1, r3
 8001cee:	3334      	adds	r3, #52	; 0x34
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	18cb      	adds	r3, r1, r3
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	0013      	movs	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	18cb      	adds	r3, r1, r3
 8001d16:	333c      	adds	r3, #60	; 0x3c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8b6      	bhi.n	8001c9a <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e04e      	b.n	8001dd0 <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	230a      	movs	r3, #10
 8001d38:	33ff      	adds	r3, #255	; 0xff
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	18c3      	adds	r3, r0, r3
 8001d46:	185b      	adds	r3, r3, r1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	b2dc      	uxtb	r4, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	2384      	movs	r3, #132	; 0x84
 8001d56:	0059      	lsls	r1, r3, #1
 8001d58:	0013      	movs	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	18c3      	adds	r3, r0, r3
 8001d62:	185b      	adds	r3, r3, r1
 8001d64:	1c22      	adds	r2, r4, #0
 8001d66:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	230c      	movs	r3, #12
 8001d6e:	33ff      	adds	r3, #255	; 0xff
 8001d70:	0019      	movs	r1, r3
 8001d72:	0013      	movs	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	18c3      	adds	r3, r0, r3
 8001d7c:	185b      	adds	r3, r3, r1
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	238a      	movs	r3, #138	; 0x8a
 8001d88:	0059      	lsls	r1, r3, #1
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	18c3      	adds	r3, r0, r3
 8001d94:	185b      	adds	r3, r3, r1
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	238c      	movs	r3, #140	; 0x8c
 8001da0:	0059      	lsls	r1, r3, #1
 8001da2:	0013      	movs	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	18c3      	adds	r3, r0, r3
 8001dac:	185b      	adds	r3, r3, r1
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	238e      	movs	r3, #142	; 0x8e
 8001db8:	0059      	lsls	r1, r3, #1
 8001dba:	0013      	movs	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	18c3      	adds	r3, r0, r3
 8001dc4:	185b      	adds	r3, r3, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d8ab      	bhi.n	8001d32 <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	2101      	movs	r1, #1
 8001de2:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	2100      	movs	r1, #0
 8001dec:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2244      	movs	r2, #68	; 0x44
 8001df4:	2100      	movs	r1, #0
 8001df6:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2250      	movs	r2, #80	; 0x50
 8001dfe:	2100      	movs	r1, #0
 8001e00:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8001e02:	23bf      	movs	r3, #191	; 0xbf
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	b291      	uxth	r1, r2
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2224      	movs	r2, #36	; 0x24
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	23ea      	movs	r3, #234	; 0xea
 8001e20:	33ff      	adds	r3, #255	; 0xff
 8001e22:	2101      	movs	r1, #1
 8001e24:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b005      	add	sp, #20
 8001e2e:	bd90      	pop	{r4, r7, pc}

08001e30 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2158      	movs	r1, #88	; 0x58
 8001e42:	5a5b      	ldrh	r3, [r3, r1]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4905      	ldr	r1, [pc, #20]	; (8001e5c <HAL_PCD_Start+0x2c>)
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	2358      	movs	r3, #88	; 0x58
 8001e4e:	52d1      	strh	r1, [r2, r3]
  
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	ffff8000 	.word	0xffff8000

08001e60 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2244      	movs	r2, #68	; 0x44
 8001e72:	5a9b      	ldrh	r3, [r3, r2]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	001a      	movs	r2, r3
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d103      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f001 fc19 	bl	80036c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2244      	movs	r2, #68	; 0x44
 8001e94:	5a9b      	ldrh	r3, [r3, r2]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d114      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2144      	movs	r1, #68	; 0x44
 8001eb2:	5a5b      	ldrh	r3, [r3, r1]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4977      	ldr	r1, [pc, #476]	; (8002094 <HAL_PCD_IRQHandler+0x234>)
 8001eb8:	400b      	ands	r3, r1
 8001eba:	b299      	uxth	r1, r3
 8001ebc:	2344      	movs	r3, #68	; 0x44
 8001ebe:	52d1      	strh	r1, [r2, r3]
    HAL_PCD_ResetCallback(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f008 f98d 	bl	800a1e2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2100      	movs	r1, #0
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 f8ef 	bl	80020b0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2244      	movs	r2, #68	; 0x44
 8001ed8:	5a9b      	ldrh	r3, [r3, r2]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	001a      	movs	r2, r3
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	01db      	lsls	r3, r3, #7
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	01db      	lsls	r3, r3, #7
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d10b      	bne.n	8001f04 <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2144      	movs	r1, #68	; 0x44
 8001ef6:	5a5b      	ldrh	r3, [r3, r1]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4967      	ldr	r1, [pc, #412]	; (8002098 <HAL_PCD_IRQHandler+0x238>)
 8001efc:	400b      	ands	r3, r1
 8001efe:	b299      	uxth	r1, r3
 8001f00:	2344      	movs	r3, #68	; 0x44
 8001f02:	52d1      	strh	r1, [r2, r3]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2244      	movs	r2, #68	; 0x44
 8001f0a:	5a9b      	ldrh	r3, [r3, r2]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	001a      	movs	r2, r3
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	019b      	lsls	r3, r3, #6
 8001f14:	401a      	ands	r2, r3
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d10b      	bne.n	8001f36 <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2144      	movs	r1, #68	; 0x44
 8001f28:	5a5b      	ldrh	r3, [r3, r1]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	495b      	ldr	r1, [pc, #364]	; (800209c <HAL_PCD_IRQHandler+0x23c>)
 8001f2e:	400b      	ands	r3, r1
 8001f30:	b299      	uxth	r1, r3
 8001f32:	2344      	movs	r3, #68	; 0x44
 8001f34:	52d1      	strh	r1, [r2, r3]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2244      	movs	r2, #68	; 0x44
 8001f3c:	5a9b      	ldrh	r3, [r3, r2]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	001a      	movs	r2, r3
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	015b      	lsls	r3, r3, #5
 8001f46:	401a      	ands	r2, r3
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	015b      	lsls	r3, r3, #5
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d124      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2140      	movs	r1, #64	; 0x40
 8001f5a:	5a5b      	ldrh	r3, [r3, r1]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2104      	movs	r1, #4
 8001f60:	438b      	bics	r3, r1
 8001f62:	b299      	uxth	r1, r3
 8001f64:	2340      	movs	r3, #64	; 0x40
 8001f66:	52d1      	strh	r1, [r2, r3]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8001f68:	23bd      	movs	r3, #189	; 0xbd
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	b291      	uxth	r1, r2
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f008 f979 	bl	800a274 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2144      	movs	r1, #68	; 0x44
 8001f8c:	5a5b      	ldrh	r3, [r3, r1]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4943      	ldr	r1, [pc, #268]	; (80020a0 <HAL_PCD_IRQHandler+0x240>)
 8001f92:	400b      	ands	r3, r1
 8001f94:	b299      	uxth	r1, r3
 8001f96:	2344      	movs	r3, #68	; 0x44
 8001f98:	52d1      	strh	r1, [r2, r3]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2244      	movs	r2, #68	; 0x44
 8001fa0:	5a9b      	ldrh	r3, [r3, r2]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	401a      	ands	r2, r3
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d134      	bne.n	800201e <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2144      	movs	r1, #68	; 0x44
 8001fbe:	5a5b      	ldrh	r3, [r3, r1]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4938      	ldr	r1, [pc, #224]	; (80020a4 <HAL_PCD_IRQHandler+0x244>)
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	2344      	movs	r3, #68	; 0x44
 8001fca:	52d1      	strh	r1, [r2, r3]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2140      	movs	r1, #64	; 0x40
 8001fd6:	5a5b      	ldrh	r3, [r3, r1]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2108      	movs	r1, #8
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	2340      	movs	r3, #64	; 0x40
 8001fe2:	52d1      	strh	r1, [r2, r3]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	5a5b      	ldrh	r3, [r3, r1]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	b299      	uxth	r1, r3
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	52d1      	strh	r1, [r2, r3]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2244      	movs	r2, #68	; 0x44
 8002002:	5a9b      	ldrh	r3, [r3, r2]
 8002004:	b29b      	uxth	r3, r3
 8002006:	001a      	movs	r2, r3
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	015b      	lsls	r3, r3, #5
 800200c:	401a      	ands	r2, r3
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	015b      	lsls	r3, r3, #5
 8002012:	429a      	cmp	r2, r3
 8002014:	d003      	beq.n	800201e <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f008 f90f 	bl	800a23c <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2244      	movs	r2, #68	; 0x44
 8002024:	5a9b      	ldrh	r3, [r3, r2]
 8002026:	b29b      	uxth	r3, r3
 8002028:	001a      	movs	r2, r3
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	401a      	ands	r2, r3
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d10f      	bne.n	8002058 <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2144      	movs	r1, #68	; 0x44
 8002042:	5a5b      	ldrh	r3, [r3, r1]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4918      	ldr	r1, [pc, #96]	; (80020a8 <HAL_PCD_IRQHandler+0x248>)
 8002048:	400b      	ands	r3, r1
 800204a:	b299      	uxth	r1, r3
 800204c:	2344      	movs	r3, #68	; 0x44
 800204e:	52d1      	strh	r1, [r2, r3]
    HAL_PCD_SOFCallback(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0018      	movs	r0, r3
 8002054:	f008 f8b6 	bl	800a1c4 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2244      	movs	r2, #68	; 0x44
 800205e:	5a9b      	ldrh	r3, [r3, r2]
 8002060:	b29b      	uxth	r3, r3
 8002062:	001a      	movs	r2, r3
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	401a      	ands	r2, r3
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	429a      	cmp	r2, r3
 8002070:	d10b      	bne.n	800208a <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2144      	movs	r1, #68	; 0x44
 800207c:	5a5b      	ldrh	r3, [r3, r1]
 800207e:	b29b      	uxth	r3, r3
 8002080:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_PCD_IRQHandler+0x24c>)
 8002082:	400b      	ands	r3, r1
 8002084:	b299      	uxth	r1, r3
 8002086:	2344      	movs	r3, #68	; 0x44
 8002088:	52d1      	strh	r1, [r2, r3]
  }
}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b004      	add	sp, #16
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	fffffbff 	.word	0xfffffbff
 8002098:	ffffbfff 	.word	0xffffbfff
 800209c:	ffffdfff 	.word	0xffffdfff
 80020a0:	ffffefff 	.word	0xffffefff
 80020a4:	fffff7ff 	.word	0xfffff7ff
 80020a8:	fffffdff 	.word	0xfffffdff
 80020ac:	fffffeff 	.word	0xfffffeff

080020b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	000a      	movs	r2, r1
 80020ba:	1cfb      	adds	r3, r7, #3
 80020bc:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	23f4      	movs	r3, #244	; 0xf4
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_PCD_SetAddress+0x1e>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e019      	b.n	8002102 <HAL_PCD_SetAddress+0x52>
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	23f4      	movs	r3, #244	; 0xf4
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2101      	movs	r1, #1
 80020d6:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 80020d8:	1cfb      	adds	r3, r7, #3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	224c      	movs	r2, #76	; 0x4c
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	5299      	strh	r1, [r3, r2]
 80020ea:	e004      	b.n	80020f6 <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1cfa      	adds	r2, r7, #3
 80020f0:	2124      	movs	r1, #36	; 0x24
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	23f4      	movs	r3, #244	; 0xf4
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2100      	movs	r1, #0
 80020fe:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b002      	add	sp, #8
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	000c      	movs	r4, r1
 8002116:	0010      	movs	r0, r2
 8002118:	0019      	movs	r1, r3
 800211a:	1cfb      	adds	r3, r7, #3
 800211c:	1c22      	adds	r2, r4, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	003b      	movs	r3, r7
 8002122:	1c02      	adds	r2, r0, #0
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	1cbb      	adds	r3, r7, #2
 8002128:	1c0a      	adds	r2, r1, #0
 800212a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800212c:	2311      	movs	r3, #17
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002134:	1cfb      	adds	r3, r7, #3
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b25b      	sxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	da0c      	bge.n	8002158 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800213e:	1cfb      	adds	r3, r7, #3
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	227f      	movs	r2, #127	; 0x7f
 8002144:	401a      	ands	r2, r3
 8002146:	0013      	movs	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	3328      	adds	r3, #40	; 0x28
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	18d3      	adds	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e00c      	b.n	8002172 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002158:	1cfb      	adds	r3, r7, #3
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	227f      	movs	r2, #127	; 0x7f
 800215e:	401a      	ands	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	3309      	adds	r3, #9
 800216a:	33ff      	adds	r3, #255	; 0xff
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	18d3      	adds	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 8002172:	1cfb      	adds	r3, r7, #3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	227f      	movs	r2, #127	; 0x7f
 8002178:	4013      	ands	r3, r2
 800217a:	b2da      	uxtb	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002180:	1cfb      	adds	r3, r7, #3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	09db      	lsrs	r3, r3, #7
 800218a:	b2db      	uxtb	r3, r3
 800218c:	001a      	movs	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8002192:	003b      	movs	r3, r7
 8002194:	881a      	ldrh	r2, [r3, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1cba      	adds	r2, r7, #2
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	23f4      	movs	r3, #244	; 0xf4
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_PCD_EP_Open+0xa6>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e30f      	b.n	80027d2 <HAL_PCD_EP_Open+0x6c6>
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	23f4      	movs	r3, #244	; 0xf4
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2101      	movs	r1, #1
 80021ba:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	78db      	ldrb	r3, [r3, #3]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d04c      	beq.n	800225e <HAL_PCD_EP_Open+0x152>
 80021c4:	dc02      	bgt.n	80021cc <HAL_PCD_EP_Open+0xc0>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_PCD_EP_Open+0xca>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 80021ca:	e060      	b.n	800228e <HAL_PCD_EP_Open+0x182>
  switch (ep->type)
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d01a      	beq.n	8002206 <HAL_PCD_EP_Open+0xfa>
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d02c      	beq.n	800222e <HAL_PCD_EP_Open+0x122>
    break;
 80021d4:	e05b      	b.n	800228e <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	001a      	movs	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	18d2      	adds	r2, r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0019      	movs	r1, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	18cb      	adds	r3, r1, r3
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	49b6      	ldr	r1, [pc, #728]	; (80024d0 <HAL_PCD_EP_Open+0x3c4>)
 80021f6:	400b      	ands	r3, r1
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0089      	lsls	r1, r1, #2
 80021fe:	430b      	orrs	r3, r1
 8002200:	b29b      	uxth	r3, r3
 8002202:	8013      	strh	r3, [r2, #0]
    break;
 8002204:	e043      	b.n	800228e <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	001a      	movs	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	18d2      	adds	r2, r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0019      	movs	r1, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	18cb      	adds	r3, r1, r3
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	49aa      	ldr	r1, [pc, #680]	; (80024d0 <HAL_PCD_EP_Open+0x3c4>)
 8002226:	400b      	ands	r3, r1
 8002228:	b29b      	uxth	r3, r3
 800222a:	8013      	strh	r3, [r2, #0]
    break;
 800222c:	e02f      	b.n	800228e <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	001a      	movs	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	18d2      	adds	r2, r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0019      	movs	r1, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	18cb      	adds	r3, r1, r3
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	49a0      	ldr	r1, [pc, #640]	; (80024d0 <HAL_PCD_EP_Open+0x3c4>)
 800224e:	400b      	ands	r3, r1
 8002250:	b29b      	uxth	r3, r3
 8002252:	21c0      	movs	r1, #192	; 0xc0
 8002254:	00c9      	lsls	r1, r1, #3
 8002256:	430b      	orrs	r3, r1
 8002258:	b29b      	uxth	r3, r3
 800225a:	8013      	strh	r3, [r2, #0]
    break;
 800225c:	e017      	b.n	800228e <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	001a      	movs	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	18d2      	adds	r2, r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0019      	movs	r1, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	18cb      	adds	r3, r1, r3
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	4994      	ldr	r1, [pc, #592]	; (80024d0 <HAL_PCD_EP_Open+0x3c4>)
 800227e:	400b      	ands	r3, r1
 8002280:	b29b      	uxth	r3, r3
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	00c9      	lsls	r1, r1, #3
 8002286:	430b      	orrs	r3, r1
 8002288:	b29b      	uxth	r3, r3
 800228a:	8013      	strh	r3, [r2, #0]
    break;
 800228c:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	001a      	movs	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	18d2      	adds	r2, r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0019      	movs	r1, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	18cb      	adds	r3, r1, r3
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	4989      	ldr	r1, [pc, #548]	; (80024d4 <HAL_PCD_EP_Open+0x3c8>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	b299      	uxth	r1, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	430b      	orrs	r3, r1
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4986      	ldr	r1, [pc, #536]	; (80024d8 <HAL_PCD_EP_Open+0x3cc>)
 80022be:	430b      	orrs	r3, r1
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0U) 
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	7a9b      	ldrb	r3, [r3, #10]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d000      	beq.n	80022ce <HAL_PCD_EP_Open+0x1c2>
 80022cc:	e114      	b.n	80024f8 <HAL_PCD_EP_Open+0x3ec>
  {
    if (ep->is_in)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	785b      	ldrb	r3, [r3, #1]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d055      	beq.n	8002382 <HAL_PCD_EP_Open+0x276>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2250      	movs	r2, #80	; 0x50
 80022dc:	5a9b      	ldrh	r3, [r3, r2]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	001a      	movs	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	18d3      	adds	r3, r2, r3
 80022ea:	001a      	movs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	18d3      	adds	r3, r2, r3
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	00d2      	lsls	r2, r2, #3
 80022f6:	4694      	mov	ip, r2
 80022f8:	4463      	add	r3, ip
 80022fa:	001a      	movs	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	889b      	ldrh	r3, [r3, #4]
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	b29b      	uxth	r3, r3
 8002304:	18db      	adds	r3, r3, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	001a      	movs	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	18d3      	adds	r3, r2, r3
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	001a      	movs	r2, r3
 800231c:	2340      	movs	r3, #64	; 0x40
 800231e:	4013      	ands	r3, r2
 8002320:	d015      	beq.n	800234e <HAL_PCD_EP_Open+0x242>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	001a      	movs	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	18d2      	adds	r2, r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0019      	movs	r1, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	18cb      	adds	r3, r1, r3
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	4964      	ldr	r1, [pc, #400]	; (80024d4 <HAL_PCD_EP_Open+0x3c8>)
 8002342:	400b      	ands	r3, r1
 8002344:	b29b      	uxth	r3, r3
 8002346:	4965      	ldr	r1, [pc, #404]	; (80024dc <HAL_PCD_EP_Open+0x3d0>)
 8002348:	430b      	orrs	r3, r1
 800234a:	b29b      	uxth	r3, r3
 800234c:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	001a      	movs	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	18d3      	adds	r3, r2, r3
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	4a60      	ldr	r2, [pc, #384]	; (80024e0 <HAL_PCD_EP_Open+0x3d4>)
 8002360:	4013      	ands	r3, r2
 8002362:	b29c      	uxth	r4, r3
 8002364:	2320      	movs	r3, #32
 8002366:	4063      	eors	r3, r4
 8002368:	b29c      	uxth	r4, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	001a      	movs	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	18d3      	adds	r3, r2, r3
 8002378:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <HAL_PCD_EP_Open+0x3cc>)
 800237a:	4322      	orrs	r2, r4
 800237c:	b292      	uxth	r2, r2
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	e21f      	b.n	80027c2 <HAL_PCD_EP_Open+0x6b6>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2250      	movs	r2, #80	; 0x50
 8002388:	5a9b      	ldrh	r3, [r3, r2]
 800238a:	b29b      	uxth	r3, r3
 800238c:	001a      	movs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	001a      	movs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	18d3      	adds	r3, r2, r3
 800239e:	4a51      	ldr	r2, [pc, #324]	; (80024e4 <HAL_PCD_EP_Open+0x3d8>)
 80023a0:	4694      	mov	ip, r2
 80023a2:	4463      	add	r3, ip
 80023a4:	001a      	movs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	889b      	ldrh	r3, [r3, #4]
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	18db      	adds	r3, r3, r3
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2250      	movs	r2, #80	; 0x50
 80023ba:	5a9b      	ldrh	r3, [r3, r2]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	001a      	movs	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	18d3      	adds	r3, r2, r3
 80023c8:	001a      	movs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	18d3      	adds	r3, r2, r3
 80023d0:	4a45      	ldr	r2, [pc, #276]	; (80024e8 <HAL_PCD_EP_Open+0x3dc>)
 80023d2:	4694      	mov	ip, r2
 80023d4:	4463      	add	r3, ip
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b3e      	cmp	r3, #62	; 0x3e
 80023de:	d91c      	bls.n	800241a <HAL_PCD_EP_Open+0x30e>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	095a      	lsrs	r2, r3, #5
 80023e6:	2312      	movs	r3, #18
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	221f      	movs	r2, #31
 80023f2:	4013      	ands	r3, r2
 80023f4:	d106      	bne.n	8002404 <HAL_PCD_EP_Open+0x2f8>
 80023f6:	2312      	movs	r3, #18
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	881a      	ldrh	r2, [r3, #0]
 80023fc:	2312      	movs	r3, #18
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	3a01      	subs	r2, #1
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	2312      	movs	r3, #18
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	029b      	lsls	r3, r3, #10
 800240c:	b29b      	uxth	r3, r3
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <HAL_PCD_EP_Open+0x3e0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	801a      	strh	r2, [r3, #0]
 8002418:	e018      	b.n	800244c <HAL_PCD_EP_Open+0x340>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	085a      	lsrs	r2, r3, #1
 8002420:	2312      	movs	r3, #18
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d006      	beq.n	800243e <HAL_PCD_EP_Open+0x332>
 8002430:	2312      	movs	r3, #18
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	881a      	ldrh	r2, [r3, #0]
 8002436:	2312      	movs	r3, #18
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	3201      	adds	r2, #1
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	2312      	movs	r3, #18
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	001a      	movs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	18d3      	adds	r3, r2, r3
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	001a      	movs	r2, r3
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	01db      	lsls	r3, r3, #7
 8002462:	4013      	ands	r3, r2
 8002464:	d015      	beq.n	8002492 <HAL_PCD_EP_Open+0x386>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	001a      	movs	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	18d2      	adds	r2, r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0019      	movs	r1, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	18cb      	adds	r3, r1, r3
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	4913      	ldr	r1, [pc, #76]	; (80024d4 <HAL_PCD_EP_Open+0x3c8>)
 8002486:	400b      	ands	r3, r1
 8002488:	b29b      	uxth	r3, r3
 800248a:	4919      	ldr	r1, [pc, #100]	; (80024f0 <HAL_PCD_EP_Open+0x3e4>)
 800248c:	430b      	orrs	r3, r1
 800248e:	b29b      	uxth	r3, r3
 8002490:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	001a      	movs	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	18d3      	adds	r3, r2, r3
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <HAL_PCD_EP_Open+0x3e8>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29c      	uxth	r4, r3
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	4063      	eors	r3, r4
 80024ae:	b29c      	uxth	r4, r3
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	019b      	lsls	r3, r3, #6
 80024b4:	4063      	eors	r3, r4
 80024b6:	b29c      	uxth	r4, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	001a      	movs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	18d3      	adds	r3, r2, r3
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_PCD_EP_Open+0x3cc>)
 80024c8:	4322      	orrs	r2, r4
 80024ca:	b292      	uxth	r2, r2
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	e178      	b.n	80027c2 <HAL_PCD_EP_Open+0x6b6>
 80024d0:	ffff898f 	.word	0xffff898f
 80024d4:	00000f0f 	.word	0x00000f0f
 80024d8:	ffff8080 	.word	0xffff8080
 80024dc:	ffff80c0 	.word	0xffff80c0
 80024e0:	ffff8fbf 	.word	0xffff8fbf
 80024e4:	00000404 	.word	0x00000404
 80024e8:	00000406 	.word	0x00000406
 80024ec:	ffff8000 	.word	0xffff8000
 80024f0:	ffffc080 	.word	0xffffc080
 80024f4:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	001a      	movs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	18d2      	adds	r2, r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0019      	movs	r1, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	18cb      	adds	r3, r1, r3
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	49b1      	ldr	r1, [pc, #708]	; (80027dc <HAL_PCD_EP_Open+0x6d0>)
 8002518:	400b      	ands	r3, r1
 800251a:	b29b      	uxth	r3, r3
 800251c:	49b0      	ldr	r1, [pc, #704]	; (80027e0 <HAL_PCD_EP_Open+0x6d4>)
 800251e:	430b      	orrs	r3, r1
 8002520:	b29b      	uxth	r3, r3
 8002522:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2250      	movs	r2, #80	; 0x50
 800252a:	5a9b      	ldrh	r3, [r3, r2]
 800252c:	b29b      	uxth	r3, r3
 800252e:	001a      	movs	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	18d3      	adds	r3, r2, r3
 8002538:	001a      	movs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	18d3      	adds	r3, r2, r3
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	00d2      	lsls	r2, r2, #3
 8002544:	4694      	mov	ip, r2
 8002546:	4463      	add	r3, ip
 8002548:	001a      	movs	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	88db      	ldrh	r3, [r3, #6]
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	b29b      	uxth	r3, r3
 8002552:	18db      	adds	r3, r3, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	8013      	strh	r3, [r2, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2250      	movs	r2, #80	; 0x50
 800255e:	5a9b      	ldrh	r3, [r3, r2]
 8002560:	b29b      	uxth	r3, r3
 8002562:	001a      	movs	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	18d3      	adds	r3, r2, r3
 800256c:	001a      	movs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	18d3      	adds	r3, r2, r3
 8002574:	4a9b      	ldr	r2, [pc, #620]	; (80027e4 <HAL_PCD_EP_Open+0x6d8>)
 8002576:	4694      	mov	ip, r2
 8002578:	4463      	add	r3, ip
 800257a:	001a      	movs	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	891b      	ldrh	r3, [r3, #8]
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	b29b      	uxth	r3, r3
 8002584:	18db      	adds	r3, r3, r3
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d000      	beq.n	8002594 <HAL_PCD_EP_Open+0x488>
 8002592:	e08f      	b.n	80026b4 <HAL_PCD_EP_Open+0x5a8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	001a      	movs	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	001a      	movs	r2, r3
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	01db      	lsls	r3, r3, #7
 80025aa:	4013      	ands	r3, r2
 80025ac:	d015      	beq.n	80025da <HAL_PCD_EP_Open+0x4ce>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	001a      	movs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	18d2      	adds	r2, r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0019      	movs	r1, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	18cb      	adds	r3, r1, r3
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	4986      	ldr	r1, [pc, #536]	; (80027e8 <HAL_PCD_EP_Open+0x6dc>)
 80025ce:	400b      	ands	r3, r1
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4986      	ldr	r1, [pc, #536]	; (80027ec <HAL_PCD_EP_Open+0x6e0>)
 80025d4:	430b      	orrs	r3, r1
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	001a      	movs	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	001a      	movs	r2, r3
 80025ec:	2340      	movs	r3, #64	; 0x40
 80025ee:	4013      	ands	r3, r2
 80025f0:	d015      	beq.n	800261e <HAL_PCD_EP_Open+0x512>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	001a      	movs	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	18d2      	adds	r2, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0019      	movs	r1, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	18cb      	adds	r3, r1, r3
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	4975      	ldr	r1, [pc, #468]	; (80027e8 <HAL_PCD_EP_Open+0x6dc>)
 8002612:	400b      	ands	r3, r1
 8002614:	b29b      	uxth	r3, r3
 8002616:	4976      	ldr	r1, [pc, #472]	; (80027f0 <HAL_PCD_EP_Open+0x6e4>)
 8002618:	430b      	orrs	r3, r1
 800261a:	b29b      	uxth	r3, r3
 800261c:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	001a      	movs	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	18d2      	adds	r2, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0019      	movs	r1, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	18cb      	adds	r3, r1, r3
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	496a      	ldr	r1, [pc, #424]	; (80027e8 <HAL_PCD_EP_Open+0x6dc>)
 800263e:	400b      	ands	r3, r1
 8002640:	b29b      	uxth	r3, r3
 8002642:	496b      	ldr	r1, [pc, #428]	; (80027f0 <HAL_PCD_EP_Open+0x6e4>)
 8002644:	430b      	orrs	r3, r1
 8002646:	b29b      	uxth	r3, r3
 8002648:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	001a      	movs	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	18d3      	adds	r3, r2, r3
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_PCD_EP_Open+0x6e8>)
 800265c:	4013      	ands	r3, r2
 800265e:	b29c      	uxth	r4, r3
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	015b      	lsls	r3, r3, #5
 8002664:	4063      	eors	r3, r4
 8002666:	b29c      	uxth	r4, r3
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	019b      	lsls	r3, r3, #6
 800266c:	4063      	eors	r3, r4
 800266e:	b29c      	uxth	r4, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	001a      	movs	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	18d3      	adds	r3, r2, r3
 800267e:	4a5e      	ldr	r2, [pc, #376]	; (80027f8 <HAL_PCD_EP_Open+0x6ec>)
 8002680:	4322      	orrs	r2, r4
 8002682:	b292      	uxth	r2, r2
 8002684:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	001a      	movs	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	4a59      	ldr	r2, [pc, #356]	; (80027fc <HAL_PCD_EP_Open+0x6f0>)
 8002698:	4013      	ands	r3, r2
 800269a:	b29c      	uxth	r4, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	001a      	movs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	18d3      	adds	r3, r2, r3
 80026aa:	4a53      	ldr	r2, [pc, #332]	; (80027f8 <HAL_PCD_EP_Open+0x6ec>)
 80026ac:	4322      	orrs	r2, r4
 80026ae:	b292      	uxth	r2, r2
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	e086      	b.n	80027c2 <HAL_PCD_EP_Open+0x6b6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	001a      	movs	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	18d3      	adds	r3, r2, r3
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	001a      	movs	r2, r3
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	01db      	lsls	r3, r3, #7
 80026ca:	4013      	ands	r3, r2
 80026cc:	d015      	beq.n	80026fa <HAL_PCD_EP_Open+0x5ee>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	001a      	movs	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	18d2      	adds	r2, r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0019      	movs	r1, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	18cb      	adds	r3, r1, r3
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	493e      	ldr	r1, [pc, #248]	; (80027e8 <HAL_PCD_EP_Open+0x6dc>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	493e      	ldr	r1, [pc, #248]	; (80027ec <HAL_PCD_EP_Open+0x6e0>)
 80026f4:	430b      	orrs	r3, r1
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	001a      	movs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	18d3      	adds	r3, r2, r3
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	001a      	movs	r2, r3
 800270c:	2340      	movs	r3, #64	; 0x40
 800270e:	4013      	ands	r3, r2
 8002710:	d015      	beq.n	800273e <HAL_PCD_EP_Open+0x632>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	001a      	movs	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	18d2      	adds	r2, r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0019      	movs	r1, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	18cb      	adds	r3, r1, r3
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	492d      	ldr	r1, [pc, #180]	; (80027e8 <HAL_PCD_EP_Open+0x6dc>)
 8002732:	400b      	ands	r3, r1
 8002734:	b29b      	uxth	r3, r3
 8002736:	492e      	ldr	r1, [pc, #184]	; (80027f0 <HAL_PCD_EP_Open+0x6e4>)
 8002738:	430b      	orrs	r3, r1
 800273a:	b29b      	uxth	r3, r3
 800273c:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	001a      	movs	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	18d2      	adds	r2, r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0019      	movs	r1, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	18cb      	adds	r3, r1, r3
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	4922      	ldr	r1, [pc, #136]	; (80027e8 <HAL_PCD_EP_Open+0x6dc>)
 800275e:	400b      	ands	r3, r1
 8002760:	b29b      	uxth	r3, r3
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <HAL_PCD_EP_Open+0x6e0>)
 8002764:	430b      	orrs	r3, r1
 8002766:	b29b      	uxth	r3, r3
 8002768:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	001a      	movs	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	18d3      	adds	r3, r2, r3
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	4a20      	ldr	r2, [pc, #128]	; (80027fc <HAL_PCD_EP_Open+0x6f0>)
 800277c:	4013      	ands	r3, r2
 800277e:	b29c      	uxth	r4, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	001a      	movs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	18d3      	adds	r3, r2, r3
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_PCD_EP_Open+0x6ec>)
 8002790:	4322      	orrs	r2, r4
 8002792:	b292      	uxth	r2, r2
 8002794:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	001a      	movs	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	18d3      	adds	r3, r2, r3
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <HAL_PCD_EP_Open+0x6e8>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29c      	uxth	r4, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	001a      	movs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	18d3      	adds	r3, r2, r3
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <HAL_PCD_EP_Open+0x6ec>)
 80027bc:	4322      	orrs	r2, r4
 80027be:	b292      	uxth	r2, r2
 80027c0:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	23f4      	movs	r3, #244	; 0xf4
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2100      	movs	r1, #0
 80027ca:	54d1      	strb	r1, [r2, r3]
  return ret;
 80027cc:	2311      	movs	r3, #17
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b007      	add	sp, #28
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	00000e0f 	.word	0x00000e0f
 80027e0:	ffff8180 	.word	0xffff8180
 80027e4:	00000404 	.word	0x00000404
 80027e8:	00000f0f 	.word	0x00000f0f
 80027ec:	ffffc080 	.word	0xffffc080
 80027f0:	ffff80c0 	.word	0xffff80c0
 80027f4:	ffffbf8f 	.word	0xffffbf8f
 80027f8:	ffff8080 	.word	0xffff8080
 80027fc:	ffff8fbf 	.word	0xffff8fbf

08002800 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	000a      	movs	r2, r1
 800280a:	1cfb      	adds	r3, r7, #3
 800280c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800280e:	1cfb      	adds	r3, r7, #3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b25b      	sxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	da0c      	bge.n	8002832 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002818:	1cfb      	adds	r3, r7, #3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	227f      	movs	r2, #127	; 0x7f
 800281e:	401a      	ands	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	3328      	adds	r3, #40	; 0x28
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	18d3      	adds	r3, r2, r3
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e00c      	b.n	800284c <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002832:	1cfb      	adds	r3, r7, #3
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	227f      	movs	r2, #127	; 0x7f
 8002838:	401a      	ands	r2, r3
 800283a:	0013      	movs	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	3309      	adds	r3, #9
 8002844:	33ff      	adds	r3, #255	; 0xff
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	18d3      	adds	r3, r2, r3
 800284a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800284c:	1cfb      	adds	r3, r7, #3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	227f      	movs	r2, #127	; 0x7f
 8002852:	4013      	ands	r3, r2
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800285a:	1cfb      	adds	r3, r7, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b25b      	sxtb	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	09db      	lsrs	r3, r3, #7
 8002864:	b2db      	uxtb	r3, r3
 8002866:	001a      	movs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	23f4      	movs	r3, #244	; 0xf4
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_EP_Close+0x7c>
 8002878:	2302      	movs	r3, #2
 800287a:	e19a      	b.n	8002bb2 <HAL_PCD_EP_Close+0x3b2>
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	23f4      	movs	r3, #244	; 0xf4
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2101      	movs	r1, #1
 8002884:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	7a9b      	ldrb	r3, [r3, #10]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d000      	beq.n	8002890 <HAL_PCD_EP_Close+0x90>
 800288e:	e076      	b.n	800297e <HAL_PCD_EP_Close+0x17e>
  {
    if (ep->is_in)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d038      	beq.n	800290a <HAL_PCD_EP_Close+0x10a>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	001a      	movs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	001a      	movs	r2, r3
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	4013      	ands	r3, r2
 80028ae:	d015      	beq.n	80028dc <HAL_PCD_EP_Close+0xdc>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	001a      	movs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	18d2      	adds	r2, r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0019      	movs	r1, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	18cb      	adds	r3, r1, r3
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	49bb      	ldr	r1, [pc, #748]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 80028d0:	400b      	ands	r3, r1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	49ba      	ldr	r1, [pc, #744]	; (8002bc0 <HAL_PCD_EP_Close+0x3c0>)
 80028d6:	430b      	orrs	r3, r1
 80028d8:	b29b      	uxth	r3, r3
 80028da:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	001a      	movs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	18d3      	adds	r3, r2, r3
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	4ab5      	ldr	r2, [pc, #724]	; (8002bc4 <HAL_PCD_EP_Close+0x3c4>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	b29c      	uxth	r4, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	001a      	movs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	18d3      	adds	r3, r2, r3
 8002900:	4ab1      	ldr	r2, [pc, #708]	; (8002bc8 <HAL_PCD_EP_Close+0x3c8>)
 8002902:	4322      	orrs	r2, r4
 8002904:	b292      	uxth	r2, r2
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	e14d      	b.n	8002ba6 <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	001a      	movs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	18d3      	adds	r3, r2, r3
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	001a      	movs	r2, r3
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	4013      	ands	r3, r2
 8002922:	d015      	beq.n	8002950 <HAL_PCD_EP_Close+0x150>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	001a      	movs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	18d2      	adds	r2, r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0019      	movs	r1, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	18cb      	adds	r3, r1, r3
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	499e      	ldr	r1, [pc, #632]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 8002944:	400b      	ands	r3, r1
 8002946:	b29b      	uxth	r3, r3
 8002948:	49a0      	ldr	r1, [pc, #640]	; (8002bcc <HAL_PCD_EP_Close+0x3cc>)
 800294a:	430b      	orrs	r3, r1
 800294c:	b29b      	uxth	r3, r3
 800294e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	001a      	movs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	4a9b      	ldr	r2, [pc, #620]	; (8002bd0 <HAL_PCD_EP_Close+0x3d0>)
 8002962:	4013      	ands	r3, r2
 8002964:	b29c      	uxth	r4, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	001a      	movs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	18d3      	adds	r3, r2, r3
 8002974:	4a94      	ldr	r2, [pc, #592]	; (8002bc8 <HAL_PCD_EP_Close+0x3c8>)
 8002976:	4322      	orrs	r2, r4
 8002978:	b292      	uxth	r2, r2
 800297a:	801a      	strh	r2, [r3, #0]
 800297c:	e113      	b.n	8002ba6 <HAL_PCD_EP_Close+0x3a6>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d000      	beq.n	8002988 <HAL_PCD_EP_Close+0x188>
 8002986:	e087      	b.n	8002a98 <HAL_PCD_EP_Close+0x298>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	001a      	movs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	18d3      	adds	r3, r2, r3
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	001a      	movs	r2, r3
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	01db      	lsls	r3, r3, #7
 800299e:	4013      	ands	r3, r2
 80029a0:	d015      	beq.n	80029ce <HAL_PCD_EP_Close+0x1ce>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	001a      	movs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	18d2      	adds	r2, r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0019      	movs	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	18cb      	adds	r3, r1, r3
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	497e      	ldr	r1, [pc, #504]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 80029c2:	400b      	ands	r3, r1
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	4981      	ldr	r1, [pc, #516]	; (8002bcc <HAL_PCD_EP_Close+0x3cc>)
 80029c8:	430b      	orrs	r3, r1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	001a      	movs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	18d3      	adds	r3, r2, r3
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	001a      	movs	r2, r3
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	4013      	ands	r3, r2
 80029e4:	d015      	beq.n	8002a12 <HAL_PCD_EP_Close+0x212>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	001a      	movs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	18d2      	adds	r2, r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	0019      	movs	r1, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	18cb      	adds	r3, r1, r3
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	496d      	ldr	r1, [pc, #436]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 8002a06:	400b      	ands	r3, r1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	496d      	ldr	r1, [pc, #436]	; (8002bc0 <HAL_PCD_EP_Close+0x3c0>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	001a      	movs	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	18d2      	adds	r2, r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0019      	movs	r1, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	18cb      	adds	r3, r1, r3
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	4962      	ldr	r1, [pc, #392]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 8002a32:	400b      	ands	r3, r1
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4962      	ldr	r1, [pc, #392]	; (8002bc0 <HAL_PCD_EP_Close+0x3c0>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	001a      	movs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	18d3      	adds	r3, r2, r3
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	4a60      	ldr	r2, [pc, #384]	; (8002bd0 <HAL_PCD_EP_Close+0x3d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	b29c      	uxth	r4, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	001a      	movs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	18d3      	adds	r3, r2, r3
 8002a62:	4a59      	ldr	r2, [pc, #356]	; (8002bc8 <HAL_PCD_EP_Close+0x3c8>)
 8002a64:	4322      	orrs	r2, r4
 8002a66:	b292      	uxth	r2, r2
 8002a68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	001a      	movs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	4a52      	ldr	r2, [pc, #328]	; (8002bc4 <HAL_PCD_EP_Close+0x3c4>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29c      	uxth	r4, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	001a      	movs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_PCD_EP_Close+0x3c8>)
 8002a90:	4322      	orrs	r2, r4
 8002a92:	b292      	uxth	r2, r2
 8002a94:	801a      	strh	r2, [r3, #0]
 8002a96:	e086      	b.n	8002ba6 <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	18d3      	adds	r3, r2, r3
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	01db      	lsls	r3, r3, #7
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d015      	beq.n	8002ade <HAL_PCD_EP_Close+0x2de>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	18d2      	adds	r2, r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	18cb      	adds	r3, r1, r3
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	493a      	ldr	r1, [pc, #232]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	493d      	ldr	r1, [pc, #244]	; (8002bcc <HAL_PCD_EP_Close+0x3cc>)
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	001a      	movs	r2, r3
 8002af0:	2340      	movs	r3, #64	; 0x40
 8002af2:	4013      	ands	r3, r2
 8002af4:	d015      	beq.n	8002b22 <HAL_PCD_EP_Close+0x322>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	001a      	movs	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	18d2      	adds	r2, r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0019      	movs	r1, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	18cb      	adds	r3, r1, r3
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	4929      	ldr	r1, [pc, #164]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 8002b16:	400b      	ands	r3, r1
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4929      	ldr	r1, [pc, #164]	; (8002bc0 <HAL_PCD_EP_Close+0x3c0>)
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	001a      	movs	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	18d2      	adds	r2, r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0019      	movs	r1, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	18cb      	adds	r3, r1, r3
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	491e      	ldr	r1, [pc, #120]	; (8002bbc <HAL_PCD_EP_Close+0x3bc>)
 8002b42:	400b      	ands	r3, r1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4921      	ldr	r1, [pc, #132]	; (8002bcc <HAL_PCD_EP_Close+0x3cc>)
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	001a      	movs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	18d3      	adds	r3, r2, r3
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_PCD_EP_Close+0x3c4>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29c      	uxth	r4, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	001a      	movs	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <HAL_PCD_EP_Close+0x3c8>)
 8002b74:	4322      	orrs	r2, r4
 8002b76:	b292      	uxth	r2, r2
 8002b78:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	001a      	movs	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	18d3      	adds	r3, r2, r3
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <HAL_PCD_EP_Close+0x3d0>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b29c      	uxth	r4, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	001a      	movs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	18d3      	adds	r3, r2, r3
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_PCD_EP_Close+0x3c8>)
 8002ba0:	4322      	orrs	r2, r4
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	23f4      	movs	r3, #244	; 0xf4
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2100      	movs	r1, #0
 8002bae:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b005      	add	sp, #20
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	00000f0f 	.word	0x00000f0f
 8002bc0:	ffff80c0 	.word	0xffff80c0
 8002bc4:	ffff8fbf 	.word	0xffff8fbf
 8002bc8:	ffff8080 	.word	0xffff8080
 8002bcc:	ffffc080 	.word	0xffffc080
 8002bd0:	ffffbf8f 	.word	0xffffbf8f

08002bd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08b      	sub	sp, #44	; 0x2c
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	230b      	movs	r3, #11
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	1c0a      	adds	r2, r1, #0
 8002be6:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002be8:	230b      	movs	r3, #11
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	227f      	movs	r2, #127	; 0x7f
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	0013      	movs	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	3309      	adds	r3, #9
 8002bfc:	33ff      	adds	r3, #255	; 0xff
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	18d3      	adds	r3, r2, r3
 8002c02:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002c1c:	230b      	movs	r3, #11
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	227f      	movs	r2, #127	; 0x7f
 8002c24:	4013      	ands	r3, r2
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d909      	bls.n	8002c4c <HAL_PCD_EP_Receive+0x78>
  {
    len=ep->maxpacket;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	1ad2      	subs	r2, r2, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	615a      	str	r2, [r3, #20]
 8002c4a:	e005      	b.n	8002c58 <HAL_PCD_EP_Receive+0x84>
  }
  else
  {
    len=ep->xfer_len;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	7a9b      	ldrb	r3, [r3, #10]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d147      	bne.n	8002cf0 <HAL_PCD_EP_Receive+0x11c>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2250      	movs	r2, #80	; 0x50
 8002c66:	5a9b      	ldrh	r3, [r3, r2]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	18d3      	adds	r3, r2, r3
 8002c74:	001a      	movs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	18d3      	adds	r3, r2, r3
 8002c7c:	4a92      	ldr	r2, [pc, #584]	; (8002ec8 <HAL_PCD_EP_Receive+0x2f4>)
 8002c7e:	4694      	mov	ip, r2
 8002c80:	4463      	add	r3, ip
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b3e      	cmp	r3, #62	; 0x3e
 8002c88:	d91a      	bls.n	8002cc0 <HAL_PCD_EP_Receive+0xec>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	095a      	lsrs	r2, r3, #5
 8002c8e:	2326      	movs	r3, #38	; 0x26
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	221f      	movs	r2, #31
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d106      	bne.n	8002caa <HAL_PCD_EP_Receive+0xd6>
 8002c9c:	2326      	movs	r3, #38	; 0x26
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	2326      	movs	r3, #38	; 0x26
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	2326      	movs	r3, #38	; 0x26
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	029b      	lsls	r3, r3, #10
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4a85      	ldr	r2, [pc, #532]	; (8002ecc <HAL_PCD_EP_Receive+0x2f8>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	e0df      	b.n	8002e80 <HAL_PCD_EP_Receive+0x2ac>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	085a      	lsrs	r2, r3, #1
 8002cc4:	2326      	movs	r3, #38	; 0x26
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d006      	beq.n	8002ce0 <HAL_PCD_EP_Receive+0x10c>
 8002cd2:	2326      	movs	r3, #38	; 0x26
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	2326      	movs	r3, #38	; 0x26
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	3201      	adds	r2, #1
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	2326      	movs	r3, #38	; 0x26
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	e0c7      	b.n	8002e80 <HAL_PCD_EP_Receive+0x2ac>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d147      	bne.n	8002d88 <HAL_PCD_EP_Receive+0x1b4>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2250      	movs	r2, #80	; 0x50
 8002cfe:	5a9b      	ldrh	r3, [r3, r2]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	001a      	movs	r2, r3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	18d3      	adds	r3, r2, r3
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	18d3      	adds	r3, r2, r3
 8002d14:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <HAL_PCD_EP_Receive+0x2fc>)
 8002d16:	4694      	mov	ip, r2
 8002d18:	4463      	add	r3, ip
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d20:	d91a      	bls.n	8002d58 <HAL_PCD_EP_Receive+0x184>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	095a      	lsrs	r2, r3, #5
 8002d26:	2324      	movs	r3, #36	; 0x24
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	221f      	movs	r2, #31
 8002d30:	4013      	ands	r3, r2
 8002d32:	d106      	bne.n	8002d42 <HAL_PCD_EP_Receive+0x16e>
 8002d34:	2324      	movs	r3, #36	; 0x24
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	2324      	movs	r3, #36	; 0x24
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	3a01      	subs	r2, #1
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	2324      	movs	r3, #36	; 0x24
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	029b      	lsls	r3, r3, #10
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4a5f      	ldr	r2, [pc, #380]	; (8002ecc <HAL_PCD_EP_Receive+0x2f8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	e02f      	b.n	8002db8 <HAL_PCD_EP_Receive+0x1e4>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	085a      	lsrs	r2, r3, #1
 8002d5c:	2324      	movs	r3, #36	; 0x24
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	4013      	ands	r3, r2
 8002d68:	d006      	beq.n	8002d78 <HAL_PCD_EP_Receive+0x1a4>
 8002d6a:	2324      	movs	r3, #36	; 0x24
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	2324      	movs	r3, #36	; 0x24
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	3201      	adds	r2, #1
 8002d76:	801a      	strh	r2, [r3, #0]
 8002d78:	2324      	movs	r3, #36	; 0x24
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	e017      	b.n	8002db8 <HAL_PCD_EP_Receive+0x1e4>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d113      	bne.n	8002db8 <HAL_PCD_EP_Receive+0x1e4>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2250      	movs	r2, #80	; 0x50
 8002d96:	5a9b      	ldrh	r3, [r3, r2]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	18d3      	adds	r3, r2, r3
 8002da4:	001a      	movs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	4a48      	ldr	r2, [pc, #288]	; (8002ed0 <HAL_PCD_EP_Receive+0x2fc>)
 8002dae:	4694      	mov	ip, r2
 8002db0:	4463      	add	r3, ip
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	b292      	uxth	r2, r2
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	785b      	ldrb	r3, [r3, #1]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d147      	bne.n	8002e50 <HAL_PCD_EP_Receive+0x27c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2250      	movs	r2, #80	; 0x50
 8002dc6:	5a9b      	ldrh	r3, [r3, r2]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	001a      	movs	r2, r3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	18d3      	adds	r3, r2, r3
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	18d3      	adds	r3, r2, r3
 8002ddc:	4a3a      	ldr	r2, [pc, #232]	; (8002ec8 <HAL_PCD_EP_Receive+0x2f4>)
 8002dde:	4694      	mov	ip, r2
 8002de0:	4463      	add	r3, ip
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b3e      	cmp	r3, #62	; 0x3e
 8002de8:	d91a      	bls.n	8002e20 <HAL_PCD_EP_Receive+0x24c>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	095a      	lsrs	r2, r3, #5
 8002dee:	2322      	movs	r3, #34	; 0x22
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	221f      	movs	r2, #31
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d106      	bne.n	8002e0a <HAL_PCD_EP_Receive+0x236>
 8002dfc:	2322      	movs	r3, #34	; 0x22
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	881a      	ldrh	r2, [r3, #0]
 8002e02:	2322      	movs	r3, #34	; 0x22
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	3a01      	subs	r2, #1
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	2322      	movs	r3, #34	; 0x22
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <HAL_PCD_EP_Receive+0x2f8>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	e02f      	b.n	8002e80 <HAL_PCD_EP_Receive+0x2ac>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	085a      	lsrs	r2, r3, #1
 8002e24:	2322      	movs	r3, #34	; 0x22
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d006      	beq.n	8002e40 <HAL_PCD_EP_Receive+0x26c>
 8002e32:	2322      	movs	r3, #34	; 0x22
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	2322      	movs	r3, #34	; 0x22
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	3201      	adds	r2, #1
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	2322      	movs	r3, #34	; 0x22
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e017      	b.n	8002e80 <HAL_PCD_EP_Receive+0x2ac>
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d113      	bne.n	8002e80 <HAL_PCD_EP_Receive+0x2ac>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2250      	movs	r2, #80	; 0x50
 8002e5e:	5a9b      	ldrh	r3, [r3, r2]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	001a      	movs	r2, r3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	18d3      	adds	r3, r2, r3
 8002e74:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_PCD_EP_Receive+0x2f4>)
 8002e76:	4694      	mov	ip, r2
 8002e78:	4463      	add	r3, ip
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	001a      	movs	r2, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	18d3      	adds	r3, r2, r3
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <HAL_PCD_EP_Receive+0x300>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29c      	uxth	r4, r3
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	015b      	lsls	r3, r3, #5
 8002e9a:	4063      	eors	r3, r4
 8002e9c:	b29c      	uxth	r4, r3
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	4063      	eors	r3, r4
 8002ea4:	b29c      	uxth	r4, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	001a      	movs	r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <HAL_PCD_EP_Receive+0x304>)
 8002eb6:	4322      	orrs	r2, r4
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b00b      	add	sp, #44	; 0x2c
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	00000406 	.word	0x00000406
 8002ecc:	ffff8000 	.word	0xffff8000
 8002ed0:	00000402 	.word	0x00000402
 8002ed4:	ffffbf8f 	.word	0xffffbf8f
 8002ed8:	ffff8080 	.word	0xffff8080

08002edc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	1cfb      	adds	r3, r7, #3
 8002ee8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8002eea:	1cfb      	adds	r3, r7, #3
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	227f      	movs	r2, #127	; 0x7f
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	2390      	movs	r3, #144	; 0x90
 8002ef6:	0059      	lsls	r1, r3, #1
 8002ef8:	0013      	movs	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	18c3      	adds	r3, r0, r3
 8002f02:	185b      	adds	r3, r3, r1
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08b      	sub	sp, #44	; 0x2c
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	230b      	movs	r3, #11
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	1c0a      	adds	r2, r1, #0
 8002f22:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8002f24:	2326      	movs	r3, #38	; 0x26
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002f2c:	230b      	movs	r3, #11
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	227f      	movs	r2, #127	; 0x7f
 8002f34:	401a      	ands	r2, r3
 8002f36:	0013      	movs	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	3328      	adds	r3, #40	; 0x28
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	18d3      	adds	r3, r2, r3
 8002f44:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002f5e:	230b      	movs	r3, #11
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	227f      	movs	r2, #127	; 0x7f
 8002f66:	4013      	ands	r3, r2
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d909      	bls.n	8002f8e <HAL_PCD_EP_Transmit+0x7e>
  {
    len=ep->maxpacket;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	615a      	str	r2, [r3, #20]
 8002f8c:	e005      	b.n	8002f9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {  
    len=ep->xfer_len;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2200      	movs	r2, #0
 8002f98:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	7a9b      	ldrb	r3, [r3, #10]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11e      	bne.n	8002fe0 <HAL_PCD_EP_Transmit+0xd0>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	6919      	ldr	r1, [r3, #16]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	889a      	ldrh	r2, [r3, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f000 faf7 	bl	80035a4 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2250      	movs	r2, #80	; 0x50
 8002fbc:	5a9b      	ldrh	r3, [r3, r2]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	18d3      	adds	r3, r2, r3
 8002fca:	001a      	movs	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	18d3      	adds	r3, r2, r3
 8002fd2:	4aa4      	ldr	r2, [pc, #656]	; (8003264 <HAL_PCD_EP_Transmit+0x354>)
 8002fd4:	4694      	mov	ip, r2
 8002fd6:	4463      	add	r3, ip
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	e11f      	b.n	8003220 <HAL_PCD_EP_Transmit+0x310>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	2340      	movs	r3, #64	; 0x40
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d069      	beq.n	80030cc <HAL_PCD_EP_Transmit+0x1bc>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d147      	bne.n	8003090 <HAL_PCD_EP_Transmit+0x180>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2250      	movs	r2, #80	; 0x50
 8003006:	5a9b      	ldrh	r3, [r3, r2]
 8003008:	b29b      	uxth	r3, r3
 800300a:	001a      	movs	r2, r3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	001a      	movs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	18d3      	adds	r3, r2, r3
 800301c:	4a92      	ldr	r2, [pc, #584]	; (8003268 <HAL_PCD_EP_Transmit+0x358>)
 800301e:	4694      	mov	ip, r2
 8003020:	4463      	add	r3, ip
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b3e      	cmp	r3, #62	; 0x3e
 8003028:	d91a      	bls.n	8003060 <HAL_PCD_EP_Transmit+0x150>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	095a      	lsrs	r2, r3, #5
 800302e:	2324      	movs	r3, #36	; 0x24
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	801a      	strh	r2, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	221f      	movs	r2, #31
 8003038:	4013      	ands	r3, r2
 800303a:	d106      	bne.n	800304a <HAL_PCD_EP_Transmit+0x13a>
 800303c:	2324      	movs	r3, #36	; 0x24
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	2324      	movs	r3, #36	; 0x24
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	3a01      	subs	r2, #1
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	2324      	movs	r3, #36	; 0x24
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	029b      	lsls	r3, r3, #10
 8003052:	b29b      	uxth	r3, r3
 8003054:	4a85      	ldr	r2, [pc, #532]	; (800326c <HAL_PCD_EP_Transmit+0x35c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	b29a      	uxth	r2, r3
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	e02f      	b.n	80030c0 <HAL_PCD_EP_Transmit+0x1b0>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	085a      	lsrs	r2, r3, #1
 8003064:	2324      	movs	r3, #36	; 0x24
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	801a      	strh	r2, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d006      	beq.n	8003080 <HAL_PCD_EP_Transmit+0x170>
 8003072:	2324      	movs	r3, #36	; 0x24
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	2324      	movs	r3, #36	; 0x24
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	3201      	adds	r2, #1
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	2324      	movs	r3, #36	; 0x24
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	029b      	lsls	r3, r3, #10
 8003088:	b29a      	uxth	r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	e017      	b.n	80030c0 <HAL_PCD_EP_Transmit+0x1b0>
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d113      	bne.n	80030c0 <HAL_PCD_EP_Transmit+0x1b0>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2250      	movs	r2, #80	; 0x50
 800309e:	5a9b      	ldrh	r3, [r3, r2]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	001a      	movs	r2, r3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	18d3      	adds	r3, r2, r3
 80030ac:	001a      	movs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	18d3      	adds	r3, r2, r3
 80030b4:	4a6c      	ldr	r2, [pc, #432]	; (8003268 <HAL_PCD_EP_Transmit+0x358>)
 80030b6:	4694      	mov	ip, r2
 80030b8:	4463      	add	r3, ip
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	b292      	uxth	r2, r2
 80030be:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 80030c0:	2326      	movs	r3, #38	; 0x26
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	8912      	ldrh	r2, [r2, #8]
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e068      	b.n	800319e <HAL_PCD_EP_Transmit+0x28e>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d147      	bne.n	8003164 <HAL_PCD_EP_Transmit+0x254>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2250      	movs	r2, #80	; 0x50
 80030da:	5a9b      	ldrh	r3, [r3, r2]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	001a      	movs	r2, r3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	18d3      	adds	r3, r2, r3
 80030e8:	001a      	movs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	18d3      	adds	r3, r2, r3
 80030f0:	4a5c      	ldr	r2, [pc, #368]	; (8003264 <HAL_PCD_EP_Transmit+0x354>)
 80030f2:	4694      	mov	ip, r2
 80030f4:	4463      	add	r3, ip
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b3e      	cmp	r3, #62	; 0x3e
 80030fc:	d91a      	bls.n	8003134 <HAL_PCD_EP_Transmit+0x224>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	095a      	lsrs	r2, r3, #5
 8003102:	2322      	movs	r3, #34	; 0x22
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	801a      	strh	r2, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	221f      	movs	r2, #31
 800310c:	4013      	ands	r3, r2
 800310e:	d106      	bne.n	800311e <HAL_PCD_EP_Transmit+0x20e>
 8003110:	2322      	movs	r3, #34	; 0x22
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	881a      	ldrh	r2, [r3, #0]
 8003116:	2322      	movs	r3, #34	; 0x22
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	3a01      	subs	r2, #1
 800311c:	801a      	strh	r2, [r3, #0]
 800311e:	2322      	movs	r3, #34	; 0x22
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	029b      	lsls	r3, r3, #10
 8003126:	b29b      	uxth	r3, r3
 8003128:	4a50      	ldr	r2, [pc, #320]	; (800326c <HAL_PCD_EP_Transmit+0x35c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	b29a      	uxth	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	e02f      	b.n	8003194 <HAL_PCD_EP_Transmit+0x284>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	085a      	lsrs	r2, r3, #1
 8003138:	2322      	movs	r3, #34	; 0x22
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	4013      	ands	r3, r2
 8003144:	d006      	beq.n	8003154 <HAL_PCD_EP_Transmit+0x244>
 8003146:	2322      	movs	r3, #34	; 0x22
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	2322      	movs	r3, #34	; 0x22
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	3201      	adds	r2, #1
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	2322      	movs	r3, #34	; 0x22
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	029b      	lsls	r3, r3, #10
 800315c:	b29a      	uxth	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	801a      	strh	r2, [r3, #0]
 8003162:	e017      	b.n	8003194 <HAL_PCD_EP_Transmit+0x284>
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d113      	bne.n	8003194 <HAL_PCD_EP_Transmit+0x284>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2250      	movs	r2, #80	; 0x50
 8003172:	5a9b      	ldrh	r3, [r3, r2]
 8003174:	b29b      	uxth	r3, r3
 8003176:	001a      	movs	r2, r3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	18d3      	adds	r3, r2, r3
 8003180:	001a      	movs	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	18d3      	adds	r3, r2, r3
 8003188:	4a36      	ldr	r2, [pc, #216]	; (8003264 <HAL_PCD_EP_Transmit+0x354>)
 800318a:	4694      	mov	ip, r2
 800318c:	4463      	add	r3, ip
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	b292      	uxth	r2, r2
 8003192:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 8003194:	2326      	movs	r3, #38	; 0x26
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	88d2      	ldrh	r2, [r2, #6]
 800319c:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	6919      	ldr	r1, [r3, #16]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b29c      	uxth	r4, r3
 80031aa:	2326      	movs	r3, #38	; 0x26
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	0023      	movs	r3, r4
 80031b2:	f000 f9f7 	bl	80035a4 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_PCD_EP_Transmit+0x2dc>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	001a      	movs	r2, r3
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	18d2      	adds	r2, r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0019      	movs	r1, r3
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	18cb      	adds	r3, r1, r3
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	4924      	ldr	r1, [pc, #144]	; (8003270 <HAL_PCD_EP_Transmit+0x360>)
 80031de:	400b      	ands	r3, r1
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4924      	ldr	r1, [pc, #144]	; (8003274 <HAL_PCD_EP_Transmit+0x364>)
 80031e4:	430b      	orrs	r3, r1
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	8013      	strh	r3, [r2, #0]
 80031ea:	e019      	b.n	8003220 <HAL_PCD_EP_Transmit+0x310>
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d115      	bne.n	8003220 <HAL_PCD_EP_Transmit+0x310>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	18d2      	adds	r2, r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0019      	movs	r1, r3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	18cb      	adds	r3, r1, r3
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	4917      	ldr	r1, [pc, #92]	; (8003270 <HAL_PCD_EP_Transmit+0x360>)
 8003214:	400b      	ands	r3, r1
 8003216:	b29b      	uxth	r3, r3
 8003218:	4917      	ldr	r1, [pc, #92]	; (8003278 <HAL_PCD_EP_Transmit+0x368>)
 800321a:	430b      	orrs	r3, r1
 800321c:	b29b      	uxth	r3, r3
 800321e:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	001a      	movs	r2, r3
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <HAL_PCD_EP_Transmit+0x36c>)
 8003232:	4013      	ands	r3, r2
 8003234:	b29c      	uxth	r4, r3
 8003236:	2310      	movs	r3, #16
 8003238:	4063      	eors	r3, r4
 800323a:	b29c      	uxth	r4, r3
 800323c:	2320      	movs	r3, #32
 800323e:	4063      	eors	r3, r4
 8003240:	b29c      	uxth	r4, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	001a      	movs	r2, r3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	18d3      	adds	r3, r2, r3
 8003250:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <HAL_PCD_EP_Transmit+0x370>)
 8003252:	4322      	orrs	r2, r4
 8003254:	b292      	uxth	r2, r2
 8003256:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b00b      	add	sp, #44	; 0x2c
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	00000402 	.word	0x00000402
 8003268:	00000406 	.word	0x00000406
 800326c:	ffff8000 	.word	0xffff8000
 8003270:	00000f0f 	.word	0x00000f0f
 8003274:	ffff80c0 	.word	0xffff80c0
 8003278:	ffffc080 	.word	0xffffc080
 800327c:	ffff8fbf 	.word	0xffff8fbf
 8003280:	ffff8080 	.word	0xffff8080

08003284 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	000a      	movs	r2, r1
 800328e:	1cfb      	adds	r3, r7, #3
 8003290:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	23f4      	movs	r3, #244	; 0xf4
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	5cd3      	ldrb	r3, [r2, r3]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_PCD_EP_SetStall+0x1e>
 800329e:	2302      	movs	r3, #2
 80032a0:	e096      	b.n	80033d0 <HAL_PCD_EP_SetStall+0x14c>
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	23f4      	movs	r3, #244	; 0xf4
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2101      	movs	r1, #1
 80032aa:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 80032ac:	1cfb      	adds	r3, r7, #3
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da0c      	bge.n	80032d0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80032b6:	1cfb      	adds	r3, r7, #3
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	227f      	movs	r2, #127	; 0x7f
 80032bc:	401a      	ands	r2, r3
 80032be:	0013      	movs	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	3328      	adds	r3, #40	; 0x28
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	18d3      	adds	r3, r2, r3
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e00a      	b.n	80032e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032d0:	1cfb      	adds	r3, r7, #3
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	0013      	movs	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3309      	adds	r3, #9
 80032de:	33ff      	adds	r3, #255	; 0xff
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	18d3      	adds	r3, r2, r3
 80032e4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80032ec:	1cfb      	adds	r3, r7, #3
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	227f      	movs	r2, #127	; 0x7f
 80032f2:	4013      	ands	r3, r2
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80032fa:	1cfb      	adds	r3, r7, #3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	09db      	lsrs	r3, r3, #7
 8003304:	b2db      	uxtb	r3, r3
 8003306:	001a      	movs	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11f      	bne.n	8003354 <HAL_PCD_EP_SetStall+0xd0>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	001a      	movs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	001a      	movs	r2, r3
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_PCD_EP_SetStall+0x154>)
 8003328:	401a      	ands	r2, r3
 800332a:	0014      	movs	r4, r2
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	015b      	lsls	r3, r3, #5
 8003330:	4063      	eors	r3, r4
 8003332:	001c      	movs	r4, r3
 8003334:	2310      	movs	r3, #16
 8003336:	4063      	eors	r3, r4
 8003338:	001c      	movs	r4, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	001a      	movs	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	18d3      	adds	r3, r2, r3
 8003348:	b2a2      	uxth	r2, r4
 800334a:	4924      	ldr	r1, [pc, #144]	; (80033dc <HAL_PCD_EP_SetStall+0x158>)
 800334c:	430a      	orrs	r2, r1
 800334e:	b292      	uxth	r2, r2
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	e037      	b.n	80033c4 <HAL_PCD_EP_SetStall+0x140>
  }
  else
  {
    if (ep->is_in)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d019      	beq.n	8003390 <HAL_PCD_EP_SetStall+0x10c>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	001a      	movs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	18d3      	adds	r3, r2, r3
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_PCD_EP_SetStall+0x15c>)
 800336e:	4013      	ands	r3, r2
 8003370:	b29c      	uxth	r4, r3
 8003372:	2310      	movs	r3, #16
 8003374:	4063      	eors	r3, r4
 8003376:	b29c      	uxth	r4, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	001a      	movs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_PCD_EP_SetStall+0x158>)
 8003388:	4322      	orrs	r2, r4
 800338a:	b292      	uxth	r2, r2
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e019      	b.n	80033c4 <HAL_PCD_EP_SetStall+0x140>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	001a      	movs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	18d3      	adds	r3, r2, r3
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_PCD_EP_SetStall+0x160>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	b29c      	uxth	r4, r3
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	015b      	lsls	r3, r3, #5
 80033aa:	4063      	eors	r3, r4
 80033ac:	b29c      	uxth	r4, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	001a      	movs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	18d3      	adds	r3, r2, r3
 80033bc:	4a07      	ldr	r2, [pc, #28]	; (80033dc <HAL_PCD_EP_SetStall+0x158>)
 80033be:	4322      	orrs	r2, r4
 80033c0:	b292      	uxth	r2, r2
 80033c2:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	23f4      	movs	r3, #244	; 0xf4
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2100      	movs	r1, #0
 80033cc:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b005      	add	sp, #20
 80033d6:	bd90      	pop	{r4, r7, pc}
 80033d8:	0000bfbf 	.word	0x0000bfbf
 80033dc:	ffff8080 	.word	0xffff8080
 80033e0:	ffff8fbf 	.word	0xffff8fbf
 80033e4:	ffffbf8f 	.word	0xffffbf8f

080033e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	000a      	movs	r2, r1
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 80033f6:	1cfb      	adds	r3, r7, #3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0c      	bge.n	800341a <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003400:	1cfb      	adds	r3, r7, #3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	227f      	movs	r2, #127	; 0x7f
 8003406:	401a      	ands	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	3328      	adds	r3, #40	; 0x28
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e00a      	b.n	8003430 <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800341a:	1cfb      	adds	r3, r7, #3
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	0013      	movs	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3309      	adds	r3, #9
 8003428:	33ff      	adds	r3, #255	; 0xff
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8003436:	1cfb      	adds	r3, r7, #3
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	227f      	movs	r2, #127	; 0x7f
 800343c:	4013      	ands	r3, r2
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8003444:	1cfb      	adds	r3, r7, #3
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b25b      	sxtb	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	09db      	lsrs	r3, r3, #7
 800344e:	b2db      	uxtb	r3, r3
 8003450:	001a      	movs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	23f4      	movs	r3, #244	; 0xf4
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_PCD_EP_ClrStall+0x7e>
 8003462:	2302      	movs	r3, #2
 8003464:	e08e      	b.n	8003584 <HAL_PCD_EP_ClrStall+0x19c>
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	23f4      	movs	r3, #244	; 0xf4
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2101      	movs	r1, #1
 800346e:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	785b      	ldrb	r3, [r3, #1]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03e      	beq.n	80034f6 <HAL_PCD_EP_ClrStall+0x10e>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	001a      	movs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	001a      	movs	r2, r3
 800348a:	2340      	movs	r3, #64	; 0x40
 800348c:	4013      	ands	r3, r2
 800348e:	d015      	beq.n	80034bc <HAL_PCD_EP_ClrStall+0xd4>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	001a      	movs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	18d2      	adds	r2, r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0019      	movs	r1, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	18cb      	adds	r3, r1, r3
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	4937      	ldr	r1, [pc, #220]	; (800358c <HAL_PCD_EP_ClrStall+0x1a4>)
 80034b0:	400b      	ands	r3, r1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4936      	ldr	r1, [pc, #216]	; (8003590 <HAL_PCD_EP_ClrStall+0x1a8>)
 80034b6:	430b      	orrs	r3, r1
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	001a      	movs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	18d3      	adds	r3, r2, r3
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	4a31      	ldr	r2, [pc, #196]	; (8003594 <HAL_PCD_EP_ClrStall+0x1ac>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	b29c      	uxth	r4, r3
 80034d2:	2310      	movs	r3, #16
 80034d4:	4063      	eors	r3, r4
 80034d6:	b29c      	uxth	r4, r3
 80034d8:	2320      	movs	r3, #32
 80034da:	4063      	eors	r3, r4
 80034dc:	b29c      	uxth	r4, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	001a      	movs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	18d3      	adds	r3, r2, r3
 80034ec:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_PCD_EP_ClrStall+0x1b0>)
 80034ee:	4322      	orrs	r2, r4
 80034f0:	b292      	uxth	r2, r2
 80034f2:	801a      	strh	r2, [r3, #0]
 80034f4:	e040      	b.n	8003578 <HAL_PCD_EP_ClrStall+0x190>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	001a      	movs	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	18d3      	adds	r3, r2, r3
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	001a      	movs	r2, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	01db      	lsls	r3, r3, #7
 800350c:	4013      	ands	r3, r2
 800350e:	d015      	beq.n	800353c <HAL_PCD_EP_ClrStall+0x154>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	001a      	movs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	18d2      	adds	r2, r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0019      	movs	r1, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	18cb      	adds	r3, r1, r3
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	4917      	ldr	r1, [pc, #92]	; (800358c <HAL_PCD_EP_ClrStall+0x1a4>)
 8003530:	400b      	ands	r3, r1
 8003532:	b29b      	uxth	r3, r3
 8003534:	4919      	ldr	r1, [pc, #100]	; (800359c <HAL_PCD_EP_ClrStall+0x1b4>)
 8003536:	430b      	orrs	r3, r1
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	001a      	movs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	18d3      	adds	r3, r2, r3
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <HAL_PCD_EP_ClrStall+0x1b8>)
 800354e:	4013      	ands	r3, r2
 8003550:	b29c      	uxth	r4, r3
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	015b      	lsls	r3, r3, #5
 8003556:	4063      	eors	r3, r4
 8003558:	b29c      	uxth	r4, r3
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	4063      	eors	r3, r4
 8003560:	b29c      	uxth	r4, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	001a      	movs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	18d3      	adds	r3, r2, r3
 8003570:	4a09      	ldr	r2, [pc, #36]	; (8003598 <HAL_PCD_EP_ClrStall+0x1b0>)
 8003572:	4322      	orrs	r2, r4
 8003574:	b292      	uxth	r2, r2
 8003576:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	23f4      	movs	r3, #244	; 0xf4
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2100      	movs	r1, #0
 8003580:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b005      	add	sp, #20
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	00000f0f 	.word	0x00000f0f
 8003590:	ffff80c0 	.word	0xffff80c0
 8003594:	ffff8fbf 	.word	0xffff8fbf
 8003598:	ffff8080 	.word	0xffff8080
 800359c:	ffffc080 	.word	0xffffc080
 80035a0:	ffffbf8f 	.word	0xffffbf8f

080035a4 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	0019      	movs	r1, r3
 80035b0:	1dbb      	adds	r3, r7, #6
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	1c0a      	adds	r2, r1, #0
 80035b8:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80035c4:	1dbb      	adds	r3, r7, #6
 80035c6:	881a      	ldrh	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	18d3      	adds	r3, r2, r3
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	00d2      	lsls	r2, r2, #3
 80035d0:	4694      	mov	ip, r2
 80035d2:	4463      	add	r3, ip
 80035d4:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e020      	b.n	800361e <PCD_WritePMA+0x7a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	2312      	movs	r3, #18
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3301      	adds	r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	b299      	uxth	r1, r3
 80035f6:	2310      	movs	r3, #16
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2212      	movs	r2, #18
 80035fc:	18ba      	adds	r2, r7, r2
 80035fe:	8812      	ldrh	r2, [r2, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	61ba      	str	r2, [r7, #24]
 800360a:	2210      	movs	r2, #16
 800360c:	18ba      	adds	r2, r7, r2
 800360e:	8812      	ldrh	r2, [r2, #0]
 8003610:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3301      	adds	r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3b01      	subs	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1db      	bne.n	80035dc <PCD_WritePMA+0x38>
  }
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b008      	add	sp, #32
 800362a:	bd80      	pop	{r7, pc}

0800362c <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	0019      	movs	r1, r3
 8003638:	1dbb      	adds	r3, r7, #6
 800363a:	801a      	strh	r2, [r3, #0]
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	1c0a      	adds	r2, r1, #0
 8003640:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	b29b      	uxth	r3, r3
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800364c:	1dbb      	adds	r3, r7, #6
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	18d3      	adds	r3, r2, r3
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	00d2      	lsls	r2, r2, #3
 8003658:	4694      	mov	ip, r2
 800365a:	4463      	add	r3, ip
 800365c:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e014      	b.n	800368e <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	61ba      	str	r2, [r7, #24]
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	60ba      	str	r2, [r7, #8]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	60ba      	str	r2, [r7, #8]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	0a12      	lsrs	r2, r2, #8
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3b01      	subs	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e7      	bne.n	8003664 <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	61ba      	str	r2, [r7, #24]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	60ba      	str	r2, [r7, #8]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]
  }
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b008      	add	sp, #32
 80036be:	bd80      	pop	{r7, pc}

080036c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 80036c8:	231e      	movs	r3, #30
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2200      	movs	r2, #0
 80036ce:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 80036d0:	230c      	movs	r3, #12
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	2200      	movs	r2, #0
 80036d6:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80036d8:	e34b      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80036da:	230e      	movs	r3, #14
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	231b      	movs	r3, #27
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	210f      	movs	r1, #15
 80036ea:	400a      	ands	r2, r1
 80036ec:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 80036ee:	231b      	movs	r3, #27
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d000      	beq.n	80036fa <PCD_EP_ISR_Handler+0x3a>
 80036f8:	e139      	b.n	800396e <PCD_EP_ISR_Handler+0x2ae>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80036fa:	230e      	movs	r3, #14
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	001a      	movs	r2, r3
 8003704:	2310      	movs	r3, #16
 8003706:	4013      	ands	r3, r2
 8003708:	d14c      	bne.n	80037a4 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	4ac7      	ldr	r2, [pc, #796]	; (8003a34 <PCD_EP_ISR_Handler+0x374>)
 8003718:	4013      	ands	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	800b      	strh	r3, [r1, #0]
        ep = &hpcd->IN_ep[0];
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3328      	adds	r3, #40	; 0x28
 8003722:	617b      	str	r3, [r7, #20]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2250      	movs	r2, #80	; 0x50
 800372a:	5a9b      	ldrh	r3, [r3, r2]
 800372c:	b29b      	uxth	r3, r3
 800372e:	001a      	movs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	18d3      	adds	r3, r2, r3
 8003738:	001a      	movs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	18d3      	adds	r3, r2, r3
 8003740:	4abd      	ldr	r2, [pc, #756]	; (8003a38 <PCD_EP_ISR_Handler+0x378>)
 8003742:	4694      	mov	ip, r2
 8003744:	4463      	add	r3, ip
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	059b      	lsls	r3, r3, #22
 800374a:	0d9a      	lsrs	r2, r3, #22
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	18d2      	adds	r2, r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2100      	movs	r1, #0
 8003762:	0018      	movs	r0, r3
 8003764:	f006 fd10 	bl	800a188 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	5c9b      	ldrb	r3, [r3, r2]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d100      	bne.n	8003776 <PCD_EP_ISR_Handler+0xb6>
 8003774:	e2fd      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d000      	beq.n	8003780 <PCD_EP_ISR_Handler+0xc0>
 800377e:	e2f8      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	2124      	movs	r1, #36	; 0x24
 8003788:	5c52      	ldrb	r2, [r2, r1]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	4249      	negs	r1, r1
 8003790:	430a      	orrs	r2, r1
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	b291      	uxth	r1, r2
 8003796:	224c      	movs	r2, #76	; 0x4c
 8003798:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2224      	movs	r2, #36	; 0x24
 800379e:	2100      	movs	r1, #0
 80037a0:	5499      	strb	r1, [r3, r2]
 80037a2:	e2e6      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3309      	adds	r3, #9
 80037a8:	33ff      	adds	r3, #255	; 0xff
 80037aa:	617b      	str	r3, [r7, #20]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	230c      	movs	r3, #12
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037b8:	230c      	movs	r3, #12
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	001a      	movs	r2, r3
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	4013      	ands	r3, r2
 80037c8:	d031      	beq.n	800382e <PCD_EP_ISR_Handler+0x16e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2250      	movs	r2, #80	; 0x50
 80037d0:	5a9b      	ldrh	r3, [r3, r2]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	001a      	movs	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	18d3      	adds	r3, r2, r3
 80037de:	001a      	movs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	4a95      	ldr	r2, [pc, #596]	; (8003a3c <PCD_EP_ISR_Handler+0x37c>)
 80037e8:	4694      	mov	ip, r2
 80037ea:	4463      	add	r3, ip
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	059b      	lsls	r3, r3, #22
 80037f0:	0d9a      	lsrs	r2, r3, #22
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	33ed      	adds	r3, #237	; 0xed
 80037fe:	33ff      	adds	r3, #255	; 0xff
 8003800:	0019      	movs	r1, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	889a      	ldrh	r2, [r3, #4]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f7ff ff0e 	bl	800362c <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	4a88      	ldr	r2, [pc, #544]	; (8003a40 <PCD_EP_ISR_Handler+0x380>)
 800381e:	4013      	ands	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	800b      	strh	r3, [r1, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	0018      	movs	r0, r3
 8003828:	f006 fc7a 	bl	800a120 <HAL_PCD_SetupStageCallback>
 800382c:	e2a1      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800382e:	230c      	movs	r3, #12
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	b21b      	sxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	db00      	blt.n	800383e <PCD_EP_ISR_Handler+0x17e>
 800383c:	e299      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	4a7d      	ldr	r2, [pc, #500]	; (8003a40 <PCD_EP_ISR_Handler+0x380>)
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	800b      	strh	r3, [r1, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2250      	movs	r2, #80	; 0x50
 8003858:	5a9b      	ldrh	r3, [r3, r2]
 800385a:	b29b      	uxth	r3, r3
 800385c:	001a      	movs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	18d3      	adds	r3, r2, r3
 8003866:	001a      	movs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	18d3      	adds	r3, r2, r3
 800386e:	4a73      	ldr	r2, [pc, #460]	; (8003a3c <PCD_EP_ISR_Handler+0x37c>)
 8003870:	4694      	mov	ip, r2
 8003872:	4463      	add	r3, ip
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	059b      	lsls	r3, r3, #22
 8003878:	0d9a      	lsrs	r2, r3, #22
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d011      	beq.n	80038aa <PCD_EP_ISR_Handler+0x1ea>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6919      	ldr	r1, [r3, #16]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	889a      	ldrh	r2, [r3, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f7ff fec8 	bl	800362c <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	18d2      	adds	r2, r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2100      	movs	r1, #0
 80038ae:	0018      	movs	r0, r3
 80038b0:	f006 fc49 	bl	800a146 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2250      	movs	r2, #80	; 0x50
 80038ba:	5a9b      	ldrh	r3, [r3, r2]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	001a      	movs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	4a5d      	ldr	r2, [pc, #372]	; (8003a3c <PCD_EP_ISR_Handler+0x37c>)
 80038c8:	4694      	mov	ip, r2
 80038ca:	4463      	add	r3, ip
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b3e      	cmp	r3, #62	; 0x3e
 80038d4:	d91c      	bls.n	8003910 <PCD_EP_ISR_Handler+0x250>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	095a      	lsrs	r2, r3, #5
 80038dc:	231c      	movs	r3, #28
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	221f      	movs	r2, #31
 80038e8:	4013      	ands	r3, r2
 80038ea:	d106      	bne.n	80038fa <PCD_EP_ISR_Handler+0x23a>
 80038ec:	231c      	movs	r3, #28
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	881a      	ldrh	r2, [r3, #0]
 80038f2:	231c      	movs	r3, #28
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	3a01      	subs	r2, #1
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	231c      	movs	r3, #28
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	b29b      	uxth	r3, r3
 8003904:	4a4f      	ldr	r2, [pc, #316]	; (8003a44 <PCD_EP_ISR_Handler+0x384>)
 8003906:	4313      	orrs	r3, r2
 8003908:	b29a      	uxth	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	801a      	strh	r2, [r3, #0]
 800390e:	e018      	b.n	8003942 <PCD_EP_ISR_Handler+0x282>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	085a      	lsrs	r2, r3, #1
 8003916:	231c      	movs	r3, #28
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	801a      	strh	r2, [r3, #0]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	d006      	beq.n	8003934 <PCD_EP_ISR_Handler+0x274>
 8003926:	231c      	movs	r3, #28
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	231c      	movs	r3, #28
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	3201      	adds	r2, #1
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	231c      	movs	r3, #28
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	029b      	lsls	r3, r3, #10
 800393c:	b29a      	uxth	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <PCD_EP_ISR_Handler+0x388>)
 800394a:	4013      	ands	r3, r2
 800394c:	b29c      	uxth	r4, r3
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	015b      	lsls	r3, r3, #5
 8003952:	4063      	eors	r3, r4
 8003954:	b29c      	uxth	r4, r3
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	4063      	eors	r3, r4
 800395c:	b29c      	uxth	r4, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	001a      	movs	r2, r3
 8003964:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <PCD_EP_ISR_Handler+0x38c>)
 8003966:	4323      	orrs	r3, r4
 8003968:	b29b      	uxth	r3, r3
 800396a:	8013      	strh	r3, [r2, #0]
 800396c:	e201      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	001a      	movs	r2, r3
 8003974:	231b      	movs	r3, #27
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	18d3      	adds	r3, r2, r3
 800397e:	881a      	ldrh	r2, [r3, #0]
 8003980:	230c      	movs	r3, #12
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003986:	230c      	movs	r3, #12
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	b21b      	sxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	db00      	blt.n	8003996 <PCD_EP_ISR_Handler+0x2d6>
 8003994:	e0fa      	b.n	8003b8c <PCD_EP_ISR_Handler+0x4cc>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	001a      	movs	r2, r3
 800399c:	231b      	movs	r3, #27
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	18d2      	adds	r2, r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	0019      	movs	r1, r3
 80039ac:	231b      	movs	r3, #27
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	18cb      	adds	r3, r1, r3
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	4921      	ldr	r1, [pc, #132]	; (8003a40 <PCD_EP_ISR_Handler+0x380>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 80039c0:	231b      	movs	r3, #27
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	0013      	movs	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	3309      	adds	r3, #9
 80039d0:	33ff      	adds	r3, #255	; 0xff
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	617b      	str	r3, [r7, #20]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	7a9b      	ldrb	r3, [r3, #10]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d137      	bne.n	8003a50 <PCD_EP_ISR_Handler+0x390>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2250      	movs	r2, #80	; 0x50
 80039e6:	5a9b      	ldrh	r3, [r3, r2]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	001a      	movs	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	18d3      	adds	r3, r2, r3
 80039f4:	001a      	movs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	18d3      	adds	r3, r2, r3
 80039fc:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <PCD_EP_ISR_Handler+0x37c>)
 80039fe:	4694      	mov	ip, r2
 8003a00:	4463      	add	r3, ip
 8003a02:	881a      	ldrh	r2, [r3, #0]
 8003a04:	231e      	movs	r3, #30
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	0592      	lsls	r2, r2, #22
 8003a0a:	0d92      	lsrs	r2, r2, #22
 8003a0c:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 8003a0e:	231e      	movs	r3, #30
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d100      	bne.n	8003a1a <PCD_EP_ISR_Handler+0x35a>
 8003a18:	e08c      	b.n	8003b34 <PCD_EP_ISR_Handler+0x474>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	6919      	ldr	r1, [r3, #16]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	889a      	ldrh	r2, [r3, #4]
 8003a26:	231e      	movs	r3, #30
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	f7ff fdfe 	bl	800362c <PCD_ReadPMA>
 8003a30:	e080      	b.n	8003b34 <PCD_EP_ISR_Handler+0x474>
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	ffff8f0f 	.word	0xffff8f0f
 8003a38:	00000402 	.word	0x00000402
 8003a3c:	00000406 	.word	0x00000406
 8003a40:	00000f8f 	.word	0x00000f8f
 8003a44:	ffff8000 	.word	0xffff8000
 8003a48:	ffffbf8f 	.word	0xffffbf8f
 8003a4c:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	001a      	movs	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	001a      	movs	r2, r3
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	01db      	lsls	r3, r3, #7
 8003a66:	4013      	ands	r3, r2
 8003a68:	d027      	beq.n	8003aba <PCD_EP_ISR_Handler+0x3fa>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2250      	movs	r2, #80	; 0x50
 8003a70:	5a9b      	ldrh	r3, [r3, r2]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	001a      	movs	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	001a      	movs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	18d3      	adds	r3, r2, r3
 8003a86:	4ac4      	ldr	r2, [pc, #784]	; (8003d98 <PCD_EP_ISR_Handler+0x6d8>)
 8003a88:	4694      	mov	ip, r2
 8003a8a:	4463      	add	r3, ip
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	231e      	movs	r3, #30
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	0592      	lsls	r2, r2, #22
 8003a94:	0d92      	lsrs	r2, r2, #22
 8003a96:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8003a98:	231e      	movs	r3, #30
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d032      	beq.n	8003b08 <PCD_EP_ISR_Handler+0x448>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6919      	ldr	r1, [r3, #16]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	88da      	ldrh	r2, [r3, #6]
 8003aae:	231e      	movs	r3, #30
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	f7ff fdba 	bl	800362c <PCD_ReadPMA>
 8003ab8:	e026      	b.n	8003b08 <PCD_EP_ISR_Handler+0x448>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2250      	movs	r2, #80	; 0x50
 8003ac0:	5a9b      	ldrh	r3, [r3, r2]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	18d3      	adds	r3, r2, r3
 8003ace:	001a      	movs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	4ab1      	ldr	r2, [pc, #708]	; (8003d9c <PCD_EP_ISR_Handler+0x6dc>)
 8003ad8:	4694      	mov	ip, r2
 8003ada:	4463      	add	r3, ip
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	231e      	movs	r3, #30
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	0592      	lsls	r2, r2, #22
 8003ae4:	0d92      	lsrs	r2, r2, #22
 8003ae6:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8003ae8:	231e      	movs	r3, #30
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <PCD_EP_ISR_Handler+0x448>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	6919      	ldr	r1, [r3, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	891a      	ldrh	r2, [r3, #8]
 8003afe:	231e      	movs	r3, #30
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	f7ff fd92 	bl	800362c <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	18d2      	adds	r2, r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	18cb      	adds	r3, r1, r3
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	499e      	ldr	r1, [pc, #632]	; (8003da0 <PCD_EP_ISR_Handler+0x6e0>)
 8003b28:	400b      	ands	r3, r1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	499d      	ldr	r1, [pc, #628]	; (8003da4 <PCD_EP_ISR_Handler+0x6e4>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	231e      	movs	r3, #30
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	18d2      	adds	r2, r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	231e      	movs	r3, #30
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	18d2      	adds	r2, r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d006      	beq.n	8003b6a <PCD_EP_ISR_Handler+0x4aa>
 8003b5c:	231e      	movs	r3, #30
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d207      	bcs.n	8003b7a <PCD_EP_ISR_Handler+0x4ba>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0011      	movs	r1, r2
 8003b72:	0018      	movs	r0, r3
 8003b74:	f006 fae7 	bl	800a146 <HAL_PCD_DataOutStageCallback>
 8003b78:	e008      	b.n	8003b8c <PCD_EP_ISR_Handler+0x4cc>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	7819      	ldrb	r1, [r3, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff f824 	bl	8002bd4 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	001a      	movs	r2, r3
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <PCD_EP_ISR_Handler+0x4de>
 8003b9c:	e0e9      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
      {
        ep = &hpcd->IN_ep[EPindex];
 8003b9e:	231b      	movs	r3, #27
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	3328      	adds	r3, #40	; 0x28
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	617b      	str	r3, [r7, #20]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	001a      	movs	r2, r3
 8003bba:	231b      	movs	r3, #27
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	18d2      	adds	r2, r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0019      	movs	r1, r3
 8003bca:	231b      	movs	r3, #27
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	18cb      	adds	r3, r1, r3
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	4974      	ldr	r1, [pc, #464]	; (8003da8 <PCD_EP_ISR_Handler+0x6e8>)
 8003bd8:	400b      	ands	r3, r1
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	7a9b      	ldrb	r3, [r3, #10]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d126      	bne.n	8003c34 <PCD_EP_ISR_Handler+0x574>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2250      	movs	r2, #80	; 0x50
 8003bec:	5a9b      	ldrh	r3, [r3, r2]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	4a65      	ldr	r2, [pc, #404]	; (8003d98 <PCD_EP_ISR_Handler+0x6d8>)
 8003c04:	4694      	mov	ip, r2
 8003c06:	4463      	add	r3, ip
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	059b      	lsls	r3, r3, #22
 8003c0c:	0d9a      	lsrs	r2, r3, #22
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d100      	bne.n	8003c1c <PCD_EP_ISR_Handler+0x55c>
 8003c1a:	e078      	b.n	8003d0e <PCD_EP_ISR_Handler+0x64e>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	6919      	ldr	r1, [r3, #16]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	889a      	ldrh	r2, [r3, #4]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f7ff fcb9 	bl	80035a4 <PCD_WritePMA>
 8003c32:	e06c      	b.n	8003d0e <PCD_EP_ISR_Handler+0x64e>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	001a      	movs	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	18d3      	adds	r3, r2, r3
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	001a      	movs	r2, r3
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d025      	beq.n	8003c98 <PCD_EP_ISR_Handler+0x5d8>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2250      	movs	r2, #80	; 0x50
 8003c52:	5a9b      	ldrh	r3, [r3, r2]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	001a      	movs	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	001a      	movs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	4a4b      	ldr	r2, [pc, #300]	; (8003d98 <PCD_EP_ISR_Handler+0x6d8>)
 8003c6a:	4694      	mov	ip, r2
 8003c6c:	4463      	add	r3, ip
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	059b      	lsls	r3, r3, #22
 8003c72:	0d9a      	lsrs	r2, r3, #22
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d030      	beq.n	8003ce2 <PCD_EP_ISR_Handler+0x622>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	6919      	ldr	r1, [r3, #16]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	88da      	ldrh	r2, [r3, #6]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f7ff fc87 	bl	80035a4 <PCD_WritePMA>
 8003c96:	e024      	b.n	8003ce2 <PCD_EP_ISR_Handler+0x622>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2250      	movs	r2, #80	; 0x50
 8003c9e:	5a9b      	ldrh	r3, [r3, r2]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	18d3      	adds	r3, r2, r3
 8003cac:	001a      	movs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	4a39      	ldr	r2, [pc, #228]	; (8003d9c <PCD_EP_ISR_Handler+0x6dc>)
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	4463      	add	r3, ip
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	059b      	lsls	r3, r3, #22
 8003cbe:	0d9a      	lsrs	r2, r3, #22
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <PCD_EP_ISR_Handler+0x622>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6919      	ldr	r1, [r3, #16]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	891a      	ldrh	r2, [r3, #8]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f7ff fc61 	bl	80035a4 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	001a      	movs	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	18d2      	adds	r2, r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	18cb      	adds	r3, r1, r3
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	4927      	ldr	r1, [pc, #156]	; (8003da0 <PCD_EP_ISR_Handler+0x6e0>)
 8003d02:	400b      	ands	r3, r1
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4929      	ldr	r1, [pc, #164]	; (8003dac <PCD_EP_ISR_Handler+0x6ec>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2250      	movs	r2, #80	; 0x50
 8003d14:	5a9b      	ldrh	r3, [r3, r2]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	001a      	movs	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	18d3      	adds	r3, r2, r3
 8003d22:	001a      	movs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	18d3      	adds	r3, r2, r3
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <PCD_EP_ISR_Handler+0x6d8>)
 8003d2c:	4694      	mov	ip, r2
 8003d2e:	4463      	add	r3, ip
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	059b      	lsls	r3, r3, #22
 8003d34:	0d9a      	lsrs	r2, r3, #22
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	18d2      	adds	r2, r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <PCD_EP_ISR_Handler+0x6a0>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	781a      	ldrb	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0011      	movs	r1, r2
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f006 fa15 	bl	800a188 <HAL_PCD_DataInStageCallback>
 8003d5e:	e008      	b.n	8003d72 <PCD_EP_ISR_Handler+0x6b2>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	7819      	ldrb	r1, [r3, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff f8cf 	bl	8002f10 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2244      	movs	r2, #68	; 0x44
 8003d78:	5a9b      	ldrh	r3, [r3, r2]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	230e      	movs	r3, #14
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	1c11      	adds	r1, r2, #0
 8003d82:	8019      	strh	r1, [r3, #0]
 8003d84:	b213      	sxth	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	da00      	bge.n	8003d8c <PCD_EP_ISR_Handler+0x6cc>
 8003d8a:	e4a6      	b.n	80036da <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b009      	add	sp, #36	; 0x24
 8003d94:	bd90      	pop	{r4, r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	00000402 	.word	0x00000402
 8003d9c:	00000406 	.word	0x00000406
 8003da0:	00000f0f 	.word	0x00000f0f
 8003da4:	ffff80c0 	.word	0xffff80c0
 8003da8:	ffff8f0f 	.word	0xffff8f0f
 8003dac:	ffffc080 	.word	0xffffc080

08003db0 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	0008      	movs	r0, r1
 8003dba:	0011      	movs	r1, r2
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	230a      	movs	r3, #10
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	1c02      	adds	r2, r0, #0
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	1c0a      	adds	r2, r1, #0
 8003dcc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003dce:	230a      	movs	r3, #10
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003dde:	230a      	movs	r3, #10
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	227f      	movs	r2, #127	; 0x7f
 8003de6:	401a      	ands	r2, r3
 8003de8:	0013      	movs	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	3328      	adds	r3, #40	; 0x28
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	18d3      	adds	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e00b      	b.n	8003e12 <HAL_PCDEx_PMAConfig+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	0013      	movs	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	3309      	adds	r3, #9
 8003e0a:	33ff      	adds	r3, #255	; 0xff
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	18d3      	adds	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e12:	2308      	movs	r3, #8
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_PCDEx_PMAConfig+0x7c>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	809a      	strh	r2, [r3, #4]
 8003e2a:	e00b      	b.n	8003e44 <HAL_PCDEx_PMAConfig+0x94>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b006      	add	sp, #24
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2201      	movs	r2, #1
 8003e62:	4013      	ands	r3, r2
 8003e64:	d100      	bne.n	8003e68 <HAL_RCC_OscConfig+0x18>
 8003e66:	e08d      	b.n	8003f84 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e68:	4bc5      	ldr	r3, [pc, #788]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d00e      	beq.n	8003e92 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e74:	4bc2      	ldr	r3, [pc, #776]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	220c      	movs	r2, #12
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d116      	bne.n	8003eae <HAL_RCC_OscConfig+0x5e>
 8003e80:	4bbf      	ldr	r3, [pc, #764]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	23c0      	movs	r3, #192	; 0xc0
 8003e86:	025b      	lsls	r3, r3, #9
 8003e88:	401a      	ands	r2, r3
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	025b      	lsls	r3, r3, #9
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d10d      	bne.n	8003eae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e92:	4bbb      	ldr	r3, [pc, #748]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	029b      	lsls	r3, r3, #10
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d100      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x50>
 8003e9e:	e070      	b.n	8003f82 <HAL_RCC_OscConfig+0x132>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d000      	beq.n	8003eaa <HAL_RCC_OscConfig+0x5a>
 8003ea8:	e06b      	b.n	8003f82 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e327      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x76>
 8003eb6:	4bb2      	ldr	r3, [pc, #712]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003eb8:	4ab1      	ldr	r2, [pc, #708]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	0249      	lsls	r1, r1, #9
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e02f      	b.n	8003f26 <HAL_RCC_OscConfig+0xd6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4bac      	ldr	r3, [pc, #688]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003ed0:	4aab      	ldr	r2, [pc, #684]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	49ab      	ldr	r1, [pc, #684]	; (8004184 <HAL_RCC_OscConfig+0x334>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	4ba9      	ldr	r3, [pc, #676]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003edc:	4aa8      	ldr	r2, [pc, #672]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	49a9      	ldr	r1, [pc, #676]	; (8004188 <HAL_RCC_OscConfig+0x338>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e01e      	b.n	8003f26 <HAL_RCC_OscConfig+0xd6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d10e      	bne.n	8003f0e <HAL_RCC_OscConfig+0xbe>
 8003ef0:	4ba3      	ldr	r3, [pc, #652]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003ef2:	4aa3      	ldr	r2, [pc, #652]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	02c9      	lsls	r1, r1, #11
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	4ba0      	ldr	r3, [pc, #640]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f00:	4a9f      	ldr	r2, [pc, #636]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	2180      	movs	r1, #128	; 0x80
 8003f06:	0249      	lsls	r1, r1, #9
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e00b      	b.n	8003f26 <HAL_RCC_OscConfig+0xd6>
 8003f0e:	4b9c      	ldr	r3, [pc, #624]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f10:	4a9b      	ldr	r2, [pc, #620]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	499b      	ldr	r1, [pc, #620]	; (8004184 <HAL_RCC_OscConfig+0x334>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	4b99      	ldr	r3, [pc, #612]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f1c:	4a98      	ldr	r2, [pc, #608]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	4999      	ldr	r1, [pc, #612]	; (8004188 <HAL_RCC_OscConfig+0x338>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d014      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fd fa25 	bl	800137c <HAL_GetTick>
 8003f32:	0003      	movs	r3, r0
 8003f34:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fa20 	bl	800137c <HAL_GetTick>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e2d9      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	4b8d      	ldr	r3, [pc, #564]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	029b      	lsls	r3, r3, #10
 8003f52:	4013      	ands	r3, r2
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e015      	b.n	8003f84 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fd fa10 	bl	800137c <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f62:	f7fd fa0b 	bl	800137c <HAL_GetTick>
 8003f66:	0002      	movs	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b64      	cmp	r3, #100	; 0x64
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e2c4      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f74:	4b82      	ldr	r3, [pc, #520]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	029b      	lsls	r3, r3, #10
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x112>
 8003f80:	e000      	b.n	8003f84 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d100      	bne.n	8003f90 <HAL_RCC_OscConfig+0x140>
 8003f8e:	e06c      	b.n	800406a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f90:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	220c      	movs	r2, #12
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f9a:	4b79      	ldr	r3, [pc, #484]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d11f      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x196>
 8003fa6:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	23c0      	movs	r3, #192	; 0xc0
 8003fac:	025b      	lsls	r3, r3, #9
 8003fae:	401a      	ands	r2, r3
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d116      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb8:	4b71      	ldr	r3, [pc, #452]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d005      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e297      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fce:	4a6c      	ldr	r2, [pc, #432]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	21f8      	movs	r1, #248	; 0xf8
 8003fd6:	438b      	bics	r3, r1
 8003fd8:	0019      	movs	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe4:	e041      	b.n	800406a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d024      	beq.n	8004038 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fee:	4b64      	ldr	r3, [pc, #400]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003ff0:	4a63      	ldr	r2, [pc, #396]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fd f9bf 	bl	800137c <HAL_GetTick>
 8003ffe:	0003      	movs	r3, r0
 8004000:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004004:	f7fd f9ba 	bl	800137c <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e273      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d0f1      	beq.n	8004004 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4a57      	ldr	r2, [pc, #348]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004022:	4b57      	ldr	r3, [pc, #348]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	21f8      	movs	r1, #248	; 0xf8
 8004028:	438b      	bics	r3, r1
 800402a:	0019      	movs	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	430b      	orrs	r3, r1
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e018      	b.n	800406a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004038:	4b51      	ldr	r3, [pc, #324]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 800403a:	4a51      	ldr	r2, [pc, #324]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	2101      	movs	r1, #1
 8004040:	438a      	bics	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fd f99a 	bl	800137c <HAL_GetTick>
 8004048:	0003      	movs	r3, r0
 800404a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404e:	f7fd f995 	bl	800137c <HAL_GetTick>
 8004052:	0002      	movs	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e24e      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004060:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2202      	movs	r2, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d1f1      	bne.n	800404e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2208      	movs	r2, #8
 8004070:	4013      	ands	r3, r2
 8004072:	d036      	beq.n	80040e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d019      	beq.n	80040b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407c:	4b40      	ldr	r3, [pc, #256]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 800407e:	4a40      	ldr	r2, [pc, #256]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004082:	2101      	movs	r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004088:	f7fd f978 	bl	800137c <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004092:	f7fd f973 	bl	800137c <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e22c      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a4:	4b36      	ldr	r3, [pc, #216]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2202      	movs	r2, #2
 80040aa:	4013      	ands	r3, r2
 80040ac:	d0f1      	beq.n	8004092 <HAL_RCC_OscConfig+0x242>
 80040ae:	e018      	b.n	80040e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 80040b2:	4a33      	ldr	r2, [pc, #204]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 80040b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7fd f95e 	bl	800137c <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fd f959 	bl	800137c <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e212      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b29      	ldr	r3, [pc, #164]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f1      	bne.n	80040c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2204      	movs	r2, #4
 80040e8:	4013      	ands	r3, r2
 80040ea:	d100      	bne.n	80040ee <HAL_RCC_OscConfig+0x29e>
 80040ec:	e0b6      	b.n	800425c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ee:	2317      	movs	r3, #23
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	055b      	lsls	r3, r3, #21
 80040fe:	4013      	ands	r3, r2
 8004100:	d111      	bne.n	8004126 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004106:	69d2      	ldr	r2, [r2, #28]
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	0549      	lsls	r1, r1, #21
 800410c:	430a      	orrs	r2, r1
 800410e:	61da      	str	r2, [r3, #28]
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	055b      	lsls	r3, r3, #21
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800411e:	2317      	movs	r3, #23
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004126:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_OscConfig+0x33c>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4013      	ands	r3, r2
 8004130:	d11a      	bne.n	8004168 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004132:	4b16      	ldr	r3, [pc, #88]	; (800418c <HAL_RCC_OscConfig+0x33c>)
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <HAL_RCC_OscConfig+0x33c>)
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0049      	lsls	r1, r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004140:	f7fd f91c 	bl	800137c <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fd f917 	bl	800137c <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1d0      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x33c>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10f      	bne.n	8004190 <HAL_RCC_OscConfig+0x340>
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <HAL_RCC_OscConfig+0x330>)
 8004174:	6a12      	ldr	r2, [r2, #32]
 8004176:	2101      	movs	r1, #1
 8004178:	430a      	orrs	r2, r1
 800417a:	621a      	str	r2, [r3, #32]
 800417c:	e036      	b.n	80041ec <HAL_RCC_OscConfig+0x39c>
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	40021000 	.word	0x40021000
 8004184:	fffeffff 	.word	0xfffeffff
 8004188:	fffbffff 	.word	0xfffbffff
 800418c:	40007000 	.word	0x40007000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10c      	bne.n	80041b2 <HAL_RCC_OscConfig+0x362>
 8004198:	4bc9      	ldr	r3, [pc, #804]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800419a:	4ac9      	ldr	r2, [pc, #804]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800419c:	6a12      	ldr	r2, [r2, #32]
 800419e:	2101      	movs	r1, #1
 80041a0:	438a      	bics	r2, r1
 80041a2:	621a      	str	r2, [r3, #32]
 80041a4:	4bc6      	ldr	r3, [pc, #792]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041a6:	4ac6      	ldr	r2, [pc, #792]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041a8:	6a12      	ldr	r2, [r2, #32]
 80041aa:	2104      	movs	r1, #4
 80041ac:	438a      	bics	r2, r1
 80041ae:	621a      	str	r2, [r3, #32]
 80041b0:	e01c      	b.n	80041ec <HAL_RCC_OscConfig+0x39c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x384>
 80041ba:	4bc1      	ldr	r3, [pc, #772]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041bc:	4ac0      	ldr	r2, [pc, #768]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041be:	6a12      	ldr	r2, [r2, #32]
 80041c0:	2104      	movs	r1, #4
 80041c2:	430a      	orrs	r2, r1
 80041c4:	621a      	str	r2, [r3, #32]
 80041c6:	4bbe      	ldr	r3, [pc, #760]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041c8:	4abd      	ldr	r2, [pc, #756]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041ca:	6a12      	ldr	r2, [r2, #32]
 80041cc:	2101      	movs	r1, #1
 80041ce:	430a      	orrs	r2, r1
 80041d0:	621a      	str	r2, [r3, #32]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x39c>
 80041d4:	4bba      	ldr	r3, [pc, #744]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041d6:	4aba      	ldr	r2, [pc, #744]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041d8:	6a12      	ldr	r2, [r2, #32]
 80041da:	2101      	movs	r1, #1
 80041dc:	438a      	bics	r2, r1
 80041de:	621a      	str	r2, [r3, #32]
 80041e0:	4bb7      	ldr	r3, [pc, #732]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041e2:	4ab7      	ldr	r2, [pc, #732]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80041e4:	6a12      	ldr	r2, [r2, #32]
 80041e6:	2104      	movs	r1, #4
 80041e8:	438a      	bics	r2, r1
 80041ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d014      	beq.n	800421e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f4:	f7fd f8c2 	bl	800137c <HAL_GetTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	e009      	b.n	8004212 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd f8bd 	bl	800137c <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	4aae      	ldr	r2, [pc, #696]	; (80044c4 <HAL_RCC_OscConfig+0x674>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e175      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	4bab      	ldr	r3, [pc, #684]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	2202      	movs	r2, #2
 8004218:	4013      	ands	r3, r2
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x3ae>
 800421c:	e013      	b.n	8004246 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fd f8ad 	bl	800137c <HAL_GetTick>
 8004222:	0003      	movs	r3, r0
 8004224:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	e009      	b.n	800423c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fd f8a8 	bl	800137c <HAL_GetTick>
 800422c:	0002      	movs	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	4aa4      	ldr	r2, [pc, #656]	; (80044c4 <HAL_RCC_OscConfig+0x674>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e160      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423c:	4ba0      	ldr	r3, [pc, #640]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	2202      	movs	r2, #2
 8004242:	4013      	ands	r3, r2
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004246:	2317      	movs	r3, #23
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b9b      	ldr	r3, [pc, #620]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004252:	4a9b      	ldr	r2, [pc, #620]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004254:	69d2      	ldr	r2, [r2, #28]
 8004256:	499c      	ldr	r1, [pc, #624]	; (80044c8 <HAL_RCC_OscConfig+0x678>)
 8004258:	400a      	ands	r2, r1
 800425a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2210      	movs	r2, #16
 8004262:	4013      	ands	r3, r2
 8004264:	d063      	beq.n	800432e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d12a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800426e:	4b94      	ldr	r3, [pc, #592]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004270:	4a93      	ldr	r2, [pc, #588]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004274:	2104      	movs	r1, #4
 8004276:	430a      	orrs	r2, r1
 8004278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800427a:	4b91      	ldr	r3, [pc, #580]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800427c:	4a90      	ldr	r2, [pc, #576]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800427e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004280:	2101      	movs	r1, #1
 8004282:	430a      	orrs	r2, r1
 8004284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7fd f879 	bl	800137c <HAL_GetTick>
 800428a:	0003      	movs	r3, r0
 800428c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004290:	f7fd f874 	bl	800137c <HAL_GetTick>
 8004294:	0002      	movs	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e12d      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042a2:	4b87      	ldr	r3, [pc, #540]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	2202      	movs	r2, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	d0f1      	beq.n	8004290 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042ac:	4a84      	ldr	r2, [pc, #528]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042ae:	4b84      	ldr	r3, [pc, #528]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	21f8      	movs	r1, #248	; 0xf8
 80042b4:	438b      	bics	r3, r1
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	430b      	orrs	r3, r1
 80042c0:	6353      	str	r3, [r2, #52]	; 0x34
 80042c2:	e034      	b.n	800432e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	3305      	adds	r3, #5
 80042ca:	d111      	bne.n	80042f0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80042cc:	4b7c      	ldr	r3, [pc, #496]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042ce:	4a7c      	ldr	r2, [pc, #496]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042d2:	2104      	movs	r1, #4
 80042d4:	438a      	bics	r2, r1
 80042d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042d8:	4a79      	ldr	r2, [pc, #484]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042da:	4b79      	ldr	r3, [pc, #484]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	21f8      	movs	r1, #248	; 0xf8
 80042e0:	438b      	bics	r3, r1
 80042e2:	0019      	movs	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	430b      	orrs	r3, r1
 80042ec:	6353      	str	r3, [r2, #52]	; 0x34
 80042ee:	e01e      	b.n	800432e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042f0:	4b73      	ldr	r3, [pc, #460]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042f2:	4a73      	ldr	r2, [pc, #460]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f6:	2104      	movs	r1, #4
 80042f8:	430a      	orrs	r2, r1
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80042fc:	4b70      	ldr	r3, [pc, #448]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80042fe:	4a70      	ldr	r2, [pc, #448]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004300:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004302:	2101      	movs	r1, #1
 8004304:	438a      	bics	r2, r1
 8004306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004308:	f7fd f838 	bl	800137c <HAL_GetTick>
 800430c:	0003      	movs	r3, r0
 800430e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004312:	f7fd f833 	bl	800137c <HAL_GetTick>
 8004316:	0002      	movs	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0ec      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004324:	4b66      	ldr	r3, [pc, #408]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	2202      	movs	r2, #2
 800432a:	4013      	ands	r3, r2
 800432c:	d1f1      	bne.n	8004312 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2220      	movs	r2, #32
 8004334:	4013      	ands	r3, r2
 8004336:	d05c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	220c      	movs	r2, #12
 800433e:	4013      	ands	r3, r2
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d00e      	beq.n	8004362 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004344:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	220c      	movs	r2, #12
 800434a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800434c:	2b08      	cmp	r3, #8
 800434e:	d114      	bne.n	800437a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004350:	4b5b      	ldr	r3, [pc, #364]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	23c0      	movs	r3, #192	; 0xc0
 8004356:	025b      	lsls	r3, r3, #9
 8004358:	401a      	ands	r2, r3
 800435a:	23c0      	movs	r3, #192	; 0xc0
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	429a      	cmp	r2, r3
 8004360:	d10b      	bne.n	800437a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004362:	4b57      	ldr	r3, [pc, #348]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	025b      	lsls	r3, r3, #9
 800436a:	4013      	ands	r3, r2
 800436c:	d040      	beq.n	80043f0 <HAL_RCC_OscConfig+0x5a0>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d03c      	beq.n	80043f0 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0c1      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01b      	beq.n	80043ba <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004382:	4b4f      	ldr	r3, [pc, #316]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004384:	4a4e      	ldr	r2, [pc, #312]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004386:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	0249      	lsls	r1, r1, #9
 800438c:	430a      	orrs	r2, r1
 800438e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fc fff4 	bl	800137c <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800439a:	f7fc ffef 	bl	800137c <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0a8      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043ac:	4b44      	ldr	r3, [pc, #272]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80043ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	025b      	lsls	r3, r3, #9
 80043b4:	4013      	ands	r3, r2
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x54a>
 80043b8:	e01b      	b.n	80043f2 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043ba:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80043bc:	4a40      	ldr	r2, [pc, #256]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80043be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043c0:	4942      	ldr	r1, [pc, #264]	; (80044cc <HAL_RCC_OscConfig+0x67c>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fc ffd9 	bl	800137c <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043d0:	f7fc ffd4 	bl	800137c <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e08d      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80043e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	025b      	lsls	r3, r3, #9
 80043ea:	4013      	ands	r3, r2
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x580>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80043f0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d100      	bne.n	80043fc <HAL_RCC_OscConfig+0x5ac>
 80043fa:	e07f      	b.n	80044fc <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	220c      	movs	r2, #12
 8004402:	4013      	ands	r3, r2
 8004404:	2b08      	cmp	r3, #8
 8004406:	d100      	bne.n	800440a <HAL_RCC_OscConfig+0x5ba>
 8004408:	e076      	b.n	80044f8 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	2b02      	cmp	r3, #2
 8004410:	d14b      	bne.n	80044aa <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004414:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	492d      	ldr	r1, [pc, #180]	; (80044d0 <HAL_RCC_OscConfig+0x680>)
 800441a:	400a      	ands	r2, r1
 800441c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fc ffad 	bl	800137c <HAL_GetTick>
 8004422:	0003      	movs	r3, r0
 8004424:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004428:	f7fc ffa8 	bl	800137c <HAL_GetTick>
 800442c:	0002      	movs	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e061      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443a:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	049b      	lsls	r3, r3, #18
 8004442:	4013      	ands	r3, r2
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004446:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	210f      	movs	r1, #15
 800444e:	438b      	bics	r3, r1
 8004450:	0019      	movs	r1, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	430b      	orrs	r3, r1
 8004458:	62d3      	str	r3, [r2, #44]	; 0x2c
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800445c:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	491c      	ldr	r1, [pc, #112]	; (80044d4 <HAL_RCC_OscConfig+0x684>)
 8004462:	4019      	ands	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	4303      	orrs	r3, r0
 800446e:	430b      	orrs	r3, r1
 8004470:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004474:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	0449      	lsls	r1, r1, #17
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fc ff7c 	bl	800137c <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448a:	f7fc ff77 	bl	800137c <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e030      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800449c:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	049b      	lsls	r3, r3, #18
 80044a4:	4013      	ands	r3, r2
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x63a>
 80044a8:	e028      	b.n	80044fc <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80044ac:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <HAL_RCC_OscConfig+0x670>)
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	4907      	ldr	r1, [pc, #28]	; (80044d0 <HAL_RCC_OscConfig+0x680>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fc ff61 	bl	800137c <HAL_GetTick>
 80044ba:	0003      	movs	r3, r0
 80044bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x69a>
 80044c0:	40021000 	.word	0x40021000
 80044c4:	00001388 	.word	0x00001388
 80044c8:	efffffff 	.word	0xefffffff
 80044cc:	fffeffff 	.word	0xfffeffff
 80044d0:	feffffff 	.word	0xfeffffff
 80044d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fc ff50 	bl	800137c <HAL_GetTick>
 80044dc:	0002      	movs	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e009      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_RCC_OscConfig+0x6b8>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	049b      	lsls	r3, r3, #18
 80044f2:	4013      	ands	r3, r2
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x688>
 80044f6:	e001      	b.n	80044fc <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b006      	add	sp, #24
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800451a:	4b7a      	ldr	r3, [pc, #488]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	401a      	ands	r2, r3
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d211      	bcs.n	800454c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004528:	4b76      	ldr	r3, [pc, #472]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 800452a:	4a76      	ldr	r2, [pc, #472]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	2101      	movs	r1, #1
 8004530:	438a      	bics	r2, r1
 8004532:	0011      	movs	r1, r2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800453a:	4b72      	ldr	r3, [pc, #456]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2201      	movs	r2, #1
 8004540:	401a      	ands	r2, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0d7      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2202      	movs	r2, #2
 8004552:	4013      	ands	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004556:	4a6c      	ldr	r2, [pc, #432]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 8004558:	4b6b      	ldr	r3, [pc, #428]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	21f0      	movs	r1, #240	; 0xf0
 800455e:	438b      	bics	r3, r1
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	430b      	orrs	r3, r1
 8004568:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2201      	movs	r2, #1
 8004570:	4013      	ands	r3, r2
 8004572:	d100      	bne.n	8004576 <HAL_RCC_ClockConfig+0x6a>
 8004574:	e089      	b.n	800468a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b62      	ldr	r3, [pc, #392]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	029b      	lsls	r3, r3, #10
 8004586:	4013      	ands	r3, r2
 8004588:	d120      	bne.n	80045cc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0b6      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	4b5c      	ldr	r3, [pc, #368]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	049b      	lsls	r3, r3, #18
 800459e:	4013      	ands	r3, r2
 80045a0:	d114      	bne.n	80045cc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0aa      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80045ae:	4b56      	ldr	r3, [pc, #344]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80045b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	025b      	lsls	r3, r3, #9
 80045b6:	4013      	ands	r3, r2
 80045b8:	d108      	bne.n	80045cc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e09e      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	4b52      	ldr	r3, [pc, #328]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2202      	movs	r2, #2
 80045c4:	4013      	ands	r3, r2
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e097      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045cc:	4a4e      	ldr	r2, [pc, #312]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80045ce:	4b4e      	ldr	r3, [pc, #312]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2103      	movs	r1, #3
 80045d4:	438b      	bics	r3, r1
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	430b      	orrs	r3, r1
 80045de:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fc fecc 	bl	800137c <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d111      	bne.n	8004614 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045f0:	e009      	b.n	8004606 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f2:	f7fc fec3 	bl	800137c <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a43      	ldr	r2, [pc, #268]	; (800470c <HAL_RCC_ClockConfig+0x200>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e07a      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004606:	4b40      	ldr	r3, [pc, #256]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	220c      	movs	r2, #12
 800460c:	4013      	ands	r3, r2
 800460e:	2b04      	cmp	r3, #4
 8004610:	d1ef      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xe6>
 8004612:	e03a      	b.n	800468a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d111      	bne.n	8004640 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800461c:	e009      	b.n	8004632 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461e:	f7fc fead 	bl	800137c <HAL_GetTick>
 8004622:	0002      	movs	r2, r0
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	4a38      	ldr	r2, [pc, #224]	; (800470c <HAL_RCC_ClockConfig+0x200>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e064      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004632:	4b35      	ldr	r3, [pc, #212]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	220c      	movs	r2, #12
 8004638:	4013      	ands	r3, r2
 800463a:	2b08      	cmp	r3, #8
 800463c:	d1ef      	bne.n	800461e <HAL_RCC_ClockConfig+0x112>
 800463e:	e024      	b.n	800468a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d11b      	bne.n	8004680 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8004648:	e009      	b.n	800465e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464a:	f7fc fe97 	bl	800137c <HAL_GetTick>
 800464e:	0002      	movs	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	4a2d      	ldr	r2, [pc, #180]	; (800470c <HAL_RCC_ClockConfig+0x200>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e04e      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800465e:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	220c      	movs	r2, #12
 8004664:	4013      	ands	r3, r2
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d1ef      	bne.n	800464a <HAL_RCC_ClockConfig+0x13e>
 800466a:	e00e      	b.n	800468a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fc fe86 	bl	800137c <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <HAL_RCC_ClockConfig+0x200>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e03d      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	220c      	movs	r2, #12
 8004686:	4013      	ands	r3, r2
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	401a      	ands	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d911      	bls.n	80046bc <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004698:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 800469a:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	2101      	movs	r1, #1
 80046a0:	438a      	bics	r2, r1
 80046a2:	0011      	movs	r1, r2
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2201      	movs	r2, #1
 80046b0:	401a      	ands	r2, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e01f      	b.n	80046fc <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2204      	movs	r2, #4
 80046c2:	4013      	ands	r3, r2
 80046c4:	d008      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046c6:	4a10      	ldr	r2, [pc, #64]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4910      	ldr	r1, [pc, #64]	; (8004710 <HAL_RCC_ClockConfig+0x204>)
 80046ce:	4019      	ands	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046d8:	f000 f820 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046dc:	0001      	movs	r1, r0
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	220f      	movs	r2, #15
 80046e6:	4013      	ands	r3, r2
 80046e8:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <HAL_RCC_ClockConfig+0x208>)
 80046ea:	5cd3      	ldrb	r3, [r2, r3]
 80046ec:	000a      	movs	r2, r1
 80046ee:	40da      	lsrs	r2, r3
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_RCC_ClockConfig+0x20c>)
 80046f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046f4:	2000      	movs	r0, #0
 80046f6:	f003 ffe7 	bl	80086c8 <HAL_InitTick>
  
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b004      	add	sp, #16
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40022000 	.word	0x40022000
 8004708:	40021000 	.word	0x40021000
 800470c:	00001388 	.word	0x00001388
 8004710:	fffff8ff 	.word	0xfffff8ff
 8004714:	0800af08 	.word	0x0800af08
 8004718:	2000024c 	.word	0x2000024c

0800471c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b08f      	sub	sp, #60	; 0x3c
 8004720:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004722:	2314      	movs	r3, #20
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	4a37      	ldr	r2, [pc, #220]	; (8004804 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004728:	ca13      	ldmia	r2!, {r0, r1, r4}
 800472a:	c313      	stmia	r3!, {r0, r1, r4}
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	4a35      	ldr	r2, [pc, #212]	; (8004808 <HAL_RCC_GetSysClockFreq+0xec>)
 8004734:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004736:	c313      	stmia	r3!, {r0, r1, r4}
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004740:	2300      	movs	r3, #0
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
 8004744:	2300      	movs	r3, #0
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
 8004748:	2300      	movs	r3, #0
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004750:	4b2e      	ldr	r3, [pc, #184]	; (800480c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	220c      	movs	r2, #12
 800475a:	4013      	ands	r3, r2
 800475c:	2b08      	cmp	r3, #8
 800475e:	d006      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x52>
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d043      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0xd0>
 8004764:	2b04      	cmp	r3, #4
 8004766:	d144      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCC_GetSysClockFreq+0xf4>)
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800476c:	e044      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	0c9b      	lsrs	r3, r3, #18
 8004772:	220f      	movs	r2, #15
 8004774:	4013      	ands	r3, r2
 8004776:	2214      	movs	r2, #20
 8004778:	18ba      	adds	r2, r7, r2
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	220f      	movs	r2, #15
 8004784:	4013      	ands	r3, r2
 8004786:	1d3a      	adds	r2, r7, #4
 8004788:	5cd3      	ldrb	r3, [r2, r3]
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800478c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478e:	23c0      	movs	r3, #192	; 0xc0
 8004790:	025b      	lsls	r3, r3, #9
 8004792:	401a      	ands	r2, r3
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	025b      	lsls	r3, r3, #9
 8004798:	429a      	cmp	r2, r3
 800479a:	d109      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800479c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800479e:	481c      	ldr	r0, [pc, #112]	; (8004810 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047a0:	f7fb fcc4 	bl	800012c <__udivsi3>
 80047a4:	0003      	movs	r3, r0
 80047a6:	001a      	movs	r2, r3
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	4353      	muls	r3, r2
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
 80047ae:	e01a      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80047b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b2:	23c0      	movs	r3, #192	; 0xc0
 80047b4:	025b      	lsls	r3, r3, #9
 80047b6:	401a      	ands	r2, r3
 80047b8:	23c0      	movs	r3, #192	; 0xc0
 80047ba:	025b      	lsls	r3, r3, #9
 80047bc:	429a      	cmp	r2, r3
 80047be:	d109      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80047c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c2:	4814      	ldr	r0, [pc, #80]	; (8004814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c4:	f7fb fcb2 	bl	800012c <__udivsi3>
 80047c8:	0003      	movs	r3, r0
 80047ca:	001a      	movs	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	4353      	muls	r3, r2
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80047d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047d6:	480e      	ldr	r0, [pc, #56]	; (8004810 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047d8:	f7fb fca8 	bl	800012c <__udivsi3>
 80047dc:	0003      	movs	r3, r0
 80047de:	001a      	movs	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	4353      	muls	r3, r2
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047ea:	e005      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047f0:	e002      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047f2:	4b07      	ldr	r3, [pc, #28]	; (8004810 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80047fa:	0018      	movs	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b00f      	add	sp, #60	; 0x3c
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	0800ac4c 	.word	0x0800ac4c
 8004808:	0800ac5c 	.word	0x0800ac5c
 800480c:	40021000 	.word	0x40021000
 8004810:	007a1200 	.word	0x007a1200
 8004814:	02dc6c00 	.word	0x02dc6c00

08004818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b02      	ldr	r3, [pc, #8]	; (8004828 <HAL_RCC_GetHCLKFreq+0x10>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	2000024c 	.word	0x2000024c

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004830:	f7ff fff2 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004834:	0001      	movs	r1, r0
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	2207      	movs	r2, #7
 800483e:	4013      	ands	r3, r2
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004842:	5cd3      	ldrb	r3, [r2, r3]
 8004844:	40d9      	lsrs	r1, r3
 8004846:	000b      	movs	r3, r1
}    
 8004848:	0018      	movs	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	40021000 	.word	0x40021000
 8004854:	0800af18 	.word	0x0800af18

08004858 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2207      	movs	r2, #7
 8004866:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_RCC_GetClockConfig+0x4c>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2203      	movs	r2, #3
 800486e:	401a      	ands	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCC_GetClockConfig+0x4c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	22f0      	movs	r2, #240	; 0xf0
 800487a:	401a      	ands	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004880:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <HAL_RCC_GetClockConfig+0x4c>)
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	23e0      	movs	r3, #224	; 0xe0
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	401a      	ands	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetClockConfig+0x50>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	401a      	ands	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b002      	add	sp, #8
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40022000 	.word	0x40022000

080048ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	025b      	lsls	r3, r3, #9
 80048c4:	4013      	ands	r3, r2
 80048c6:	d100      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80048c8:	e08e      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80048ca:	2317      	movs	r3, #23
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d2:	4b6e      	ldr	r3, [pc, #440]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	055b      	lsls	r3, r3, #21
 80048da:	4013      	ands	r3, r2
 80048dc:	d111      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	4b6b      	ldr	r3, [pc, #428]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048e0:	4a6a      	ldr	r2, [pc, #424]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048e2:	69d2      	ldr	r2, [r2, #28]
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	0549      	lsls	r1, r1, #21
 80048e8:	430a      	orrs	r2, r1
 80048ea:	61da      	str	r2, [r3, #28]
 80048ec:	4b67      	ldr	r3, [pc, #412]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	055b      	lsls	r3, r3, #21
 80048f4:	4013      	ands	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fa:	2317      	movs	r3, #23
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b63      	ldr	r3, [pc, #396]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4013      	ands	r3, r2
 800490c:	d11a      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	4b60      	ldr	r3, [pc, #384]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004910:	4a5f      	ldr	r2, [pc, #380]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	0049      	lsls	r1, r1, #1
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491c:	f7fc fd2e 	bl	800137c <HAL_GetTick>
 8004920:	0003      	movs	r3, r0
 8004922:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	e008      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004926:	f7fc fd29 	bl	800137c <HAL_GetTick>
 800492a:	0002      	movs	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b64      	cmp	r3, #100	; 0x64
 8004932:	d901      	bls.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e0a4      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	4b55      	ldr	r3, [pc, #340]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4013      	ands	r3, r2
 8004942:	d0f0      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004944:	4b51      	ldr	r3, [pc, #324]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	23c0      	movs	r3, #192	; 0xc0
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4013      	ands	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d034      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	23c0      	movs	r3, #192	; 0xc0
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	401a      	ands	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	429a      	cmp	r2, r3
 8004964:	d02c      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004966:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004970:	4b46      	ldr	r3, [pc, #280]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004972:	4a46      	ldr	r2, [pc, #280]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004974:	6a12      	ldr	r2, [r2, #32]
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	0249      	lsls	r1, r1, #9
 800497a:	430a      	orrs	r2, r1
 800497c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800497e:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004980:	4a42      	ldr	r2, [pc, #264]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004982:	6a12      	ldr	r2, [r2, #32]
 8004984:	4944      	ldr	r1, [pc, #272]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004986:	400a      	ands	r2, r1
 8004988:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800498a:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	4013      	ands	r3, r2
 8004996:	d013      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7fc fcf0 	bl	800137c <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a0:	e009      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7fc fceb 	bl	800137c <HAL_GetTick>
 80049a6:	0002      	movs	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	4a3b      	ldr	r2, [pc, #236]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e065      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	2202      	movs	r2, #2
 80049bc:	4013      	ands	r3, r2
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c0:	4a32      	ldr	r2, [pc, #200]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049c2:	4b32      	ldr	r3, [pc, #200]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4933      	ldr	r1, [pc, #204]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80049c8:	4019      	ands	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	430b      	orrs	r3, r1
 80049d0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049d2:	2317      	movs	r3, #23
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049de:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049e0:	69d2      	ldr	r2, [r2, #28]
 80049e2:	492f      	ldr	r1, [pc, #188]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	d009      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049f2:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	2103      	movs	r1, #3
 80049fa:	438b      	bics	r3, r1
 80049fc:	0019      	movs	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	430b      	orrs	r3, r1
 8004a04:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a10:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	4923      	ldr	r1, [pc, #140]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a18:	4019      	ands	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a2e:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	2110      	movs	r1, #16
 8004a34:	438b      	bics	r3, r1
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	029b      	lsls	r3, r3, #10
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d009      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a4c:	4a0f      	ldr	r2, [pc, #60]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	438b      	bics	r3, r1
 8004a56:	0019      	movs	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a6c:	4a07      	ldr	r2, [pc, #28]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	2140      	movs	r1, #64	; 0x40
 8004a74:	438b      	bics	r3, r1
 8004a76:	0019      	movs	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b006      	add	sp, #24
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40007000 	.word	0x40007000
 8004a94:	fffffcff 	.word	0xfffffcff
 8004a98:	fffeffff 	.word	0xfffeffff
 8004a9c:	00001388 	.word	0x00001388
 8004aa0:	efffffff 	.word	0xefffffff
 8004aa4:	fffcffff 	.word	0xfffcffff

08004aa8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e01e      	b.n	8004af8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	223d      	movs	r2, #61	; 0x3d
 8004abe:	5c9b      	ldrb	r3, [r3, r2]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	223c      	movs	r2, #60	; 0x3c
 8004aca:	2100      	movs	r1, #0
 8004acc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 f815 	bl	8004b00 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	223d      	movs	r2, #61	; 0x3d
 8004ada:	2102      	movs	r1, #2
 8004adc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	0010      	movs	r0, r2
 8004aea:	f000 f961 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	223d      	movs	r2, #61	; 0x3d
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	68d2      	ldr	r2, [r2, #12]
 8004b22:	2101      	movs	r1, #1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	2101      	movs	r1, #1
 8004b34:	430a      	orrs	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2202      	movs	r2, #2
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d124      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d11d      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	4252      	negs	r2, r2
 8004b6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f000 f8fa 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004b8a:	e007      	b.n	8004b9c <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 f8ed 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f8f9 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d125      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d11e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	4252      	negs	r2, r2
 8004bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	23c0      	movs	r3, #192	; 0xc0
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 f8cd 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004be4:	e007      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 f8c0 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f8cc 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2208      	movs	r2, #8
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d124      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2208      	movs	r2, #8
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d11d      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2209      	movs	r2, #9
 8004c1e:	4252      	negs	r2, r2
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	4013      	ands	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 f8a1 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e007      	b.n	8004c4e <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 f894 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f000 f8a0 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d125      	bne.n	8004cae <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d11e      	bne.n	8004cae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2211      	movs	r2, #17
 8004c76:	4252      	negs	r2, r2
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	23c0      	movs	r3, #192	; 0xc0
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f000 f874 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004c96:	e007      	b.n	8004ca8 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 f867 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f000 f873 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10f      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d108      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	4252      	negs	r2, r2
 8004cd2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f003 fc60 	bl	800859c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2280      	movs	r2, #128	; 0x80
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d10f      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2281      	movs	r2, #129	; 0x81
 8004cfe:	4252      	negs	r2, r2
 8004d00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 f8dd 	bl	8004ec4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d10f      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d108      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2241      	movs	r2, #65	; 0x41
 8004d2c:	4252      	negs	r2, r2
 8004d2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f833 	bl	8004d9e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d10f      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d108      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2221      	movs	r2, #33	; 0x21
 8004d5a:	4252      	negs	r2, r2
 8004d5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f8a7 	bl	8004eb4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b002      	add	sp, #8
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b002      	add	sp, #8
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b002      	add	sp, #8
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b002      	add	sp, #8
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a34      	ldr	r2, [pc, #208]	; (8004e98 <TIM_Base_SetConfig+0xe8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d008      	beq.n	8004dde <TIM_Base_SetConfig+0x2e>
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	05db      	lsls	r3, r3, #23
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0x2e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a30      	ldr	r2, [pc, #192]	; (8004e9c <TIM_Base_SetConfig+0xec>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2270      	movs	r2, #112	; 0x70
 8004de2:	4393      	bics	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <TIM_Base_SetConfig+0xe8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <TIM_Base_SetConfig+0x7a>
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	05db      	lsls	r3, r3, #23
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d013      	beq.n	8004e2a <TIM_Base_SetConfig+0x7a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <TIM_Base_SetConfig+0xec>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_Base_SetConfig+0x7a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a24      	ldr	r2, [pc, #144]	; (8004ea0 <TIM_Base_SetConfig+0xf0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_Base_SetConfig+0x7a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a23      	ldr	r2, [pc, #140]	; (8004ea4 <TIM_Base_SetConfig+0xf4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_Base_SetConfig+0x7a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <TIM_Base_SetConfig+0xf8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_Base_SetConfig+0x7a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a21      	ldr	r2, [pc, #132]	; (8004eac <TIM_Base_SetConfig+0xfc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <TIM_Base_SetConfig+0x100>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	4393      	bics	r3, r2
 8004e42:	001a      	movs	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <TIM_Base_SetConfig+0xe8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_Base_SetConfig+0xd2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ea4 <TIM_Base_SetConfig+0xf4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_Base_SetConfig+0xd2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <TIM_Base_SetConfig+0xf8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_Base_SetConfig+0xd2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <TIM_Base_SetConfig+0xfc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d103      	bne.n	8004e8a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b004      	add	sp, #16
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40002000 	.word	0x40002000
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800
 8004eb0:	fffffcff 	.word	0xfffffcff

08004eb4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	000a      	movs	r2, r1
 8004ede:	1cfb      	adds	r3, r7, #3
 8004ee0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8004ee2:	230f      	movs	r3, #15
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7c1b      	ldrb	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10e      	bne.n	8004f10 <USBD_CDC_Init+0x3c>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	2181      	movs	r1, #129	; 0x81
 8004efc:	f005 fa83 	bl	800a406 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	2101      	movs	r1, #1
 8004f0a:	f005 fa7c 	bl	800a406 <USBD_LL_OpenEP>
 8004f0e:	e00b      	b.n	8004f28 <USBD_CDC_Init+0x54>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	2340      	movs	r3, #64	; 0x40
 8004f14:	2202      	movs	r2, #2
 8004f16:	2181      	movs	r1, #129	; 0x81
 8004f18:	f005 fa75 	bl	800a406 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	2340      	movs	r3, #64	; 0x40
 8004f20:	2202      	movs	r2, #2
 8004f22:	2101      	movs	r1, #1
 8004f24:	f005 fa6f 	bl	800a406 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	2182      	movs	r1, #130	; 0x82
 8004f30:	f005 fa69 	bl	800a406 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004f34:	2387      	movs	r3, #135	; 0x87
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f005 fcdd 	bl	800a8f8 <USBD_static_malloc>
 8004f3e:	0001      	movs	r1, r0
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	2386      	movs	r3, #134	; 0x86
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	2386      	movs	r3, #134	; 0x86
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	58d3      	ldr	r3, [r2, r3]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <USBD_CDC_Init+0x8a>
  {
    ret = 1; 
 8004f54:	230f      	movs	r3, #15
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e02c      	b.n	8004fb8 <USBD_CDC_Init+0xe4>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	2386      	movs	r3, #134	; 0x86
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	58d3      	ldr	r3, [r2, r3]
 8004f66:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	2387      	movs	r3, #135	; 0x87
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	58d3      	ldr	r3, [r2, r3]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	2385      	movs	r3, #133	; 0x85
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState =0;
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	2386      	movs	r3, #134	; 0x86
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	2100      	movs	r1, #0
 8004f86:	50d1      	str	r1, [r2, r3]
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	7c1b      	ldrb	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <USBD_CDC_Init+0xd2>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	2381      	movs	r3, #129	; 0x81
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	58d2      	ldr	r2, [r2, r3]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	f005 fc3c 	bl	800a81c <USBD_LL_PrepareReceive>
 8004fa4:	e008      	b.n	8004fb8 <USBD_CDC_Init+0xe4>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	2381      	movs	r3, #129	; 0x81
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	58d2      	ldr	r2, [r2, r3]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	f005 fc32 	bl	800a81c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8004fb8:	230f      	movs	r3, #15
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	781b      	ldrb	r3, [r3, #0]
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b004      	add	sp, #16
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	000a      	movs	r2, r1
 8004fd0:	1cfb      	adds	r3, r7, #3
 8004fd2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8004fd4:	230f      	movs	r3, #15
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2181      	movs	r1, #129	; 0x81
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f005 fa67 	bl	800a4b4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2101      	movs	r1, #1
 8004fea:	0018      	movs	r0, r3
 8004fec:	f005 fa62 	bl	800a4b4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2182      	movs	r1, #130	; 0x82
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f005 fa5d 	bl	800a4b4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	2386      	movs	r3, #134	; 0x86
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	58d3      	ldr	r3, [r2, r3]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d011      	beq.n	800502a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	2387      	movs	r3, #135	; 0x87
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	58d3      	ldr	r3, [r2, r3]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	2386      	movs	r3, #134	; 0x86
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	58d3      	ldr	r3, [r2, r3]
 800501a:	0018      	movs	r0, r3
 800501c:	f005 fc78 	bl	800a910 <USBD_static_free>
    pdev->pClassData = NULL;
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	2386      	movs	r3, #134	; 0x86
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	2100      	movs	r1, #0
 8005028:	50d1      	str	r1, [r2, r3]
  }
  
  return ret;
 800502a:	230f      	movs	r3, #15
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	781b      	ldrb	r3, [r3, #0]
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b004      	add	sp, #16
 8005036:	bd80      	pop	{r7, pc}

08005038 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	2386      	movs	r3, #134	; 0x86
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	58d3      	ldr	r3, [r2, r3]
 800504a:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	001a      	movs	r2, r3
 8005052:	2360      	movs	r3, #96	; 0x60
 8005054:	4013      	ands	r3, r2
 8005056:	d03d      	beq.n	80050d4 <USBD_CDC_Setup+0x9c>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d000      	beq.n	800505e <USBD_CDC_Setup+0x26>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800505c:	e046      	b.n	80050ec <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	88db      	ldrh	r3, [r3, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d02b      	beq.n	80050be <USBD_CDC_Setup+0x86>
      if (req->bmRequest & 0x80)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b25b      	sxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	da12      	bge.n	8005096 <USBD_CDC_Setup+0x5e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	2387      	movs	r3, #135	; 0x87
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	58d3      	ldr	r3, [r2, r3]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800507e:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	88d2      	ldrh	r2, [r2, #6]
 8005084:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8005086:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	88da      	ldrh	r2, [r3, #6]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	0018      	movs	r0, r3
 8005090:	f001 f94f 	bl	8006332 <USBD_CtlSendData>
    break;
 8005094:	e02b      	b.n	80050ee <USBD_CDC_Setup+0xb6>
        hcdc->CmdOpCode = req->bRequest;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	7859      	ldrb	r1, [r3, #1]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = req->wLength;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	88db      	ldrh	r3, [r3, #6]
 80050a6:	b2d9      	uxtb	r1, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <USBD_CDC_Setup+0xc0>)
 80050ac:	5499      	strb	r1, [r3, r2]
                           (uint8_t *)hcdc->data,
 80050ae:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	88da      	ldrh	r2, [r3, #6]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f001 f96e 	bl	8006398 <USBD_CtlPrepareRx>
    break;
 80050bc:	e017      	b.n	80050ee <USBD_CDC_Setup+0xb6>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	2387      	movs	r3, #135	; 0x87
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	58d3      	ldr	r3, [r2, r3]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	7850      	ldrb	r0, [r2, #1]
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	4798      	blx	r3
    break;
 80050d2:	e00c      	b.n	80050ee <USBD_CDC_Setup+0xb6>
    switch (req->bRequest)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	2b0a      	cmp	r3, #10
 80050da:	d106      	bne.n	80050ea <USBD_CDC_Setup+0xb2>
      USBD_CtlSendData (pdev,
 80050dc:	4907      	ldr	r1, [pc, #28]	; (80050fc <USBD_CDC_Setup+0xc4>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	0018      	movs	r0, r3
 80050e4:	f001 f925 	bl	8006332 <USBD_CtlSendData>
      break;
 80050e8:	e000      	b.n	80050ec <USBD_CDC_Setup+0xb4>
      break;
 80050ea:	46c0      	nop			; (mov r8, r8)
    break;
 80050ec:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b004      	add	sp, #16
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	00000201 	.word	0x00000201
 80050fc:	20000364 	.word	0x20000364

08005100 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	000a      	movs	r2, r1
 800510a:	1cfb      	adds	r3, r7, #3
 800510c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	2386      	movs	r3, #134	; 0x86
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	58d3      	ldr	r3, [r2, r3]
 8005116:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	2386      	movs	r3, #134	; 0x86
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	58d3      	ldr	r3, [r2, r3]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d006      	beq.n	8005132 <USBD_CDC_DataIn+0x32>
  {
    
    hcdc->TxState = 0;
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	2385      	movs	r3, #133	; 0x85
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	2100      	movs	r1, #0
 800512c:	50d1      	str	r1, [r2, r3]

    return USBD_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <USBD_CDC_DataIn+0x34>
  }
  else
  {
    return USBD_FAIL;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b004      	add	sp, #16
 800513a:	bd80      	pop	{r7, pc}

0800513c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	000a      	movs	r2, r1
 8005146:	1cfb      	adds	r3, r7, #3
 8005148:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	2386      	movs	r3, #134	; 0x86
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	58d3      	ldr	r3, [r2, r3]
 8005152:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005154:	1cfb      	adds	r3, r7, #3
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	0011      	movs	r1, r2
 800515c:	0018      	movs	r0, r3
 800515e:	f005 fbb4 	bl	800a8ca <USBD_LL_GetRxDataSize>
 8005162:	0001      	movs	r1, r0
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	2383      	movs	r3, #131	; 0x83
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	50d1      	str	r1, [r2, r3]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	2386      	movs	r3, #134	; 0x86
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	58d3      	ldr	r3, [r2, r3]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d011      	beq.n	800519c <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	2387      	movs	r3, #135	; 0x87
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	58d3      	ldr	r3, [r2, r3]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	2281      	movs	r2, #129	; 0x81
 8005186:	0092      	lsls	r2, r2, #2
 8005188:	5888      	ldr	r0, [r1, r2]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	2183      	movs	r1, #131	; 0x83
 800518e:	0089      	lsls	r1, r1, #2
 8005190:	468c      	mov	ip, r1
 8005192:	4462      	add	r2, ip
 8005194:	0011      	movs	r1, r2
 8005196:	4798      	blx	r3

    return USBD_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b004      	add	sp, #16
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	2386      	movs	r3, #134	; 0x86
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	58d3      	ldr	r3, [r2, r3]
 80051b8:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	2387      	movs	r3, #135	; 0x87
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	58d3      	ldr	r3, [r2, r3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01a      	beq.n	80051fc <USBD_CDC_EP0_RxReady+0x54>
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	5cd3      	ldrb	r3, [r2, r3]
 80051ce:	2bff      	cmp	r3, #255	; 0xff
 80051d0:	d014      	beq.n	80051fc <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	2387      	movs	r3, #135	; 0x87
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	58d3      	ldr	r3, [r2, r3]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	0092      	lsls	r2, r2, #2
 80051e2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 80051e4:	68fc      	ldr	r4, [r7, #12]
                                                      hcdc->CmdLength);
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4907      	ldr	r1, [pc, #28]	; (8005208 <USBD_CDC_EP0_RxReady+0x60>)
 80051ea:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051ec:	b292      	uxth	r2, r2
 80051ee:	0021      	movs	r1, r4
 80051f0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	21ff      	movs	r1, #255	; 0xff
 80051fa:	54d1      	strb	r1, [r2, r3]
      
  }
  return USBD_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	0018      	movs	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	b005      	add	sp, #20
 8005204:	bd90      	pop	{r4, r7, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	00000201 	.word	0x00000201

0800520c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2243      	movs	r2, #67	; 0x43
 8005218:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800521a:	4b02      	ldr	r3, [pc, #8]	; (8005224 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b002      	add	sp, #8
 8005222:	bd80      	pop	{r7, pc}
 8005224:	200001c0 	.word	0x200001c0

08005228 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2243      	movs	r2, #67	; 0x43
 8005234:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005236:	4b02      	ldr	r3, [pc, #8]	; (8005240 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b002      	add	sp, #8
 800523e:	bd80      	pop	{r7, pc}
 8005240:	2000017c 	.word	0x2000017c

08005244 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2243      	movs	r2, #67	; 0x43
 8005250:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005252:	4b02      	ldr	r3, [pc, #8]	; (800525c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b002      	add	sp, #8
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000204 	.word	0x20000204

08005260 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	220a      	movs	r2, #10
 800526c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800526e:	4b02      	ldr	r3, [pc, #8]	; (8005278 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000138 	.word	0x20000138

0800527c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005286:	230f      	movs	r3, #15
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	2202      	movs	r2, #2
 800528c:	701a      	strb	r2, [r3, #0]
  
  if(fops != NULL)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	2387      	movs	r3, #135	; 0x87
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;    
 800529e:	230f      	movs	r3, #15
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80052a6:	230f      	movs	r3, #15
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	781b      	ldrb	r3, [r3, #0]
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b004      	add	sp, #16
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	1dbb      	adds	r3, r7, #6
 80052c0:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	2386      	movs	r3, #134	; 0x86
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	58d3      	ldr	r3, [r2, r3]
 80052ca:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	2382      	movs	r3, #130	; 0x82
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;  
 80052d6:	1dbb      	adds	r3, r7, #6
 80052d8:	8819      	ldrh	r1, [r3, #0]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	2384      	movs	r3, #132	; 0x84
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;  
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	0018      	movs	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b006      	add	sp, #24
 80052ea:	bd80      	pop	{r7, pc}

080052ec <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	2386      	movs	r3, #134	; 0x86
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	58d3      	ldr	r3, [r2, r3]
 80052fe:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	2381      	movs	r3, #129	; 0x81
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}

08005314 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	2386      	movs	r3, #134	; 0x86
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	58d3      	ldr	r3, [r2, r3]
 8005324:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	2386      	movs	r3, #134	; 0x86
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	58d3      	ldr	r3, [r2, r3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01c      	beq.n	800536c <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	2385      	movs	r3, #133	; 0x85
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	58d3      	ldr	r3, [r2, r3]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d114      	bne.n	8005368 <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	2385      	movs	r3, #133	; 0x85
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	2101      	movs	r1, #1
 8005346:	50d1      	str	r1, [r2, r3]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	2382      	movs	r3, #130	; 0x82
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	58d1      	ldr	r1, [r2, r3]
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	2384      	movs	r3, #132	; 0x84
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev,
 8005358:	b29b      	uxth	r3, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	000a      	movs	r2, r1
 800535e:	2181      	movs	r1, #129	; 0x81
 8005360:	f005 fa05 	bl	800a76e <USBD_LL_Transmit>
      
      return USBD_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e002      	b.n	800536e <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	0018      	movs	r0, r3
 8005370:	46bd      	mov	sp, r7
 8005372:	b004      	add	sp, #16
 8005374:	bd80      	pop	{r7, pc}

08005376 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	2386      	movs	r3, #134	; 0x86
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	58d3      	ldr	r3, [r2, r3]
 8005386:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	2386      	movs	r3, #134	; 0x86
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	58d3      	ldr	r3, [r2, r3]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d019      	beq.n	80053c8 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7c1b      	ldrb	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <USBD_CDC_ReceivePacket+0x3c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	2381      	movs	r3, #129	; 0x81
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	58d2      	ldr	r2, [r2, r3]
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	2101      	movs	r1, #1
 80053ac:	f005 fa36 	bl	800a81c <USBD_LL_PrepareReceive>
 80053b0:	e008      	b.n	80053c4 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	2381      	movs	r3, #129	; 0x81
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	58d2      	ldr	r2, [r2, r3]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	2340      	movs	r3, #64	; 0x40
 80053be:	2101      	movs	r1, #1
 80053c0:	f005 fa2c 	bl	800a81c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	1dfb      	adds	r3, r7, #7
 80053de:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80053e6:	2302      	movs	r3, #2
 80053e8:	e020      	b.n	800542c <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	2385      	movs	r3, #133	; 0x85
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	58d3      	ldr	r3, [r2, r3]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	2385      	movs	r3, #133	; 0x85
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	2100      	movs	r1, #0
 80053fe:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	2384      	movs	r3, #132	; 0x84
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	23fe      	movs	r3, #254	; 0xfe
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	2101      	movs	r1, #1
 8005418:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1dfa      	adds	r2, r7, #7
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	0018      	movs	r0, r3
 8005426:	f004 ff43 	bl	800a2b0 <USBD_LL_Init>
  
  return USBD_OK; 
 800542a:	2300      	movs	r3, #0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}

08005434 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800543e:	230f      	movs	r3, #15
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	2385      	movs	r3, #133	; 0x85
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005456:	230f      	movs	r3, #15
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e003      	b.n	8005468 <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8005460:	230f      	movs	r3, #15
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	2202      	movs	r2, #2
 8005466:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 8005468:	230f      	movs	r3, #15
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	781b      	ldrb	r3, [r3, #0]
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}

08005476 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0018      	movs	r0, r3
 8005482:	f004 ff7b 	bl	800a37c <USBD_LL_Start>
  
  return USBD_OK;  
 8005486:	2300      	movs	r3, #0
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	b002      	add	sp, #8
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b002      	add	sp, #8
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	000a      	movs	r2, r1
 80054ac:	1cfb      	adds	r3, r7, #3
 80054ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80054b0:	230f      	movs	r3, #15
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	2202      	movs	r2, #2
 80054b6:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	2385      	movs	r3, #133	; 0x85
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	58d3      	ldr	r3, [r2, r3]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00f      	beq.n	80054e4 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	2385      	movs	r3, #133	; 0x85
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	58d3      	ldr	r3, [r2, r3]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	1cfa      	adds	r2, r7, #3
 80054d0:	7811      	ldrb	r1, [r2, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	0010      	movs	r0, r2
 80054d6:	4798      	blx	r3
 80054d8:	1e03      	subs	r3, r0, #0
 80054da:	d103      	bne.n	80054e4 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 80054dc:	230f      	movs	r3, #15
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 80054e4:	230f      	movs	r3, #15
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	781b      	ldrb	r3, [r3, #0]
}
 80054ea:	0018      	movs	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b004      	add	sp, #16
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	000a      	movs	r2, r1
 80054fc:	1cfb      	adds	r3, r7, #3
 80054fe:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	2385      	movs	r3, #133	; 0x85
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	58d3      	ldr	r3, [r2, r3]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	1cfa      	adds	r2, r7, #3
 800550c:	7811      	ldrb	r1, [r2, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	0010      	movs	r0, r2
 8005512:	4798      	blx	r3
  return USBD_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	0018      	movs	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	b002      	add	sp, #8
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2282      	movs	r2, #130	; 0x82
 800552e:	0092      	lsls	r2, r2, #2
 8005530:	4694      	mov	ip, r2
 8005532:	4463      	add	r3, ip
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f000 fe38 	bl	80061ae <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	23fa      	movs	r3, #250	; 0xfa
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	2101      	movs	r1, #1
 8005546:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <USBD_LL_SetupStage+0xb4>)
 800554c:	5a9b      	ldrh	r3, [r3, r2]
 800554e:	0019      	movs	r1, r3
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	23fc      	movs	r3, #252	; 0xfc
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	2382      	movs	r3, #130	; 0x82
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	001a      	movs	r2, r3
 8005562:	231f      	movs	r3, #31
 8005564:	4013      	ands	r3, r2
 8005566:	2b01      	cmp	r3, #1
 8005568:	d00d      	beq.n	8005586 <USBD_LL_SetupStage+0x66>
 800556a:	2b02      	cmp	r3, #2
 800556c:	d015      	beq.n	800559a <USBD_LL_SetupStage+0x7a>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11d      	bne.n	80055ae <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2282      	movs	r2, #130	; 0x82
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	189a      	adds	r2, r3, r2
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0011      	movs	r1, r2
 800557e:	0018      	movs	r0, r3
 8005580:	f000 f9c0 	bl	8005904 <USBD_StdDevReq>
    break;
 8005584:	e020      	b.n	80055c8 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2282      	movs	r2, #130	; 0x82
 800558a:	0092      	lsls	r2, r2, #2
 800558c:	189a      	adds	r2, r3, r2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	0011      	movs	r1, r2
 8005592:	0018      	movs	r0, r3
 8005594:	f000 fa0a 	bl	80059ac <USBD_StdItfReq>
    break;
 8005598:	e016      	b.n	80055c8 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2282      	movs	r2, #130	; 0x82
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	189a      	adds	r2, r3, r2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	0011      	movs	r1, r2
 80055a6:	0018      	movs	r0, r3
 80055a8:	f000 fa3f 	bl	8005a2a <USBD_StdEPReq>
    break;
 80055ac:	e00c      	b.n	80055c8 <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	2382      	movs	r3, #130	; 0x82
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
 80055b6:	227f      	movs	r2, #127	; 0x7f
 80055b8:	4393      	bics	r3, r2
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	0011      	movs	r1, r2
 80055c0:	0018      	movs	r0, r3
 80055c2:	f004 ffc2 	bl	800a54a <USBD_LL_StallEP>
    break;
 80055c6:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	0000020e 	.word	0x0000020e

080055d8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	230b      	movs	r3, #11
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	1c0a      	adds	r2, r1, #0
 80055e8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80055ea:	230b      	movs	r3, #11
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d13e      	bne.n	8005672 <USBD_LL_DataOutStage+0x9a>
  {
    pep = &pdev->ep_out[0];
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3305      	adds	r3, #5
 80055f8:	33ff      	adds	r3, #255	; 0xff
 80055fa:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	23fa      	movs	r3, #250	; 0xfa
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	58d3      	ldr	r3, [r2, r3]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d14c      	bne.n	80056a2 <USBD_LL_DataOutStage+0xca>
    {
      if(pep->rem_length > pep->maxpacket)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	429a      	cmp	r2, r3
 8005612:	d914      	bls.n	800563e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	1ad2      	subs	r2, r2, r3
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d900      	bls.n	8005630 <USBD_LL_DataOutStage+0x58>
 800562e:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8005630:	b292      	uxth	r2, r2
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 fed2 	bl	80063e0 <USBD_CtlContinueRx>
 800563c:	e031      	b.n	80056a2 <USBD_LL_DataOutStage+0xca>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	2385      	movs	r3, #133	; 0x85
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	58d3      	ldr	r3, [r2, r3]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00d      	beq.n	8005668 <USBD_LL_DataOutStage+0x90>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	23fe      	movs	r3, #254	; 0xfe
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005654:	2b03      	cmp	r3, #3
 8005656:	d107      	bne.n	8005668 <USBD_LL_DataOutStage+0x90>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	2385      	movs	r3, #133	; 0x85
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	58d3      	ldr	r3, [r2, r3]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	0010      	movs	r0, r2
 8005666:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	0018      	movs	r0, r3
 800566c:	f000 fecb 	bl	8006406 <USBD_CtlSendStatus>
 8005670:	e017      	b.n	80056a2 <USBD_LL_DataOutStage+0xca>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	2385      	movs	r3, #133	; 0x85
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	58d3      	ldr	r3, [r2, r3]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <USBD_LL_DataOutStage+0xca>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	23fe      	movs	r3, #254	; 0xfe
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 8005688:	2b03      	cmp	r3, #3
 800568a:	d10a      	bne.n	80056a2 <USBD_LL_DataOutStage+0xca>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	2385      	movs	r3, #133	; 0x85
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	58d3      	ldr	r3, [r2, r3]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	220b      	movs	r2, #11
 8005698:	18ba      	adds	r2, r7, r2
 800569a:	7811      	ldrb	r1, [r2, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	0010      	movs	r0, r2
 80056a0:	4798      	blx	r3
  }  
  return USBD_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b006      	add	sp, #24
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	230b      	movs	r3, #11
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	1c0a      	adds	r2, r1, #0
 80056bc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80056be:	230b      	movs	r3, #11
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d000      	beq.n	80056ca <USBD_LL_DataInStage+0x1e>
 80056c8:	e077      	b.n	80057ba <USBD_LL_DataInStage+0x10e>
  {
    pep = &pdev->ep_in[0];
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3314      	adds	r3, #20
 80056ce:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	23fa      	movs	r3, #250	; 0xfa
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	58d3      	ldr	r3, [r2, r3]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d15e      	bne.n	800579a <USBD_LL_DataInStage+0xee>
    {
      if(pep->rem_length > pep->maxpacket)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d915      	bls.n	8005714 <USBD_LL_DataInStage+0x68>
      {
        pep->rem_length -=  pep->maxpacket;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 fe36 	bl	8006372 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	2300      	movs	r3, #0
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	f005 f885 	bl	800a81c <USBD_LL_PrepareReceive>
 8005712:	e042      	b.n	800579a <USBD_LL_DataInStage+0xee>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	0019      	movs	r1, r3
 800571e:	0010      	movs	r0, r2
 8005720:	f7fa fd8a 	bl	8000238 <__aeabi_uidivmod>
 8005724:	1e0b      	subs	r3, r1, #0
 8005726:	d11f      	bne.n	8005768 <USBD_LL_DataInStage+0xbc>
           (pep->total_length >= pep->maxpacket) &&
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005730:	429a      	cmp	r2, r3
 8005732:	d319      	bcc.n	8005768 <USBD_LL_DataInStage+0xbc>
             (pep->total_length < pdev->ep0_data_len ))
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68f9      	ldr	r1, [r7, #12]
 800573a:	23fc      	movs	r3, #252	; 0xfc
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8005740:	429a      	cmp	r2, r3
 8005742:	d211      	bcs.n	8005768 <USBD_LL_DataInStage+0xbc>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	2100      	movs	r1, #0
 800574a:	0018      	movs	r0, r3
 800574c:	f000 fe11 	bl	8006372 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	23fc      	movs	r3, #252	; 0xfc
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	2100      	movs	r1, #0
 8005758:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	2300      	movs	r3, #0
 800575e:	2200      	movs	r2, #0
 8005760:	2100      	movs	r1, #0
 8005762:	f005 f85b 	bl	800a81c <USBD_LL_PrepareReceive>
 8005766:	e018      	b.n	800579a <USBD_LL_DataInStage+0xee>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	2385      	movs	r3, #133	; 0x85
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	58d3      	ldr	r3, [r2, r3]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00d      	beq.n	8005792 <USBD_LL_DataInStage+0xe6>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	23fe      	movs	r3, #254	; 0xfe
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800577e:	2b03      	cmp	r3, #3
 8005780:	d107      	bne.n	8005792 <USBD_LL_DataInStage+0xe6>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	2385      	movs	r3, #133	; 0x85
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	58d3      	ldr	r3, [r2, r3]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	0010      	movs	r0, r2
 8005790:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	0018      	movs	r0, r3
 8005796:	f000 fe4a 	bl	800642e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	5cd3      	ldrb	r3, [r2, r3]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d121      	bne.n	80057ea <USBD_LL_DataInStage+0x13e>
    {
      USBD_RunTestMode(pdev); 
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7ff fe71 	bl	8005490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	2100      	movs	r1, #0
 80057b6:	54d1      	strb	r1, [r2, r3]
 80057b8:	e017      	b.n	80057ea <USBD_LL_DataInStage+0x13e>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	2385      	movs	r3, #133	; 0x85
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	58d3      	ldr	r3, [r2, r3]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <USBD_LL_DataInStage+0x13e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	23fe      	movs	r3, #254	; 0xfe
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d10a      	bne.n	80057ea <USBD_LL_DataInStage+0x13e>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	2385      	movs	r3, #133	; 0x85
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	58d3      	ldr	r3, [r2, r3]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	220b      	movs	r2, #11
 80057e0:	18ba      	adds	r2, r7, r2
 80057e2:	7811      	ldrb	r1, [r2, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	0010      	movs	r0, r2
 80057e8:	4798      	blx	r3
  }  
  return USBD_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b006      	add	sp, #24
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	2340      	movs	r3, #64	; 0x40
 8005800:	2200      	movs	r2, #0
 8005802:	2100      	movs	r1, #0
 8005804:	f004 fdff 	bl	800a406 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	2388      	movs	r3, #136	; 0x88
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	2140      	movs	r1, #64	; 0x40
 8005810:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	2340      	movs	r3, #64	; 0x40
 8005816:	2200      	movs	r2, #0
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	f004 fdf4 	bl	800a406 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2240      	movs	r2, #64	; 0x40
 8005822:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	23fe      	movs	r3, #254	; 0xfe
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2101      	movs	r1, #1
 800582c:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	2386      	movs	r3, #134	; 0x86
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	58d3      	ldr	r3, [r2, r3]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	2385      	movs	r3, #133	; 0x85
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	58d3      	ldr	r3, [r2, r3]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	b2d9      	uxtb	r1, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	4790      	blx	r2
 
  
  return USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	0018      	movs	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	b002      	add	sp, #8
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	000a      	movs	r2, r1
 8005864:	1cfb      	adds	r3, r7, #3
 8005866:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	1cfa      	adds	r2, r7, #3
 800586c:	7812      	ldrb	r2, [r2, #0]
 800586e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	0018      	movs	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	b002      	add	sp, #8
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	23fe      	movs	r3, #254	; 0xfe
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	5cd1      	ldrb	r1, [r2, r3]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	23fe      	movs	r3, #254	; 0xfe
 800588e:	33ff      	adds	r3, #255	; 0xff
 8005890:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	23fe      	movs	r3, #254	; 0xfe
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2104      	movs	r1, #4
 800589a:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b002      	add	sp, #8
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	23fe      	movs	r3, #254	; 0xfe
 80058b2:	33ff      	adds	r3, #255	; 0xff
 80058b4:	5cd1      	ldrb	r1, [r2, r3]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	23fe      	movs	r3, #254	; 0xfe
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	23fe      	movs	r3, #254	; 0xfe
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d10e      	bne.n	80058fa <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	2385      	movs	r3, #133	; 0x85
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	58d3      	ldr	r3, [r2, r3]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	2385      	movs	r3, #133	; 0x85
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	58d3      	ldr	r3, [r2, r3]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	0010      	movs	r0, r2
 80058f8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	0018      	movs	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	b002      	add	sp, #8
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800590e:	230f      	movs	r3, #15
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b09      	cmp	r3, #9
 800591c:	d835      	bhi.n	800598a <USBD_StdDevReq+0x86>
 800591e:	009a      	lsls	r2, r3, #2
 8005920:	4b21      	ldr	r3, [pc, #132]	; (80059a8 <USBD_StdDevReq+0xa4>)
 8005922:	18d3      	adds	r3, r2, r3
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0011      	movs	r1, r2
 800592e:	0018      	movs	r0, r3
 8005930:	f000 f992 	bl	8005c58 <USBD_GetDescriptor>
    break;
 8005934:	e030      	b.n	8005998 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0011      	movs	r1, r2
 800593c:	0018      	movs	r0, r3
 800593e:	f000 fa95 	bl	8005e6c <USBD_SetAddress>
    break;
 8005942:	e029      	b.n	8005998 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	0011      	movs	r1, r2
 800594a:	0018      	movs	r0, r3
 800594c:	f000 fade 	bl	8005f0c <USBD_SetConfig>
    break;
 8005950:	e022      	b.n	8005998 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	0011      	movs	r1, r2
 8005958:	0018      	movs	r0, r3
 800595a:	f000 fb73 	bl	8006044 <USBD_GetConfig>
    break;
 800595e:	e01b      	b.n	8005998 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	0011      	movs	r1, r2
 8005966:	0018      	movs	r0, r3
 8005968:	f000 fba4 	bl	80060b4 <USBD_GetStatus>
    break;
 800596c:	e014      	b.n	8005998 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	0011      	movs	r1, r2
 8005974:	0018      	movs	r0, r3
 8005976:	f000 fbcc 	bl	8006112 <USBD_SetFeature>
    break;
 800597a:	e00d      	b.n	8005998 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	0011      	movs	r1, r2
 8005982:	0018      	movs	r0, r3
 8005984:	f000 fbe4 	bl	8006150 <USBD_ClrFeature>
    break;
 8005988:	e006      	b.n	8005998 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0011      	movs	r1, r2
 8005990:	0018      	movs	r0, r3
 8005992:	f000 fc47 	bl	8006224 <USBD_CtlError>
    break;
 8005996:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 8005998:	230f      	movs	r3, #15
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	781b      	ldrb	r3, [r3, #0]
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b004      	add	sp, #16
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	0800aea8 	.word	0x0800aea8

080059ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80059b6:	230f      	movs	r3, #15
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	23fe      	movs	r3, #254	; 0xfe
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	5cd3      	ldrb	r3, [r2, r3]
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d122      	bne.n	8005a10 <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	889b      	ldrh	r3, [r3, #4]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d816      	bhi.n	8005a02 <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	2385      	movs	r3, #133	; 0x85
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	58d3      	ldr	r3, [r2, r3]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	0010      	movs	r0, r2
 80059e4:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	88db      	ldrh	r3, [r3, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d117      	bne.n	8005a1e <USBD_StdItfReq+0x72>
 80059ee:	230f      	movs	r3, #15
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d112      	bne.n	8005a1e <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f000 fd03 	bl	8006406 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005a00:	e00d      	b.n	8005a1e <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	0011      	movs	r1, r2
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 fc0b 	bl	8006224 <USBD_CtlError>
    break;
 8005a0e:	e006      	b.n	8005a1e <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	0011      	movs	r1, r2
 8005a16:	0018      	movs	r0, r3
 8005a18:	f000 fc04 	bl	8006224 <USBD_CtlError>
    break;
 8005a1c:	e000      	b.n	8005a20 <USBD_StdItfReq+0x74>
    break;
 8005a1e:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	0018      	movs	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b004      	add	sp, #16
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005a34:	230f      	movs	r3, #15
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	889a      	ldrh	r2, [r3, #4]
 8005a40:	230e      	movs	r3, #14
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	2360      	movs	r3, #96	; 0x60
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d10a      	bne.n	8005a6a <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	2385      	movs	r3, #133	; 0x85
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	58d3      	ldr	r3, [r2, r3]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	0010      	movs	r0, r2
 8005a64:	4798      	blx	r3
    
    return USBD_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e0f1      	b.n	8005c4e <USBD_StdEPReq+0x224>
  }
  
  switch (req->bRequest) 
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d04e      	beq.n	8005b10 <USBD_StdEPReq+0xe6>
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d003      	beq.n	8005a7e <USBD_StdEPReq+0x54>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d100      	bne.n	8005a7c <USBD_StdEPReq+0x52>
 8005a7a:	e090      	b.n	8005b9e <USBD_StdEPReq+0x174>
      break;
    }
    break;
    
  default:
    break;
 8005a7c:	e0e4      	b.n	8005c48 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	23fe      	movs	r3, #254	; 0xfe
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	5cd3      	ldrb	r3, [r2, r3]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d002      	beq.n	8005a90 <USBD_StdEPReq+0x66>
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d013      	beq.n	8005ab6 <USBD_StdEPReq+0x8c>
 8005a8e:	e036      	b.n	8005afe <USBD_StdEPReq+0xd4>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005a90:	230e      	movs	r3, #14
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d038      	beq.n	8005b0c <USBD_StdEPReq+0xe2>
 8005a9a:	230e      	movs	r3, #14
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b80      	cmp	r3, #128	; 0x80
 8005aa2:	d033      	beq.n	8005b0c <USBD_StdEPReq+0xe2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005aa4:	230e      	movs	r3, #14
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	0011      	movs	r1, r2
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f004 fd4b 	bl	800a54a <USBD_LL_StallEP>
      break;	
 8005ab4:	e02a      	b.n	8005b0c <USBD_StdEPReq+0xe2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	885b      	ldrh	r3, [r3, #2]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d111      	bne.n	8005ae2 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005abe:	230e      	movs	r3, #14
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00c      	beq.n	8005ae2 <USBD_StdEPReq+0xb8>
 8005ac8:	230e      	movs	r3, #14
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d007      	beq.n	8005ae2 <USBD_StdEPReq+0xb8>
          USBD_LL_StallEP(pdev , ep_addr);
 8005ad2:	230e      	movs	r3, #14
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	0011      	movs	r1, r2
 8005adc:	0018      	movs	r0, r3
 8005ade:	f004 fd34 	bl	800a54a <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	2385      	movs	r3, #133	; 0x85
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	58d3      	ldr	r3, [r2, r3]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	0010      	movs	r0, r2
 8005af2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 fc85 	bl	8006406 <USBD_CtlSendStatus>
      break;
 8005afc:	e007      	b.n	8005b0e <USBD_StdEPReq+0xe4>
      USBD_CtlError(pdev , req);
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	0011      	movs	r1, r2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 fb8d 	bl	8006224 <USBD_CtlError>
      break;    
 8005b0a:	e000      	b.n	8005b0e <USBD_StdEPReq+0xe4>
      break;	
 8005b0c:	46c0      	nop			; (mov r8, r8)
    break;
 8005b0e:	e09b      	b.n	8005c48 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	23fe      	movs	r3, #254	; 0xfe
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	5cd3      	ldrb	r3, [r2, r3]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d002      	beq.n	8005b22 <USBD_StdEPReq+0xf8>
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d013      	beq.n	8005b48 <USBD_StdEPReq+0x11e>
 8005b20:	e032      	b.n	8005b88 <USBD_StdEPReq+0x15e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005b22:	230e      	movs	r3, #14
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d034      	beq.n	8005b96 <USBD_StdEPReq+0x16c>
 8005b2c:	230e      	movs	r3, #14
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d02f      	beq.n	8005b96 <USBD_StdEPReq+0x16c>
        USBD_LL_StallEP(pdev , ep_addr);
 8005b36:	230e      	movs	r3, #14
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0011      	movs	r1, r2
 8005b40:	0018      	movs	r0, r3
 8005b42:	f004 fd02 	bl	800a54a <USBD_LL_StallEP>
      break;	
 8005b46:	e026      	b.n	8005b96 <USBD_StdEPReq+0x16c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	885b      	ldrh	r3, [r3, #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d124      	bne.n	8005b9a <USBD_StdEPReq+0x170>
        if ((ep_addr & 0x7F) != 0x00) 
 8005b50:	230e      	movs	r3, #14
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	227f      	movs	r2, #127	; 0x7f
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d010      	beq.n	8005b7e <USBD_StdEPReq+0x154>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005b5c:	230e      	movs	r3, #14
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	781a      	ldrb	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	0011      	movs	r1, r2
 8005b66:	0018      	movs	r0, r3
 8005b68:	f004 fd3a 	bl	800a5e0 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	2385      	movs	r3, #133	; 0x85
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	58d3      	ldr	r3, [r2, r3]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	0010      	movs	r0, r2
 8005b7c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 fc40 	bl	8006406 <USBD_CtlSendStatus>
      break;
 8005b86:	e008      	b.n	8005b9a <USBD_StdEPReq+0x170>
      USBD_CtlError(pdev , req);
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0011      	movs	r1, r2
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f000 fb48 	bl	8006224 <USBD_CtlError>
      break;    
 8005b94:	e002      	b.n	8005b9c <USBD_StdEPReq+0x172>
      break;	
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	e056      	b.n	8005c48 <USBD_StdEPReq+0x21e>
      break;
 8005b9a:	46c0      	nop			; (mov r8, r8)
    break;
 8005b9c:	e054      	b.n	8005c48 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	23fe      	movs	r3, #254	; 0xfe
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	5cd3      	ldrb	r3, [r2, r3]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d002      	beq.n	8005bb0 <USBD_StdEPReq+0x186>
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d00f      	beq.n	8005bce <USBD_StdEPReq+0x1a4>
 8005bae:	e042      	b.n	8005c36 <USBD_StdEPReq+0x20c>
      if ((ep_addr & 0x7F) != 0x00) 
 8005bb0:	230e      	movs	r3, #14
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	227f      	movs	r2, #127	; 0x7f
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d043      	beq.n	8005c44 <USBD_StdEPReq+0x21a>
        USBD_LL_StallEP(pdev , ep_addr);
 8005bbc:	230e      	movs	r3, #14
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0011      	movs	r1, r2
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f004 fcbf 	bl	800a54a <USBD_LL_StallEP>
      break;	
 8005bcc:	e03a      	b.n	8005c44 <USBD_StdEPReq+0x21a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005bce:	230e      	movs	r3, #14
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da0a      	bge.n	8005bf0 <USBD_StdEPReq+0x1c6>
 8005bda:	230e      	movs	r3, #14
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	227f      	movs	r2, #127	; 0x7f
 8005be2:	4013      	ands	r3, r2
 8005be4:	3301      	adds	r3, #1
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	18d3      	adds	r3, r2, r3
 8005bec:	3304      	adds	r3, #4
 8005bee:	e009      	b.n	8005c04 <USBD_StdEPReq+0x1da>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005bf0:	230e      	movs	r3, #14
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	227f      	movs	r2, #127	; 0x7f
 8005bf8:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005bfa:	3310      	adds	r3, #16
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	18d3      	adds	r3, r2, r3
 8005c02:	3304      	adds	r3, #4
 8005c04:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005c06:	230e      	movs	r3, #14
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f004 fd30 	bl	800a676 <USBD_LL_IsStallEP>
 8005c16:	1e03      	subs	r3, r0, #0
 8005c18:	d003      	beq.n	8005c22 <USBD_StdEPReq+0x1f8>
        pep->status = 0x0001;     
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e002      	b.n	8005c28 <USBD_StdEPReq+0x1fe>
        pep->status = 0x0000;  
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005c28:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 fb7f 	bl	8006332 <USBD_CtlSendData>
      break;
 8005c34:	e007      	b.n	8005c46 <USBD_StdEPReq+0x21c>
      USBD_CtlError(pdev , req);
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 faf1 	bl	8006224 <USBD_CtlError>
      break;
 8005c42:	e000      	b.n	8005c46 <USBD_StdEPReq+0x21c>
      break;	
 8005c44:	46c0      	nop			; (mov r8, r8)
    break;
 8005c46:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8005c48:	230f      	movs	r3, #15
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	781b      	ldrb	r3, [r3, #0]
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b004      	add	sp, #16
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	885b      	ldrh	r3, [r3, #2]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b07      	cmp	r3, #7
 8005c6c:	d900      	bls.n	8005c70 <USBD_GetDescriptor+0x18>
 8005c6e:	e0ce      	b.n	8005e0e <USBD_GetDescriptor+0x1b6>
 8005c70:	009a      	lsls	r2, r3, #2
 8005c72:	4b7c      	ldr	r3, [pc, #496]	; (8005e64 <USBD_GetDescriptor+0x20c>)
 8005c74:	18d3      	adds	r3, r2, r3
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	2384      	movs	r3, #132	; 0x84
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	58d3      	ldr	r3, [r2, r3]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	7c12      	ldrb	r2, [r2, #16]
 8005c88:	210a      	movs	r1, #10
 8005c8a:	1879      	adds	r1, r7, r1
 8005c8c:	0010      	movs	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	0003      	movs	r3, r0
 8005c92:	60fb      	str	r3, [r7, #12]
    break;
 8005c94:	e0c2      	b.n	8005e1c <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	7c1b      	ldrb	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10f      	bne.n	8005cbe <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	2385      	movs	r3, #133	; 0x85
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	58d3      	ldr	r3, [r2, r3]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	220a      	movs	r2, #10
 8005caa:	18ba      	adds	r2, r7, r2
 8005cac:	0010      	movs	r0, r2
 8005cae:	4798      	blx	r3
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	2202      	movs	r2, #2
 8005cba:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005cbc:	e0ae      	b.n	8005e1c <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	2385      	movs	r3, #133	; 0x85
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	58d3      	ldr	r3, [r2, r3]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	220a      	movs	r2, #10
 8005cca:	18ba      	adds	r2, r7, r2
 8005ccc:	0010      	movs	r0, r2
 8005cce:	4798      	blx	r3
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	2202      	movs	r2, #2
 8005cda:	701a      	strb	r2, [r3, #0]
    break;
 8005cdc:	e09e      	b.n	8005e1c <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b05      	cmp	r3, #5
 8005ce6:	d858      	bhi.n	8005d9a <USBD_GetDescriptor+0x142>
 8005ce8:	009a      	lsls	r2, r3, #2
 8005cea:	4b5f      	ldr	r3, [pc, #380]	; (8005e68 <USBD_GetDescriptor+0x210>)
 8005cec:	18d3      	adds	r3, r2, r3
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	2384      	movs	r3, #132	; 0x84
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	58d3      	ldr	r3, [r2, r3]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	7c12      	ldrb	r2, [r2, #16]
 8005d00:	210a      	movs	r1, #10
 8005d02:	1879      	adds	r1, r7, r1
 8005d04:	0010      	movs	r0, r2
 8005d06:	4798      	blx	r3
 8005d08:	0003      	movs	r3, r0
 8005d0a:	60fb      	str	r3, [r7, #12]
      break;
 8005d0c:	e04c      	b.n	8005da8 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	2384      	movs	r3, #132	; 0x84
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	58d3      	ldr	r3, [r2, r3]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	7c12      	ldrb	r2, [r2, #16]
 8005d1c:	210a      	movs	r1, #10
 8005d1e:	1879      	adds	r1, r7, r1
 8005d20:	0010      	movs	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	0003      	movs	r3, r0
 8005d26:	60fb      	str	r3, [r7, #12]
      break;
 8005d28:	e03e      	b.n	8005da8 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	2384      	movs	r3, #132	; 0x84
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	58d3      	ldr	r3, [r2, r3]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	7c12      	ldrb	r2, [r2, #16]
 8005d38:	210a      	movs	r1, #10
 8005d3a:	1879      	adds	r1, r7, r1
 8005d3c:	0010      	movs	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	0003      	movs	r3, r0
 8005d42:	60fb      	str	r3, [r7, #12]
      break;
 8005d44:	e030      	b.n	8005da8 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	2384      	movs	r3, #132	; 0x84
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	58d3      	ldr	r3, [r2, r3]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	7c12      	ldrb	r2, [r2, #16]
 8005d54:	210a      	movs	r1, #10
 8005d56:	1879      	adds	r1, r7, r1
 8005d58:	0010      	movs	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	60fb      	str	r3, [r7, #12]
      break;
 8005d60:	e022      	b.n	8005da8 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	2384      	movs	r3, #132	; 0x84
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	58d3      	ldr	r3, [r2, r3]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	7c12      	ldrb	r2, [r2, #16]
 8005d70:	210a      	movs	r1, #10
 8005d72:	1879      	adds	r1, r7, r1
 8005d74:	0010      	movs	r0, r2
 8005d76:	4798      	blx	r3
 8005d78:	0003      	movs	r3, r0
 8005d7a:	60fb      	str	r3, [r7, #12]
      break;
 8005d7c:	e014      	b.n	8005da8 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	2384      	movs	r3, #132	; 0x84
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	58d3      	ldr	r3, [r2, r3]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	7c12      	ldrb	r2, [r2, #16]
 8005d8c:	210a      	movs	r1, #10
 8005d8e:	1879      	adds	r1, r7, r1
 8005d90:	0010      	movs	r0, r2
 8005d92:	4798      	blx	r3
 8005d94:	0003      	movs	r3, r0
 8005d96:	60fb      	str	r3, [r7, #12]
      break;
 8005d98:	e006      	b.n	8005da8 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	0011      	movs	r1, r2
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 fa3f 	bl	8006224 <USBD_CtlError>
      return;
 8005da6:	e05a      	b.n	8005e5e <USBD_GetDescriptor+0x206>
#endif   
    }
    break;
 8005da8:	e038      	b.n	8005e1c <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7c1b      	ldrb	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	2385      	movs	r3, #133	; 0x85
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	58d3      	ldr	r3, [r2, r3]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	18ba      	adds	r2, r7, r2
 8005dc0:	0010      	movs	r0, r2
 8005dc2:	4798      	blx	r3
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	60fb      	str	r3, [r7, #12]
      break;
 8005dc8:	e028      	b.n	8005e1c <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	0011      	movs	r1, r2
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f000 fa27 	bl	8006224 <USBD_CtlError>
      return;
 8005dd6:	e042      	b.n	8005e5e <USBD_GetDescriptor+0x206>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	7c1b      	ldrb	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10f      	bne.n	8005e00 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	2385      	movs	r3, #133	; 0x85
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	58d3      	ldr	r3, [r2, r3]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	220a      	movs	r2, #10
 8005dec:	18ba      	adds	r2, r7, r2
 8005dee:	0010      	movs	r0, r2
 8005df0:	4798      	blx	r3
 8005df2:	0003      	movs	r3, r0
 8005df4:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	2207      	movs	r2, #7
 8005dfc:	701a      	strb	r2, [r3, #0]
      break; 
 8005dfe:	e00d      	b.n	8005e1c <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0011      	movs	r1, r2
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 fa0c 	bl	8006224 <USBD_CtlError>
      return;
 8005e0c:	e027      	b.n	8005e5e <USBD_GetDescriptor+0x206>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f000 fa05 	bl	8006224 <USBD_CtlError>
    return;
 8005e1a:	e020      	b.n	8005e5e <USBD_GetDescriptor+0x206>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01b      	beq.n	8005e5e <USBD_GetDescriptor+0x206>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	88db      	ldrh	r3, [r3, #6]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <USBD_GetDescriptor+0x206>
  {
    
    len = MIN(len , req->wLength);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	88da      	ldrh	r2, [r3, #6]
 8005e32:	230a      	movs	r3, #10
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	1c18      	adds	r0, r3, #0
 8005e3a:	1c11      	adds	r1, r2, #0
 8005e3c:	b28a      	uxth	r2, r1
 8005e3e:	b283      	uxth	r3, r0
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d900      	bls.n	8005e46 <USBD_GetDescriptor+0x1ee>
 8005e44:	1c01      	adds	r1, r0, #0
 8005e46:	b28a      	uxth	r2, r1
 8005e48:	230a      	movs	r3, #10
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8005e4e:	230a      	movs	r3, #10
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	881a      	ldrh	r2, [r3, #0]
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 fa6a 	bl	8006332 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b004      	add	sp, #16
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	0800aed0 	.word	0x0800aed0
 8005e68:	0800aef0 	.word	0x0800aef0

08005e6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	889b      	ldrh	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d13c      	bne.n	8005ef8 <USBD_SetAddress+0x8c>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	88db      	ldrh	r3, [r3, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d138      	bne.n	8005ef8 <USBD_SetAddress+0x8c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	885b      	ldrh	r3, [r3, #2]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	230f      	movs	r3, #15
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	217f      	movs	r1, #127	; 0x7f
 8005e92:	400a      	ands	r2, r1
 8005e94:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	23fe      	movs	r3, #254	; 0xfe
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	5cd3      	ldrb	r3, [r2, r3]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d106      	bne.n	8005eb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	0011      	movs	r1, r2
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f000 f9bb 	bl	8006224 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005eae:	e029      	b.n	8005f04 <USBD_SetAddress+0x98>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	230f      	movs	r3, #15
 8005eb4:	18f9      	adds	r1, r7, r3
 8005eb6:	23ff      	movs	r3, #255	; 0xff
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	7809      	ldrb	r1, [r1, #0]
 8005ebc:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005ebe:	230f      	movs	r3, #15
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	0011      	movs	r1, r2
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f004 fc05 	bl	800a6d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 fa98 	bl	8006406 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005ed6:	230f      	movs	r3, #15
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <USBD_SetAddress+0x80>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	23fe      	movs	r3, #254	; 0xfe
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005eea:	e00b      	b.n	8005f04 <USBD_SetAddress+0x98>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	23fe      	movs	r3, #254	; 0xfe
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005ef6:	e005      	b.n	8005f04 <USBD_SetAddress+0x98>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	0011      	movs	r1, r2
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 f990 	bl	8006224 <USBD_CtlError>
  } 
}
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	885b      	ldrh	r3, [r3, #2]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	4b48      	ldr	r3, [pc, #288]	; (8006040 <USBD_SetConfig+0x134>)
 8005f1e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005f20:	4b47      	ldr	r3, [pc, #284]	; (8006040 <USBD_SetConfig+0x134>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d906      	bls.n	8005f36 <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0011      	movs	r1, r2
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 f978 	bl	8006224 <USBD_CtlError>
 8005f34:	e081      	b.n	800603a <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	23fe      	movs	r3, #254	; 0xfe
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	5cd3      	ldrb	r3, [r2, r3]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d002      	beq.n	8005f48 <USBD_SetConfig+0x3c>
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d029      	beq.n	8005f9a <USBD_SetConfig+0x8e>
 8005f46:	e071      	b.n	800602c <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005f48:	4b3d      	ldr	r3, [pc, #244]	; (8006040 <USBD_SetConfig+0x134>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01f      	beq.n	8005f90 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005f50:	4b3b      	ldr	r3, [pc, #236]	; (8006040 <USBD_SetConfig+0x134>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	001a      	movs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	23fe      	movs	r3, #254	; 0xfe
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2103      	movs	r1, #3
 8005f62:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <USBD_SetConfig+0x134>)
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	0011      	movs	r1, r2
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7ff fa98 	bl	80054a2 <USBD_SetClassConfig>
 8005f72:	0003      	movs	r3, r0
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d106      	bne.n	8005f86 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0011      	movs	r1, r2
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f000 f950 	bl	8006224 <USBD_CtlError>
          return;
 8005f84:	e059      	b.n	800603a <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 fa3c 	bl	8006406 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8005f8e:	e054      	b.n	800603a <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f000 fa37 	bl	8006406 <USBD_CtlSendStatus>
      break;
 8005f98:	e04f      	b.n	800603a <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005f9a:	4b29      	ldr	r3, [pc, #164]	; (8006040 <USBD_SetConfig+0x134>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d115      	bne.n	8005fce <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	23fe      	movs	r3, #254	; 0xfe
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2102      	movs	r1, #2
 8005faa:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 8005fac:	4b24      	ldr	r3, [pc, #144]	; (8006040 <USBD_SetConfig+0x134>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005fb6:	4b22      	ldr	r3, [pc, #136]	; (8006040 <USBD_SetConfig+0x134>)
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0011      	movs	r1, r2
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f7ff fa97 	bl	80054f2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 fa1d 	bl	8006406 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005fcc:	e035      	b.n	800603a <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 8005fce:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <USBD_SetConfig+0x134>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	001a      	movs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d022      	beq.n	8006022 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0011      	movs	r1, r2
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7ff fa83 	bl	80054f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005fec:	4b14      	ldr	r3, [pc, #80]	; (8006040 <USBD_SetConfig+0x134>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <USBD_SetConfig+0x134>)
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	0011      	movs	r1, r2
 8005ffe:	0018      	movs	r0, r3
 8006000:	f7ff fa4f 	bl	80054a2 <USBD_SetClassConfig>
 8006004:	0003      	movs	r3, r0
 8006006:	2b02      	cmp	r3, #2
 8006008:	d106      	bne.n	8006018 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0011      	movs	r1, r2
 8006010:	0018      	movs	r0, r3
 8006012:	f000 f907 	bl	8006224 <USBD_CtlError>
          return;
 8006016:	e010      	b.n	800603a <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f9f3 	bl	8006406 <USBD_CtlSendStatus>
      break;
 8006020:	e00b      	b.n	800603a <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	0018      	movs	r0, r3
 8006026:	f000 f9ee 	bl	8006406 <USBD_CtlSendStatus>
      break;
 800602a:	e006      	b.n	800603a <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	0011      	movs	r1, r2
 8006032:	0018      	movs	r0, r3
 8006034:	f000 f8f6 	bl	8006224 <USBD_CtlError>
      break;
 8006038:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20000365 	.word	0x20000365

08006044 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	88db      	ldrh	r3, [r3, #6]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d006      	beq.n	8006064 <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0011      	movs	r1, r2
 800605c:	0018      	movs	r0, r3
 800605e:	f000 f8e1 	bl	8006224 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006062:	e023      	b.n	80060ac <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	23fe      	movs	r3, #254	; 0xfe
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d002      	beq.n	8006076 <USBD_GetConfig+0x32>
 8006070:	2b03      	cmp	r3, #3
 8006072:	d00c      	beq.n	800608e <USBD_GetConfig+0x4a>
 8006074:	e013      	b.n	800609e <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3308      	adds	r3, #8
 8006080:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	0018      	movs	r0, r3
 8006088:	f000 f953 	bl	8006332 <USBD_CtlSendData>
      break;
 800608c:	e00e      	b.n	80060ac <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	0018      	movs	r0, r3
 8006098:	f000 f94b 	bl	8006332 <USBD_CtlSendData>
      break;
 800609c:	e006      	b.n	80060ac <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	0011      	movs	r1, r2
 80060a4:	0018      	movs	r0, r3
 80060a6:	f000 f8bd 	bl	8006224 <USBD_CtlError>
      break;
 80060aa:	46c0      	nop			; (mov r8, r8)
}
 80060ac:	46c0      	nop			; (mov r8, r8)
 80060ae:	46bd      	mov	sp, r7
 80060b0:	b002      	add	sp, #8
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	23fe      	movs	r3, #254	; 0xfe
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	5cd3      	ldrb	r3, [r2, r3]
 80060c6:	3b02      	subs	r3, #2
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d817      	bhi.n	80060fc <USBD_GetStatus+0x48>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	2381      	movs	r3, #129	; 0x81
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	58d3      	ldr	r3, [r2, r3]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2202      	movs	r2, #2
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	330c      	adds	r3, #12
 80060ee:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 f91c 	bl	8006332 <USBD_CtlSendData>
                      2);
    break;
 80060fa:	e006      	b.n	800610a <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0011      	movs	r1, r2
 8006102:	0018      	movs	r0, r3
 8006104:	f000 f88e 	bl	8006224 <USBD_CtlError>
    break;
 8006108:	46c0      	nop			; (mov r8, r8)
  }
}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	46bd      	mov	sp, r7
 800610e:	b002      	add	sp, #8
 8006110:	bd80      	pop	{r7, pc}

08006112 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	885b      	ldrh	r3, [r3, #2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d111      	bne.n	8006148 <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	2381      	movs	r3, #129	; 0x81
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	2101      	movs	r1, #1
 800612c:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	2385      	movs	r3, #133	; 0x85
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	58d3      	ldr	r3, [r2, r3]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	0010      	movs	r0, r2
 800613e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	0018      	movs	r0, r3
 8006144:	f000 f95f 	bl	8006406 <USBD_CtlSendStatus>
  }

}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b002      	add	sp, #8
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	23fe      	movs	r3, #254	; 0xfe
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	5cd3      	ldrb	r3, [r2, r3]
 8006162:	3b02      	subs	r3, #2
 8006164:	2b01      	cmp	r3, #1
 8006166:	d816      	bhi.n	8006196 <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	885b      	ldrh	r3, [r3, #2]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d119      	bne.n	80061a4 <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	2381      	movs	r3, #129	; 0x81
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	2100      	movs	r1, #0
 8006178:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	2385      	movs	r3, #133	; 0x85
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	58d3      	ldr	r3, [r2, r3]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	0010      	movs	r0, r2
 800618a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	0018      	movs	r0, r3
 8006190:	f000 f939 	bl	8006406 <USBD_CtlSendStatus>
    }
    break;
 8006194:	e006      	b.n	80061a4 <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0011      	movs	r1, r2
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f841 	bl	8006224 <USBD_CtlError>
    break;
 80061a2:	e000      	b.n	80061a6 <USBD_ClrFeature+0x56>
    break;
 80061a4:	46c0      	nop			; (mov r8, r8)
  }
}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b002      	add	sp, #8
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	785a      	ldrb	r2, [r3, #1]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	3302      	adds	r3, #2
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	3303      	adds	r3, #3
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	b29b      	uxth	r3, r3
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	b29a      	uxth	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	3304      	adds	r3, #4
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	3305      	adds	r3, #5
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	18d3      	adds	r3, r2, r3
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	3306      	adds	r3, #6
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b29a      	uxth	r2, r3
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	3307      	adds	r3, #7
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	b29b      	uxth	r3, r3
 8006214:	18d3      	adds	r3, r2, r3
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	80da      	strh	r2, [r3, #6]

}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2180      	movs	r1, #128	; 0x80
 8006232:	0018      	movs	r0, r3
 8006234:	f004 f989 	bl	800a54a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2100      	movs	r1, #0
 800623c:	0018      	movs	r0, r3
 800623e:	f004 f984 	bl	800a54a <USBD_LL_StallEP>
}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b002      	add	sp, #8
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8006256:	2317      	movs	r3, #23
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d044      	beq.n	80062ee <USBD_GetString+0xa4>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	0018      	movs	r0, r3
 8006268:	f000 f845 	bl	80062f6 <USBD_GetLen>
 800626c:	0003      	movs	r3, r0
 800626e:	3301      	adds	r3, #1
 8006270:	b29b      	uxth	r3, r3
 8006272:	18db      	adds	r3, r3, r3
 8006274:	b29a      	uxth	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800627a:	2317      	movs	r3, #23
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2217      	movs	r2, #23
 8006282:	18ba      	adds	r2, r7, r2
 8006284:	1c59      	adds	r1, r3, #1
 8006286:	7011      	strb	r1, [r2, #0]
 8006288:	001a      	movs	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	189b      	adds	r3, r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8006296:	2317      	movs	r3, #23
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2217      	movs	r2, #23
 800629e:	18ba      	adds	r2, r7, r2
 80062a0:	1c59      	adds	r1, r3, #1
 80062a2:	7011      	strb	r1, [r2, #0]
 80062a4:	001a      	movs	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	189b      	adds	r3, r3, r2
 80062aa:	2203      	movs	r2, #3
 80062ac:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80062ae:	e01a      	b.n	80062e6 <USBD_GetString+0x9c>
    {
      unicode[idx++] = *desc++;
 80062b0:	2317      	movs	r3, #23
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2217      	movs	r2, #23
 80062b8:	18ba      	adds	r2, r7, r2
 80062ba:	1c59      	adds	r1, r3, #1
 80062bc:	7011      	strb	r1, [r2, #0]
 80062be:	001a      	movs	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	189a      	adds	r2, r3, r2
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	60f9      	str	r1, [r7, #12]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80062ce:	2317      	movs	r3, #23
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2217      	movs	r2, #23
 80062d6:	18ba      	adds	r2, r7, r2
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	7011      	strb	r1, [r2, #0]
 80062dc:	001a      	movs	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	189b      	adds	r3, r3, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e0      	bne.n	80062b0 <USBD_GetString+0x66>
    }
  } 
}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b006      	add	sp, #24
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80062fe:	230f      	movs	r3, #15
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 8006306:	e009      	b.n	800631c <USBD_GetLen+0x26>
    {
        len++;
 8006308:	230f      	movs	r3, #15
 800630a:	18fb      	adds	r3, r7, r3
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	230f      	movs	r3, #15
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	3201      	adds	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
        buf++;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3301      	adds	r3, #1
 800631a:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f1      	bne.n	8006308 <USBD_GetLen+0x12>
    }

    return len;
 8006324:	230f      	movs	r3, #15
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	781b      	ldrb	r3, [r3, #0]
}
 800632a:	0018      	movs	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	b004      	add	sp, #16
 8006330:	bd80      	pop	{r7, pc}

08006332 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	23fa      	movs	r3, #250	; 0xfa
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	2102      	movs	r1, #2
 8006348:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800634a:	1dbb      	adds	r3, r7, #6
 800634c:	881a      	ldrh	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006352:	1dbb      	adds	r3, r7, #6
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800635a:	1dbb      	adds	r3, r7, #6
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	2100      	movs	r1, #0
 8006364:	f004 fa03 	bl	800a76e <USBD_LL_Transmit>
  
  return USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	0018      	movs	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	1dbb      	adds	r3, r7, #6
 800637e:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8006380:	1dbb      	adds	r3, r7, #6
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	2100      	movs	r1, #0
 800638a:	f004 f9f0 	bl	800a76e <USBD_LL_Transmit>
  
  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b004      	add	sp, #16
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	1dbb      	adds	r3, r7, #6
 80063a4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	23fa      	movs	r3, #250	; 0xfa
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	2103      	movs	r1, #3
 80063ae:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80063b0:	1dbb      	adds	r3, r7, #6
 80063b2:	8819      	ldrh	r1, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	2384      	movs	r3, #132	; 0x84
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80063bc:	1dbb      	adds	r3, r7, #6
 80063be:	8819      	ldrh	r1, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	2386      	movs	r3, #134	; 0x86
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	50d1      	str	r1, [r2, r3]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80063c8:	1dbb      	adds	r3, r7, #6
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	2100      	movs	r1, #0
 80063d2:	f004 fa23 	bl	800a81c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b004      	add	sp, #16
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	1dbb      	adds	r3, r7, #6
 80063ec:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 80063ee:	1dbb      	adds	r3, r7, #6
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	2100      	movs	r1, #0
 80063f8:	f004 fa10 	bl	800a81c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	0018      	movs	r0, r3
 8006400:	46bd      	mov	sp, r7
 8006402:	b004      	add	sp, #16
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	23fa      	movs	r3, #250	; 0xfa
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	2104      	movs	r1, #4
 8006416:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	2300      	movs	r3, #0
 800641c:	2200      	movs	r2, #0
 800641e:	2100      	movs	r1, #0
 8006420:	f004 f9a5 	bl	800a76e <USBD_LL_Transmit>
  
  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b002      	add	sp, #8
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	23fa      	movs	r3, #250	; 0xfa
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	2105      	movs	r1, #5
 800643e:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	2300      	movs	r3, #0
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	f004 f9e8 	bl	800a81c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	0018      	movs	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	b002      	add	sp, #8
 8006454:	bd80      	pop	{r7, pc}

08006456 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	0002      	movs	r2, r0
 800645e:	1dbb      	adds	r3, r7, #6
 8006460:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006466:	1dbb      	adds	r3, r7, #6
 8006468:	2200      	movs	r2, #0
 800646a:	5e9b      	ldrsh	r3, [r3, r2]
 800646c:	2b84      	cmp	r3, #132	; 0x84
 800646e:	d006      	beq.n	800647e <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8006470:	1dbb      	adds	r3, r7, #6
 8006472:	2200      	movs	r2, #0
 8006474:	5e9a      	ldrsh	r2, [r3, r2]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	18d3      	adds	r3, r2, r3
 800647a:	3303      	adds	r3, #3
 800647c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	0018      	movs	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	b004      	add	sp, #16
 8006486:	bd80      	pop	{r7, pc}

08006488 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	607b      	str	r3, [r7, #4]
  return(result);
 8006494:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	4193      	sbcs	r3, r2
 800649a:	b2db      	uxtb	r3, r3
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	b002      	add	sp, #8
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064a8:	f001 fa02 	bl	80078b0 <vTaskStartScheduler>
  
  return osOK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685c      	ldr	r4, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064ca:	b29e      	uxth	r6, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2208      	movs	r2, #8
 80064d0:	5e9b      	ldrsh	r3, [r3, r2]
 80064d2:	0018      	movs	r0, r3
 80064d4:	f7ff ffbf 	bl	8006456 <makeFreeRtosPriority>
 80064d8:	0001      	movs	r1, r0
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	230c      	movs	r3, #12
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	9100      	str	r1, [sp, #0]
 80064e4:	0013      	movs	r3, r2
 80064e6:	0032      	movs	r2, r6
 80064e8:	0029      	movs	r1, r5
 80064ea:	0020      	movs	r0, r4
 80064ec:	f001 f893 	bl	8007616 <xTaskCreate>
 80064f0:	0003      	movs	r3, r0
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d001      	beq.n	80064fa <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80064fa:	68fb      	ldr	r3, [r7, #12]
}
 80064fc:	0018      	movs	r0, r3
 80064fe:	46bd      	mov	sp, r7
 8006500:	b005      	add	sp, #20
 8006502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006504 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <osDelay+0x16>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	e000      	b.n	800651c <osDelay+0x18>
 800651a:	2301      	movs	r3, #1
 800651c:	0018      	movs	r0, r3
 800651e:	f001 f9a1 	bl	8007864 <vTaskDelay>
  
  return osOK;
 8006522:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006524:	0018      	movs	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	b004      	add	sp, #16
 800652a:	bd80      	pop	{r7, pc}

0800652c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	0019      	movs	r1, r3
 8006542:	f000 fc77 	bl	8006e34 <xQueueGenericCreate>
 8006546:	0003      	movs	r3, r0
#endif
}
 8006548:	0018      	movs	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	b002      	add	sp, #8
 800654e:	bd80      	pop	{r7, pc}

08006550 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800655c:	2300      	movs	r3, #0
 800655e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <osMessagePut+0x1e>
    ticks = 1;
 800656a:	2301      	movs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800656e:	f7ff ff8b 	bl	8006488 <inHandlerMode>
 8006572:	1e03      	subs	r3, r0, #0
 8006574:	d014      	beq.n	80065a0 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006576:	2310      	movs	r3, #16
 8006578:	18fa      	adds	r2, r7, r3
 800657a:	2308      	movs	r3, #8
 800657c:	18f9      	adds	r1, r7, r3
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	2300      	movs	r3, #0
 8006582:	f000 fd6f 	bl	8007064 <xQueueGenericSendFromISR>
 8006586:	0003      	movs	r3, r0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d001      	beq.n	8006590 <osMessagePut+0x40>
      return osErrorOS;
 800658c:	23ff      	movs	r3, #255	; 0xff
 800658e:	e014      	b.n	80065ba <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <osMessagePut+0x68>
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <osMessagePut+0x74>)
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	0552      	lsls	r2, r2, #21
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e00b      	b.n	80065b8 <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	2308      	movs	r3, #8
 80065a4:	18f9      	adds	r1, r7, r3
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	2300      	movs	r3, #0
 80065aa:	f000 fc97 	bl	8006edc <xQueueGenericSend>
 80065ae:	0003      	movs	r3, r0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d001      	beq.n	80065b8 <osMessagePut+0x68>
      return osErrorOS;
 80065b4:	23ff      	movs	r3, #255	; 0xff
 80065b6:	e000      	b.n	80065ba <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	0018      	movs	r0, r3
 80065bc:	46bd      	mov	sp, r7
 80065be:	b006      	add	sp, #24
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80065c8:	b590      	push	{r4, r7, lr}
 80065ca:	b08b      	sub	sp, #44	; 0x2c
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80065d4:	2314      	movs	r3, #20
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 80065dc:	2314      	movs	r3, #20
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	2200      	movs	r2, #0
 80065e2:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <osMessageGet+0x36>
    event.status = osErrorParameter;
 80065ea:	2314      	movs	r3, #20
 80065ec:	18fb      	adds	r3, r7, r3
 80065ee:	2280      	movs	r2, #128	; 0x80
 80065f0:	601a      	str	r2, [r3, #0]
    return event;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2214      	movs	r2, #20
 80065f6:	18ba      	adds	r2, r7, r2
 80065f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80065fa:	c313      	stmia	r3!, {r0, r1, r4}
 80065fc:	e053      	b.n	80066a6 <osMessageGet+0xde>
  }
  
  taskWoken = pdFALSE;
 80065fe:	2300      	movs	r3, #0
 8006600:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3301      	adds	r3, #1
 800660a:	d103      	bne.n	8006614 <osMessageGet+0x4c>
    ticks = portMAX_DELAY;
 800660c:	2301      	movs	r3, #1
 800660e:	425b      	negs	r3, r3
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	e009      	b.n	8006628 <osMessageGet+0x60>
  }
  else if (millisec != 0) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d006      	beq.n	8006628 <osMessageGet+0x60>
    ticks = millisec / portTICK_PERIOD_MS;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <osMessageGet+0x60>
      ticks = 1;
 8006624:	2301      	movs	r3, #1
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006628:	f7ff ff2e 	bl	8006488 <inHandlerMode>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d01c      	beq.n	800666a <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006630:	2320      	movs	r3, #32
 8006632:	18fa      	adds	r2, r7, r3
 8006634:	2314      	movs	r3, #20
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	1d19      	adds	r1, r3, #4
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	0018      	movs	r0, r3
 800663e:	f000 fe67 	bl	8007310 <xQueueReceiveFromISR>
 8006642:	0003      	movs	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d104      	bne.n	8006652 <osMessageGet+0x8a>
      /* We have mail */
      event.status = osEventMessage;
 8006648:	2314      	movs	r3, #20
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2210      	movs	r2, #16
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	e003      	b.n	800665a <osMessageGet+0x92>
    }
    else {
      event.status = osOK;
 8006652:	2314      	movs	r3, #20
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01d      	beq.n	800669c <osMessageGet+0xd4>
 8006660:	4b13      	ldr	r3, [pc, #76]	; (80066b0 <osMessageGet+0xe8>)
 8006662:	2280      	movs	r2, #128	; 0x80
 8006664:	0552      	lsls	r2, r2, #21
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e018      	b.n	800669c <osMessageGet+0xd4>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	2314      	movs	r3, #20
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	1d19      	adds	r1, r3, #4
 8006672:	68b8      	ldr	r0, [r7, #8]
 8006674:	2300      	movs	r3, #0
 8006676:	f000 fd67 	bl	8007148 <xQueueGenericReceive>
 800667a:	0003      	movs	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d104      	bne.n	800668a <osMessageGet+0xc2>
      /* We have mail */
      event.status = osEventMessage;
 8006680:	2314      	movs	r3, #20
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	2210      	movs	r2, #16
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e008      	b.n	800669c <osMessageGet+0xd4>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <osMessageGet+0xcc>
 8006690:	2200      	movs	r2, #0
 8006692:	e000      	b.n	8006696 <osMessageGet+0xce>
 8006694:	2240      	movs	r2, #64	; 0x40
 8006696:	2314      	movs	r3, #20
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2214      	movs	r2, #20
 80066a0:	18ba      	adds	r2, r7, r2
 80066a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066a4:	c313      	stmia	r3!, {r0, r1, r4}
}
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b00b      	add	sp, #44	; 0x2c
 80066ac:	bd90      	pop	{r4, r7, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3308      	adds	r3, #8
 80066c0:	001a      	movs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	4252      	negs	r2, r2
 80066cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3308      	adds	r3, #8
 80066d2:	001a      	movs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3308      	adds	r3, #8
 80066dc:	001a      	movs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066e8:	46c0      	nop			; (mov r8, r8)
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b002      	add	sp, #8
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	46bd      	mov	sp, r7
 8006702:	b002      	add	sp, #8
 8006704:	bd80      	pop	{r7, pc}

08006706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	601a      	str	r2, [r3, #0]
}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	46bd      	mov	sp, r7
 8006746:	b004      	add	sp, #16
 8006748:	bd80      	pop	{r7, pc}

0800674a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3301      	adds	r3, #1
 800675e:	d103      	bne.n	8006768 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	e00c      	b.n	8006782 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3308      	adds	r3, #8
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e002      	b.n	8006776 <vListInsert+0x2c>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	429a      	cmp	r2, r3
 8006780:	d9f6      	bls.n	8006770 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b004      	add	sp, #16
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6892      	ldr	r2, [r2, #8]
 80067cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6852      	ldr	r2, [r2, #4]
 80067d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d103      	bne.n	80067ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1e5a      	subs	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
}
 80067fe:	0018      	movs	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	b004      	add	sp, #16
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3b04      	subs	r3, #4
 8006818:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2280      	movs	r2, #128	; 0x80
 800681e:	0452      	lsls	r2, r2, #17
 8006820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3b04      	subs	r3, #4
 8006826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b04      	subs	r3, #4
 8006832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006834:	4a08      	ldr	r2, [pc, #32]	; (8006858 <pxPortInitialiseStack+0x50>)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b14      	subs	r3, #20
 800683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b20      	subs	r3, #32
 800684a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	0018      	movs	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	b004      	add	sp, #16
 8006854:	bd80      	pop	{r7, pc}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	0800685d 	.word	0x0800685d

0800685c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <prvTaskExitError+0x14>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	d001      	beq.n	800686c <prvTaskExitError+0x10>
 8006868:	b672      	cpsid	i
 800686a:	e7fe      	b.n	800686a <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 800686c:	b672      	cpsid	i
	for( ;; );
 800686e:	e7fe      	b.n	800686e <prvTaskExitError+0x12>
 8006870:	20000248 	.word	0x20000248

08006874 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006880:	4a0b      	ldr	r2, [pc, #44]	; (80068b0 <pxCurrentTCBConst2>)
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	3020      	adds	r0, #32
 8006888:	f380 8809 	msr	PSP, r0
 800688c:	2002      	movs	r0, #2
 800688e:	f380 8814 	msr	CONTROL, r0
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006898:	46ae      	mov	lr, r5
 800689a:	bc08      	pop	{r3}
 800689c:	bc04      	pop	{r2}
 800689e:	b662      	cpsie	i
 80068a0:	4718      	bx	r3
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	46c0      	nop			; (mov r8, r8)
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	46c0      	nop			; (mov r8, r8)
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	46c0      	nop			; (mov r8, r8)
 80068ae:	46c0      	nop			; (mov r8, r8)

080068b0 <pxCurrentTCBConst2>:
 80068b0:	20000f80 	.word	0x20000f80
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80068b4:	46c0      	nop			; (mov r8, r8)
 80068b6:	46c0      	nop			; (mov r8, r8)

080068b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <xPortStartScheduler+0x3c>)
 80068be:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <xPortStartScheduler+0x3c>)
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	21ff      	movs	r1, #255	; 0xff
 80068c4:	0409      	lsls	r1, r1, #16
 80068c6:	430a      	orrs	r2, r1
 80068c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <xPortStartScheduler+0x3c>)
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <xPortStartScheduler+0x3c>)
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	21ff      	movs	r1, #255	; 0xff
 80068d2:	0609      	lsls	r1, r1, #24
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068d8:	f000 f898 	bl	8006a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <xPortStartScheduler+0x40>)
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80068e2:	f7ff ffcd 	bl	8006880 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80068e6:	f7ff ffb9 	bl	800685c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	e000ed20 	.word	0xe000ed20
 80068f8:	20000248 	.word	0x20000248

080068fc <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <vPortYield+0x1c>)
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	0552      	lsls	r2, r2, #21
 8006906:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8006908:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800690c:	f3bf 8f6f 	isb	sy
}
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006920:	b672      	cpsid	i
    uxCriticalNesting++;
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <vPortEnterCritical+0x20>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <vPortEnterCritical+0x20>)
 800692a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800692c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006930:	f3bf 8f6f 	isb	sy
}
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	20000248 	.word	0x20000248

08006940 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <vPortExitCritical+0x2c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <vPortExitCritical+0x10>
 800694c:	b672      	cpsid	i
 800694e:	e7fe      	b.n	800694e <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <vPortExitCritical+0x2c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <vPortExitCritical+0x2c>)
 8006958:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <vPortExitCritical+0x2c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d100      	bne.n	8006964 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006962:	b662      	cpsie	i
    }
}
 8006964:	46c0      	nop			; (mov r8, r8)
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	20000248 	.word	0x20000248

08006970 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006970:	f3ef 8010 	mrs	r0, PRIMASK
 8006974:	b672      	cpsid	i
 8006976:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8006978:	2300      	movs	r3, #0
}
 800697a:	0018      	movs	r0, r3

0800697c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 800697c:	f380 8810 	msr	PRIMASK, r0
 8006980:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8006982:	46c0      	nop			; (mov r8, r8)
	...

08006990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006990:	f3ef 8009 	mrs	r0, PSP
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <pxCurrentTCBConst>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	3820      	subs	r0, #32
 800699a:	6010      	str	r0, [r2, #0]
 800699c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800699e:	4644      	mov	r4, r8
 80069a0:	464d      	mov	r5, r9
 80069a2:	4656      	mov	r6, sl
 80069a4:	465f      	mov	r7, fp
 80069a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80069a8:	b508      	push	{r3, lr}
 80069aa:	b672      	cpsid	i
 80069ac:	f001 f902 	bl	8007bb4 <vTaskSwitchContext>
 80069b0:	b662      	cpsie	i
 80069b2:	bc0c      	pop	{r2, r3}
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	6808      	ldr	r0, [r1, #0]
 80069b8:	3010      	adds	r0, #16
 80069ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80069bc:	46a0      	mov	r8, r4
 80069be:	46a9      	mov	r9, r5
 80069c0:	46b2      	mov	sl, r6
 80069c2:	46bb      	mov	fp, r7
 80069c4:	f380 8809 	msr	PSP, r0
 80069c8:	3820      	subs	r0, #32
 80069ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80069cc:	4718      	bx	r3
 80069ce:	46c0      	nop			; (mov r8, r8)

080069d0 <pxCurrentTCBConst>:
 80069d0:	20000f80 	.word	0x20000f80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46c0      	nop			; (mov r8, r8)

080069d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80069de:	f7ff ffc7 	bl	8006970 <ulSetInterruptMaskFromISR>
 80069e2:	0003      	movs	r3, r0
 80069e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069e6:	f001 f831 	bl	8007a4c <xTaskIncrementTick>
 80069ea:	1e03      	subs	r3, r0, #0
 80069ec:	d003      	beq.n	80069f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <SysTick_Handler+0x30>)
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	0552      	lsls	r2, r2, #21
 80069f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7ff ffbf 	bl	800697c <vClearInterruptMaskFromISR>
}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b002      	add	sp, #8
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a0c:	b5b0      	push	{r4, r5, r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a10:	4c08      	ldr	r4, [pc, #32]	; (8006a34 <vPortSetupTimerInterrupt+0x28>)
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <vPortSetupTimerInterrupt+0x2c>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	23fa      	movs	r3, #250	; 0xfa
 8006a18:	0099      	lsls	r1, r3, #2
 8006a1a:	0010      	movs	r0, r2
 8006a1c:	f7f9 fb86 	bl	800012c <__udivsi3>
 8006a20:	0003      	movs	r3, r0
 8006a22:	3b01      	subs	r3, #1
 8006a24:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006a26:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <vPortSetupTimerInterrupt+0x30>)
 8006a28:	2207      	movs	r2, #7
 8006a2a:	601a      	str	r2, [r3, #0]
}
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bdb0      	pop	{r4, r5, r7, pc}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	e000e014 	.word	0xe000e014
 8006a38:	2000024c 	.word	0x2000024c
 8006a3c:	e000e010 	.word	0xe000e010

08006a40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006a4c:	f000 ff66 	bl	800791c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a50:	4b49      	ldr	r3, [pc, #292]	; (8006b78 <pvPortMalloc+0x138>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a58:	f000 f8e0 	bl	8006c1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a5c:	4b47      	ldr	r3, [pc, #284]	; (8006b7c <pvPortMalloc+0x13c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	4013      	ands	r3, r2
 8006a64:	d000      	beq.n	8006a68 <pvPortMalloc+0x28>
 8006a66:	e079      	b.n	8006b5c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d012      	beq.n	8006a94 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006a6e:	2208      	movs	r2, #8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2207      	movs	r2, #7
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	d00a      	beq.n	8006a94 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2207      	movs	r2, #7
 8006a82:	4393      	bics	r3, r2
 8006a84:	3308      	adds	r3, #8
 8006a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2207      	movs	r2, #7
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d001      	beq.n	8006a94 <pvPortMalloc+0x54>
 8006a90:	b672      	cpsid	i
 8006a92:	e7fe      	b.n	8006a92 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d060      	beq.n	8006b5c <pvPortMalloc+0x11c>
 8006a9a:	4b39      	ldr	r3, [pc, #228]	; (8006b80 <pvPortMalloc+0x140>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d85b      	bhi.n	8006b5c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aa4:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <pvPortMalloc+0x144>)
 8006aa6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006aa8:	4b36      	ldr	r3, [pc, #216]	; (8006b84 <pvPortMalloc+0x144>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aae:	e004      	b.n	8006aba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d203      	bcs.n	8006acc <pvPortMalloc+0x8c>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f1      	bne.n	8006ab0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006acc:	4b2a      	ldr	r3, [pc, #168]	; (8006b78 <pvPortMalloc+0x138>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d042      	beq.n	8006b5c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2208      	movs	r2, #8
 8006adc:	189b      	adds	r3, r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	2308      	movs	r3, #8
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d916      	bls.n	8006b26 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	18d3      	adds	r3, r2, r3
 8006afe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2207      	movs	r2, #7
 8006b04:	4013      	ands	r3, r2
 8006b06:	d001      	beq.n	8006b0c <pvPortMalloc+0xcc>
 8006b08:	b672      	cpsid	i
 8006b0a:	e7fe      	b.n	8006b0a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f000 f8db 	bl	8006cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b26:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <pvPortMalloc+0x140>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	4b13      	ldr	r3, [pc, #76]	; (8006b80 <pvPortMalloc+0x140>)
 8006b32:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b34:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <pvPortMalloc+0x140>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <pvPortMalloc+0x148>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d203      	bcs.n	8006b48 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b40:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <pvPortMalloc+0x140>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <pvPortMalloc+0x148>)
 8006b46:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <pvPortMalloc+0x13c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b5c:	f000 feea 	bl	8007934 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2207      	movs	r2, #7
 8006b64:	4013      	ands	r3, r2
 8006b66:	d001      	beq.n	8006b6c <pvPortMalloc+0x12c>
 8006b68:	b672      	cpsid	i
 8006b6a:	e7fe      	b.n	8006b6a <pvPortMalloc+0x12a>
	return pvReturn;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b006      	add	sp, #24
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	20000f70 	.word	0x20000f70
 8006b7c:	20000f7c 	.word	0x20000f7c
 8006b80:	20000f74 	.word	0x20000f74
 8006b84:	20000f68 	.word	0x20000f68
 8006b88:	20000f78 	.word	0x20000f78

08006b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d035      	beq.n	8006c0a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	425b      	negs	r3, r3
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	18d3      	adds	r3, r2, r3
 8006ba6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <vPortFree+0x88>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d101      	bne.n	8006bbc <vPortFree+0x30>
 8006bb8:	b672      	cpsid	i
 8006bba:	e7fe      	b.n	8006bba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <vPortFree+0x3c>
 8006bc4:	b672      	cpsid	i
 8006bc6:	e7fe      	b.n	8006bc6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <vPortFree+0x88>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d01a      	beq.n	8006c0a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d116      	bne.n	8006c0a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <vPortFree+0x88>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	43db      	mvns	r3, r3
 8006be6:	401a      	ands	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bec:	f000 fe96 	bl	800791c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	4b08      	ldr	r3, [pc, #32]	; (8006c18 <vPortFree+0x8c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	18d2      	adds	r2, r2, r3
 8006bfa:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <vPortFree+0x8c>)
 8006bfc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f000 f86b 	bl	8006cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c06:	f000 fe95 	bl	8007934 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	b004      	add	sp, #16
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	20000f7c 	.word	0x20000f7c
 8006c18:	20000f74 	.word	0x20000f74

08006c1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c22:	23c0      	movs	r3, #192	; 0xc0
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c28:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <prvHeapInit+0xa8>)
 8006c2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2207      	movs	r2, #7
 8006c30:	4013      	ands	r3, r2
 8006c32:	d00c      	beq.n	8006c4e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3307      	adds	r3, #7
 8006c38:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2207      	movs	r2, #7
 8006c3e:	4393      	bics	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <prvHeapInit+0xa8>)
 8006c4a:	18d3      	adds	r3, r2, r3
 8006c4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c52:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <prvHeapInit+0xac>)
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c58:	4b1b      	ldr	r3, [pc, #108]	; (8006cc8 <prvHeapInit+0xac>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	18d3      	adds	r3, r2, r3
 8006c64:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c66:	2208      	movs	r2, #8
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2207      	movs	r2, #7
 8006c72:	4393      	bics	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <prvHeapInit+0xb0>)
 8006c7a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006c7c:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <prvHeapInit+0xb0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c84:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <prvHeapInit+0xb0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <prvHeapInit+0xb0>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <prvHeapInit+0xb4>)
 8006ca8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <prvHeapInit+0xb8>)
 8006cb0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <prvHeapInit+0xbc>)
 8006cb4:	2280      	movs	r2, #128	; 0x80
 8006cb6:	0612      	lsls	r2, r2, #24
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b004      	add	sp, #16
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	20000368 	.word	0x20000368
 8006cc8:	20000f68 	.word	0x20000f68
 8006ccc:	20000f70 	.word	0x20000f70
 8006cd0:	20000f78 	.word	0x20000f78
 8006cd4:	20000f74 	.word	0x20000f74
 8006cd8:	20000f7c 	.word	0x20000f7c

08006cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ce4:	4b27      	ldr	r3, [pc, #156]	; (8006d84 <prvInsertBlockIntoFreeList+0xa8>)
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e002      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x14>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d3f7      	bcc.n	8006cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	18d2      	adds	r2, r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d108      	bne.n	8006d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	18d2      	adds	r2, r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	18d2      	adds	r2, r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d118      	bne.n	8006d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <prvInsertBlockIntoFreeList+0xac>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d00d      	beq.n	8006d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	18d2      	adds	r2, r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	e008      	b.n	8006d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <prvInsertBlockIntoFreeList+0xac>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e003      	b.n	8006d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d002      	beq.n	8006d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b004      	add	sp, #16
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	20000f68 	.word	0x20000f68
 8006d88:	20000f70 	.word	0x20000f70

08006d8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <xQueueGenericReset+0x18>
 8006da0:	b672      	cpsid	i
 8006da2:	e7fe      	b.n	8006da2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006da4:	f7ff fdba 	bl	800691c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	434b      	muls	r3, r1
 8006db6:	18d2      	adds	r2, r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	1e59      	subs	r1, r3, #1
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	434b      	muls	r3, r1
 8006dda:	18d2      	adds	r2, r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2244      	movs	r2, #68	; 0x44
 8006de4:	21ff      	movs	r1, #255	; 0xff
 8006de6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2245      	movs	r2, #69	; 0x45
 8006dec:	21ff      	movs	r1, #255	; 0xff
 8006dee:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10d      	bne.n	8006e12 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3310      	adds	r3, #16
 8006e02:	0018      	movs	r0, r3
 8006e04:	f000 ff46 	bl	8007c94 <xTaskRemoveFromEventList>
 8006e08:	1e03      	subs	r3, r0, #0
 8006e0a:	d00c      	beq.n	8006e26 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e0c:	f7ff fd76 	bl	80068fc <vPortYield>
 8006e10:	e009      	b.n	8006e26 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3310      	adds	r3, #16
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7ff fc4c 	bl	80066b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3324      	adds	r3, #36	; 0x24
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7ff fc47 	bl	80066b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e26:	f7ff fd8b 	bl	8006940 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e2a:	2301      	movs	r3, #1
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b004      	add	sp, #16
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b08b      	sub	sp, #44	; 0x2c
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	1dfb      	adds	r3, r7, #7
 8006e40:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <xQueueGenericCreate+0x18>
 8006e48:	b672      	cpsid	i
 8006e4a:	e7fe      	b.n	8006e4a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	e003      	b.n	8006e60 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4353      	muls	r3, r2
 8006e5e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	3348      	adds	r3, #72	; 0x48
 8006e64:	0018      	movs	r0, r3
 8006e66:	f7ff fdeb 	bl	8006a40 <pvPortMalloc>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	3348      	adds	r3, #72	; 0x48
 8006e78:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e7a:	1dfb      	adds	r3, r7, #7
 8006e7c:	781c      	ldrb	r4, [r3, #0]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	0023      	movs	r3, r4
 8006e8a:	f000 f805 	bl	8006e98 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8006e90:	0018      	movs	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b009      	add	sp, #36	; 0x24
 8006e96:	bd90      	pop	{r4, r7, pc}

08006e98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	1cfb      	adds	r3, r7, #3
 8006ea8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2101      	movs	r1, #1
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7ff ff5c 	bl	8006d8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b004      	add	sp, #16
 8006eda:	bd80      	pop	{r7, pc}

08006edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eea:	2300      	movs	r3, #0
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <xQueueGenericSend+0x20>
 8006ef8:	b672      	cpsid	i
 8006efa:	e7fe      	b.n	8006efa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <xQueueGenericSend+0x2e>
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <xQueueGenericSend+0x32>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <xQueueGenericSend+0x34>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <xQueueGenericSend+0x3c>
 8006f14:	b672      	cpsid	i
 8006f16:	e7fe      	b.n	8006f16 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d103      	bne.n	8006f26 <xQueueGenericSend+0x4a>
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <xQueueGenericSend+0x4e>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <xQueueGenericSend+0x50>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <xQueueGenericSend+0x58>
 8006f30:	b672      	cpsid	i
 8006f32:	e7fe      	b.n	8006f32 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f34:	f001 f840 	bl	8007fb8 <xTaskGetSchedulerState>
 8006f38:	1e03      	subs	r3, r0, #0
 8006f3a:	d102      	bne.n	8006f42 <xQueueGenericSend+0x66>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <xQueueGenericSend+0x6a>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <xQueueGenericSend+0x6c>
 8006f46:	2300      	movs	r3, #0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <xQueueGenericSend+0x74>
 8006f4c:	b672      	cpsid	i
 8006f4e:	e7fe      	b.n	8006f4e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f50:	f7ff fce4 	bl	800691c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d302      	bcc.n	8006f66 <xQueueGenericSend+0x8a>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d11e      	bne.n	8006fa4 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f000 fa33 	bl	80073d8 <prvCopyDataToQueue>
 8006f72:	0003      	movs	r3, r0
 8006f74:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	3324      	adds	r3, #36	; 0x24
 8006f82:	0018      	movs	r0, r3
 8006f84:	f000 fe86 	bl	8007c94 <xTaskRemoveFromEventList>
 8006f88:	1e03      	subs	r3, r0, #0
 8006f8a:	d007      	beq.n	8006f9c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f8c:	f7ff fcb6 	bl	80068fc <vPortYield>
 8006f90:	e004      	b.n	8006f9c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f98:	f7ff fcb0 	bl	80068fc <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f9c:	f7ff fcd0 	bl	8006940 <vPortExitCritical>
				return pdPASS;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e05b      	b.n	800705c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006faa:	f7ff fcc9 	bl	8006940 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e054      	b.n	800705c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8006fb8:	2314      	movs	r3, #20
 8006fba:	18fb      	adds	r3, r7, r3
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 fec5 	bl	8007d4c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc6:	f7ff fcbb 	bl	8006940 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fca:	f000 fca7 	bl	800791c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fce:	f7ff fca5 	bl	800691c <vPortEnterCritical>
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	2244      	movs	r2, #68	; 0x44
 8006fd6:	5c9b      	ldrb	r3, [r3, r2]
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	3301      	adds	r3, #1
 8006fdc:	d103      	bne.n	8006fe6 <xQueueGenericSend+0x10a>
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	2244      	movs	r2, #68	; 0x44
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	5499      	strb	r1, [r3, r2]
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	2245      	movs	r2, #69	; 0x45
 8006fea:	5c9b      	ldrb	r3, [r3, r2]
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	3301      	adds	r3, #1
 8006ff0:	d103      	bne.n	8006ffa <xQueueGenericSend+0x11e>
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	2245      	movs	r2, #69	; 0x45
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	5499      	strb	r1, [r3, r2]
 8006ffa:	f7ff fca1 	bl	8006940 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ffe:	1d3a      	adds	r2, r7, #4
 8007000:	2314      	movs	r3, #20
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	0011      	movs	r1, r2
 8007006:	0018      	movs	r0, r3
 8007008:	f000 feba 	bl	8007d80 <xTaskCheckForTimeOut>
 800700c:	1e03      	subs	r3, r0, #0
 800700e:	d11e      	bne.n	800704e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	0018      	movs	r0, r3
 8007014:	f000 fae7 	bl	80075e6 <prvIsQueueFull>
 8007018:	1e03      	subs	r3, r0, #0
 800701a:	d011      	beq.n	8007040 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	3310      	adds	r3, #16
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	0011      	movs	r1, r2
 8007024:	0018      	movs	r0, r3
 8007026:	f000 fe17 	bl	8007c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 fa64 	bl	80074fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007032:	f000 fc7f 	bl	8007934 <xTaskResumeAll>
 8007036:	1e03      	subs	r3, r0, #0
 8007038:	d18a      	bne.n	8006f50 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800703a:	f7ff fc5f 	bl	80068fc <vPortYield>
 800703e:	e787      	b.n	8006f50 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	0018      	movs	r0, r3
 8007044:	f000 fa59 	bl	80074fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007048:	f000 fc74 	bl	8007934 <xTaskResumeAll>
 800704c:	e780      	b.n	8006f50 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	0018      	movs	r0, r3
 8007052:	f000 fa52 	bl	80074fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007056:	f000 fc6d 	bl	8007934 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800705a:	2300      	movs	r3, #0
		}
	}
}
 800705c:	0018      	movs	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	b00a      	add	sp, #40	; 0x28
 8007062:	bd80      	pop	{r7, pc}

08007064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <xQueueGenericSendFromISR+0x1c>
 800707c:	b672      	cpsid	i
 800707e:	e7fe      	b.n	800707e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <xQueueGenericSendFromISR+0x2a>
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <xQueueGenericSendFromISR+0x2e>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueGenericSendFromISR+0x30>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <xQueueGenericSendFromISR+0x38>
 8007098:	b672      	cpsid	i
 800709a:	e7fe      	b.n	800709a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d103      	bne.n	80070aa <xQueueGenericSendFromISR+0x46>
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <xQueueGenericSendFromISR+0x4a>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <xQueueGenericSendFromISR+0x4c>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <xQueueGenericSendFromISR+0x54>
 80070b4:	b672      	cpsid	i
 80070b6:	e7fe      	b.n	80070b6 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070b8:	f7ff fc5a 	bl	8006970 <ulSetInterruptMaskFromISR>
 80070bc:	0003      	movs	r3, r0
 80070be:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xQueueGenericSendFromISR+0x6e>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d12f      	bne.n	8007132 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070d2:	2313      	movs	r3, #19
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	2145      	movs	r1, #69	; 0x45
 80070da:	5c52      	ldrb	r2, [r2, r1]
 80070dc:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	0018      	movs	r0, r3
 80070e6:	f000 f977 	bl	80073d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ea:	2313      	movs	r3, #19
 80070ec:	18fb      	adds	r3, r7, r3
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	b25b      	sxtb	r3, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	d111      	bne.n	800711a <xQueueGenericSendFromISR+0xb6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	3324      	adds	r3, #36	; 0x24
 8007102:	0018      	movs	r0, r3
 8007104:	f000 fdc6 	bl	8007c94 <xTaskRemoveFromEventList>
 8007108:	1e03      	subs	r3, r0, #0
 800710a:	d00f      	beq.n	800712c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e008      	b.n	800712c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800711a:	2313      	movs	r3, #19
 800711c:	18fb      	adds	r3, r7, r3
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	b259      	sxtb	r1, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2245      	movs	r2, #69	; 0x45
 800712a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
		{
 8007130:	e001      	b.n	8007136 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	0018      	movs	r0, r3
 800713a:	f7ff fc1f 	bl	800697c <vClearInterruptMaskFromISR>

	return xReturn;
 800713e:	69fb      	ldr	r3, [r7, #28]
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b008      	add	sp, #32
 8007146:	bd80      	pop	{r7, pc}

08007148 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007156:	2300      	movs	r3, #0
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <xQueueGenericReceive+0x20>
 8007164:	b672      	cpsid	i
 8007166:	e7fe      	b.n	8007166 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <xQueueGenericReceive+0x2e>
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <xQueueGenericReceive+0x32>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <xQueueGenericReceive+0x34>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <xQueueGenericReceive+0x3c>
 8007180:	b672      	cpsid	i
 8007182:	e7fe      	b.n	8007182 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007184:	f000 ff18 	bl	8007fb8 <xTaskGetSchedulerState>
 8007188:	1e03      	subs	r3, r0, #0
 800718a:	d102      	bne.n	8007192 <xQueueGenericReceive+0x4a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <xQueueGenericReceive+0x4e>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <xQueueGenericReceive+0x50>
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <xQueueGenericReceive+0x58>
 800719c:	b672      	cpsid	i
 800719e:	e7fe      	b.n	800719e <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80071a0:	f7ff fbbc 	bl	800691c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d03a      	beq.n	8007226 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	0011      	movs	r1, r2
 80071bc:	0018      	movs	r0, r3
 80071be:	f000 f976 	bl	80074ae <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d11a      	bne.n	80071fe <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	1e5a      	subs	r2, r3, #1
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80071d8:	f000 ffc4 	bl	8008164 <pvTaskIncrementMutexHeldCount>
 80071dc:	0002      	movs	r2, r0
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d019      	beq.n	800721e <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	3310      	adds	r3, #16
 80071ee:	0018      	movs	r0, r3
 80071f0:	f000 fd50 	bl	8007c94 <xTaskRemoveFromEventList>
 80071f4:	1e03      	subs	r3, r0, #0
 80071f6:	d012      	beq.n	800721e <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80071f8:	f7ff fb80 	bl	80068fc <vPortYield>
 80071fc:	e00f      	b.n	800721e <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	3324      	adds	r3, #36	; 0x24
 8007210:	0018      	movs	r0, r3
 8007212:	f000 fd3f 	bl	8007c94 <xTaskRemoveFromEventList>
 8007216:	1e03      	subs	r3, r0, #0
 8007218:	d001      	beq.n	800721e <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800721a:	f7ff fb6f 	bl	80068fc <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800721e:	f7ff fb8f 	bl	8006940 <vPortExitCritical>
				return pdPASS;
 8007222:	2301      	movs	r3, #1
 8007224:	e070      	b.n	8007308 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800722c:	f7ff fb88 	bl	8006940 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007230:	2300      	movs	r3, #0
 8007232:	e069      	b.n	8007308 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800723a:	2310      	movs	r3, #16
 800723c:	18fb      	adds	r3, r7, r3
 800723e:	0018      	movs	r0, r3
 8007240:	f000 fd84 	bl	8007d4c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007244:	2301      	movs	r3, #1
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007248:	f7ff fb7a 	bl	8006940 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800724c:	f000 fb66 	bl	800791c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007250:	f7ff fb64 	bl	800691c <vPortEnterCritical>
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	2244      	movs	r2, #68	; 0x44
 8007258:	5c9b      	ldrb	r3, [r3, r2]
 800725a:	b25b      	sxtb	r3, r3
 800725c:	3301      	adds	r3, #1
 800725e:	d103      	bne.n	8007268 <xQueueGenericReceive+0x120>
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	2244      	movs	r2, #68	; 0x44
 8007264:	2100      	movs	r1, #0
 8007266:	5499      	strb	r1, [r3, r2]
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2245      	movs	r2, #69	; 0x45
 800726c:	5c9b      	ldrb	r3, [r3, r2]
 800726e:	b25b      	sxtb	r3, r3
 8007270:	3301      	adds	r3, #1
 8007272:	d103      	bne.n	800727c <xQueueGenericReceive+0x134>
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2245      	movs	r2, #69	; 0x45
 8007278:	2100      	movs	r1, #0
 800727a:	5499      	strb	r1, [r3, r2]
 800727c:	f7ff fb60 	bl	8006940 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007280:	1d3a      	adds	r2, r7, #4
 8007282:	2310      	movs	r3, #16
 8007284:	18fb      	adds	r3, r7, r3
 8007286:	0011      	movs	r1, r2
 8007288:	0018      	movs	r0, r3
 800728a:	f000 fd79 	bl	8007d80 <xTaskCheckForTimeOut>
 800728e:	1e03      	subs	r3, r0, #0
 8007290:	d12c      	bne.n	80072ec <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	0018      	movs	r0, r3
 8007296:	f000 f990 	bl	80075ba <prvIsQueueEmpty>
 800729a:	1e03      	subs	r3, r0, #0
 800729c:	d01f      	beq.n	80072de <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d108      	bne.n	80072b8 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 80072a6:	f7ff fb39 	bl	800691c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	0018      	movs	r0, r3
 80072b0:	f000 fe9e 	bl	8007ff0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80072b4:	f7ff fb44 	bl	8006940 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	3324      	adds	r3, #36	; 0x24
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	0011      	movs	r1, r2
 80072c0:	0018      	movs	r0, r3
 80072c2:	f000 fcc9 	bl	8007c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	0018      	movs	r0, r3
 80072ca:	f000 f916 	bl	80074fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072ce:	f000 fb31 	bl	8007934 <xTaskResumeAll>
 80072d2:	1e03      	subs	r3, r0, #0
 80072d4:	d000      	beq.n	80072d8 <xQueueGenericReceive+0x190>
 80072d6:	e763      	b.n	80071a0 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 80072d8:	f7ff fb10 	bl	80068fc <vPortYield>
 80072dc:	e760      	b.n	80071a0 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 f90a 	bl	80074fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072e6:	f000 fb25 	bl	8007934 <xTaskResumeAll>
 80072ea:	e759      	b.n	80071a0 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	0018      	movs	r0, r3
 80072f0:	f000 f903 	bl	80074fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072f4:	f000 fb1e 	bl	8007934 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	0018      	movs	r0, r3
 80072fc:	f000 f95d 	bl	80075ba <prvIsQueueEmpty>
 8007300:	1e03      	subs	r3, r0, #0
 8007302:	d100      	bne.n	8007306 <xQueueGenericReceive+0x1be>
 8007304:	e74c      	b.n	80071a0 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007306:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007308:	0018      	movs	r0, r3
 800730a:	46bd      	mov	sp, r7
 800730c:	b00a      	add	sp, #40	; 0x28
 800730e:	bd80      	pop	{r7, pc}

08007310 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <xQueueReceiveFromISR+0x1a>
 8007326:	b672      	cpsid	i
 8007328:	e7fe      	b.n	8007328 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d103      	bne.n	8007338 <xQueueReceiveFromISR+0x28>
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <xQueueReceiveFromISR+0x2c>
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <xQueueReceiveFromISR+0x2e>
 800733c:	2300      	movs	r3, #0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <xQueueReceiveFromISR+0x36>
 8007342:	b672      	cpsid	i
 8007344:	e7fe      	b.n	8007344 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007346:	f7ff fb13 	bl	8006970 <ulSetInterruptMaskFromISR>
 800734a:	0003      	movs	r3, r0
 800734c:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d033      	beq.n	80073c2 <xQueueReceiveFromISR+0xb2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800735a:	2317      	movs	r3, #23
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	6a3a      	ldr	r2, [r7, #32]
 8007360:	2144      	movs	r1, #68	; 0x44
 8007362:	5c52      	ldrb	r2, [r2, r1]
 8007364:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	0011      	movs	r1, r2
 800736c:	0018      	movs	r0, r3
 800736e:	f000 f89e 	bl	80074ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	1e5a      	subs	r2, r3, #1
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800737a:	2317      	movs	r3, #23
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	b25b      	sxtb	r3, r3
 8007382:	3301      	adds	r3, #1
 8007384:	d111      	bne.n	80073aa <xQueueReceiveFromISR+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d016      	beq.n	80073bc <xQueueReceiveFromISR+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	3310      	adds	r3, #16
 8007392:	0018      	movs	r0, r3
 8007394:	f000 fc7e 	bl	8007c94 <xTaskRemoveFromEventList>
 8007398:	1e03      	subs	r3, r0, #0
 800739a:	d00f      	beq.n	80073bc <xQueueReceiveFromISR+0xac>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00c      	beq.n	80073bc <xQueueReceiveFromISR+0xac>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e008      	b.n	80073bc <xQueueReceiveFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80073aa:	2317      	movs	r3, #23
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	b259      	sxtb	r1, r3
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2244      	movs	r2, #68	; 0x44
 80073ba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80073bc:	2301      	movs	r3, #1
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
 80073c0:	e001      	b.n	80073c6 <xQueueReceiveFromISR+0xb6>
		}
		else
		{
			xReturn = pdFAIL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	0018      	movs	r0, r3
 80073ca:	f7ff fad7 	bl	800697c <vClearInterruptMaskFromISR>

	return xReturn;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073d0:	0018      	movs	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	b00a      	add	sp, #40	; 0x28
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10e      	bne.n	8007414 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d14e      	bne.n	800749c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	0018      	movs	r0, r3
 8007404:	f000 fe52 	bl	80080ac <xTaskPriorityDisinherit>
 8007408:	0003      	movs	r3, r0
 800740a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	e043      	b.n	800749c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d119      	bne.n	800744e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6898      	ldr	r0, [r3, #8]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	0019      	movs	r1, r3
 8007426:	f003 fb91 	bl	800ab4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	18d2      	adds	r2, r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d32b      	bcc.n	800749c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	609a      	str	r2, [r3, #8]
 800744c:	e026      	b.n	800749c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68d8      	ldr	r0, [r3, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	0019      	movs	r1, r3
 800745a:	f003 fb77 	bl	800ab4c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	425b      	negs	r3, r3
 8007468:	18d2      	adds	r2, r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d207      	bcs.n	800748a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	425b      	negs	r3, r3
 8007484:	18d2      	adds	r2, r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d105      	bne.n	800749c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3b01      	subs	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80074a4:	697b      	ldr	r3, [r7, #20]
}
 80074a6:	0018      	movs	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	b006      	add	sp, #24
 80074ac:	bd80      	pop	{r7, pc}

080074ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d018      	beq.n	80074f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	18d2      	adds	r2, r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d303      	bcc.n	80074e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68d9      	ldr	r1, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	0018      	movs	r0, r3
 80074ee:	f003 fb2d 	bl	800ab4c <memcpy>
	}
}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b002      	add	sp, #8
 80074f8:	bd80      	pop	{r7, pc}

080074fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007502:	f7ff fa0b 	bl	800691c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007506:	230f      	movs	r3, #15
 8007508:	18fb      	adds	r3, r7, r3
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	2145      	movs	r1, #69	; 0x45
 800750e:	5c52      	ldrb	r2, [r2, r1]
 8007510:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007512:	e014      	b.n	800753e <prvUnlockQueue+0x44>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <prvUnlockQueue+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3324      	adds	r3, #36	; 0x24
 8007520:	0018      	movs	r0, r3
 8007522:	f000 fbb7 	bl	8007c94 <xTaskRemoveFromEventList>
 8007526:	1e03      	subs	r3, r0, #0
 8007528:	d001      	beq.n	800752e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800752a:	f000 fc77 	bl	8007e1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800752e:	230f      	movs	r3, #15
 8007530:	18fb      	adds	r3, r7, r3
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	3b01      	subs	r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	230f      	movs	r3, #15
 800753a:	18fb      	adds	r3, r7, r3
 800753c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800753e:	230f      	movs	r3, #15
 8007540:	18fb      	adds	r3, r7, r3
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b25b      	sxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	dce4      	bgt.n	8007514 <prvUnlockQueue+0x1a>
 800754a:	e000      	b.n	800754e <prvUnlockQueue+0x54>
					break;
 800754c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2245      	movs	r2, #69	; 0x45
 8007552:	21ff      	movs	r1, #255	; 0xff
 8007554:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007556:	f7ff f9f3 	bl	8006940 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800755a:	f7ff f9df 	bl	800691c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800755e:	230e      	movs	r3, #14
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	2144      	movs	r1, #68	; 0x44
 8007566:	5c52      	ldrb	r2, [r2, r1]
 8007568:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800756a:	e014      	b.n	8007596 <prvUnlockQueue+0x9c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d017      	beq.n	80075a4 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3310      	adds	r3, #16
 8007578:	0018      	movs	r0, r3
 800757a:	f000 fb8b 	bl	8007c94 <xTaskRemoveFromEventList>
 800757e:	1e03      	subs	r3, r0, #0
 8007580:	d001      	beq.n	8007586 <prvUnlockQueue+0x8c>
				{
					vTaskMissedYield();
 8007582:	f000 fc4b 	bl	8007e1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007586:	230e      	movs	r3, #14
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	3b01      	subs	r3, #1
 800758e:	b2da      	uxtb	r2, r3
 8007590:	230e      	movs	r3, #14
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007596:	230e      	movs	r3, #14
 8007598:	18fb      	adds	r3, r7, r3
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b25b      	sxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dce4      	bgt.n	800756c <prvUnlockQueue+0x72>
 80075a2:	e000      	b.n	80075a6 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 80075a4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2244      	movs	r2, #68	; 0x44
 80075aa:	21ff      	movs	r1, #255	; 0xff
 80075ac:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80075ae:	f7ff f9c7 	bl	8006940 <vPortExitCritical>
}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b004      	add	sp, #16
 80075b8:	bd80      	pop	{r7, pc}

080075ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075c2:	f7ff f9ab 	bl	800691c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075ce:	2301      	movs	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	e001      	b.n	80075d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075d8:	f7ff f9b2 	bl	8006940 <vPortExitCritical>

	return xReturn;
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	0018      	movs	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	b004      	add	sp, #16
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075ee:	f7ff f995 	bl	800691c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d102      	bne.n	8007604 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075fe:	2301      	movs	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e001      	b.n	8007608 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007608:	f7ff f99a 	bl	8006940 <vPortExitCritical>

	return xReturn;
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	0018      	movs	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	b004      	add	sp, #16
 8007614:	bd80      	pop	{r7, pc}

08007616 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007616:	b590      	push	{r4, r7, lr}
 8007618:	b08d      	sub	sp, #52	; 0x34
 800761a:	af04      	add	r7, sp, #16
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	603b      	str	r3, [r7, #0]
 8007622:	1dbb      	adds	r3, r7, #6
 8007624:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007626:	1dbb      	adds	r3, r7, #6
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	0018      	movs	r0, r3
 800762e:	f7ff fa07 	bl	8006a40 <pvPortMalloc>
 8007632:	0003      	movs	r3, r0
 8007634:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d010      	beq.n	800765e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800763c:	2054      	movs	r0, #84	; 0x54
 800763e:	f7ff f9ff 	bl	8006a40 <pvPortMalloc>
 8007642:	0003      	movs	r3, r0
 8007644:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
 8007652:	e006      	b.n	8007662 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	0018      	movs	r0, r3
 8007658:	f7ff fa98 	bl	8006b8c <vPortFree>
 800765c:	e001      	b.n	8007662 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d016      	beq.n	8007696 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007668:	1dbb      	adds	r3, r7, #6
 800766a:	881a      	ldrh	r2, [r3, #0]
 800766c:	683c      	ldr	r4, [r7, #0]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	2300      	movs	r3, #0
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	0023      	movs	r3, r4
 8007684:	f000 f810 	bl	80076a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	0018      	movs	r0, r3
 800768c:	f000 f886 	bl	800779c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007690:	2301      	movs	r3, #1
 8007692:	61bb      	str	r3, [r7, #24]
 8007694:	e002      	b.n	800769c <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007696:	2301      	movs	r3, #1
 8007698:	425b      	negs	r3, r3
 800769a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800769c:	69bb      	ldr	r3, [r7, #24]
	}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b009      	add	sp, #36	; 0x24
 80076a4:	bd90      	pop	{r4, r7, pc}
	...

080076a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4936      	ldr	r1, [pc, #216]	; (8007798 <prvInitialiseNewTask+0xf0>)
 80076be:	468c      	mov	ip, r1
 80076c0:	4463      	add	r3, ip
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	18d3      	adds	r3, r2, r3
 80076c6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2207      	movs	r2, #7
 80076cc:	4393      	bics	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2207      	movs	r2, #7
 80076d4:	4013      	ands	r3, r2
 80076d6:	d001      	beq.n	80076dc <prvInitialiseNewTask+0x34>
 80076d8:	b672      	cpsid	i
 80076da:	e7fe      	b.n	80076da <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	e013      	b.n	800770a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	18d3      	adds	r3, r2, r3
 80076e8:	7818      	ldrb	r0, [r3, #0]
 80076ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ec:	2134      	movs	r1, #52	; 0x34
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	18d3      	adds	r3, r2, r3
 80076f2:	185b      	adds	r3, r3, r1
 80076f4:	1c02      	adds	r2, r0, #0
 80076f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	18d3      	adds	r3, r2, r3
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d006      	beq.n	8007712 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	3301      	adds	r3, #1
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b0f      	cmp	r3, #15
 800770e:	d9e8      	bls.n	80076e2 <prvInitialiseNewTask+0x3a>
 8007710:	e000      	b.n	8007714 <prvInitialiseNewTask+0x6c>
		{
			break;
 8007712:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	2243      	movs	r2, #67	; 0x43
 8007718:	2100      	movs	r1, #0
 800771a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	2b06      	cmp	r3, #6
 8007720:	d901      	bls.n	8007726 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007722:	2306      	movs	r3, #6
 8007724:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	6a3a      	ldr	r2, [r7, #32]
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	6a3a      	ldr	r2, [r7, #32]
 8007730:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	2200      	movs	r2, #0
 8007736:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	3304      	adds	r3, #4
 800773c:	0018      	movs	r0, r3
 800773e:	f7fe ffd7 	bl	80066f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	3318      	adds	r3, #24
 8007746:	0018      	movs	r0, r3
 8007748:	f7fe ffd2 	bl	80066f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007750:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	2207      	movs	r2, #7
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007760:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	2200      	movs	r2, #0
 8007766:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	2250      	movs	r2, #80	; 0x50
 800776c:	2100      	movs	r1, #0
 800776e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	68f9      	ldr	r1, [r7, #12]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	0018      	movs	r0, r3
 8007778:	f7ff f846 	bl	8006808 <pxPortInitialiseStack>
 800777c:	0002      	movs	r2, r0
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800778c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	46bd      	mov	sp, r7
 8007792:	b006      	add	sp, #24
 8007794:	bd80      	pop	{r7, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	3fffffff 	.word	0x3fffffff

0800779c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077a4:	f7ff f8ba 	bl	800691c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077a8:	4b28      	ldr	r3, [pc, #160]	; (800784c <prvAddNewTaskToReadyList+0xb0>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	4b27      	ldr	r3, [pc, #156]	; (800784c <prvAddNewTaskToReadyList+0xb0>)
 80077b0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80077b2:	4b27      	ldr	r3, [pc, #156]	; (8007850 <prvAddNewTaskToReadyList+0xb4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077ba:	4b25      	ldr	r3, [pc, #148]	; (8007850 <prvAddNewTaskToReadyList+0xb4>)
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077c0:	4b22      	ldr	r3, [pc, #136]	; (800784c <prvAddNewTaskToReadyList+0xb0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d110      	bne.n	80077ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077c8:	f000 fb42 	bl	8007e50 <prvInitialiseTaskLists>
 80077cc:	e00d      	b.n	80077ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ce:	4b21      	ldr	r3, [pc, #132]	; (8007854 <prvAddNewTaskToReadyList+0xb8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077d6:	4b1e      	ldr	r3, [pc, #120]	; (8007850 <prvAddNewTaskToReadyList+0xb4>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d802      	bhi.n	80077ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077e4:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <prvAddNewTaskToReadyList+0xb4>)
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <prvAddNewTaskToReadyList+0xbc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	4b19      	ldr	r3, [pc, #100]	; (8007858 <prvAddNewTaskToReadyList+0xbc>)
 80077f2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f8:	4b18      	ldr	r3, [pc, #96]	; (800785c <prvAddNewTaskToReadyList+0xc0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d903      	bls.n	8007808 <prvAddNewTaskToReadyList+0x6c>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <prvAddNewTaskToReadyList+0xc0>)
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	0013      	movs	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	189b      	adds	r3, r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4a12      	ldr	r2, [pc, #72]	; (8007860 <prvAddNewTaskToReadyList+0xc4>)
 8007816:	189a      	adds	r2, r3, r2
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	0019      	movs	r1, r3
 800781e:	0010      	movs	r0, r2
 8007820:	f7fe ff71 	bl	8006706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007824:	f7ff f88c 	bl	8006940 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <prvAddNewTaskToReadyList+0xb8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <prvAddNewTaskToReadyList+0xb4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	429a      	cmp	r2, r3
 800783c:	d201      	bcs.n	8007842 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800783e:	f7ff f85d 	bl	80068fc <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	46bd      	mov	sp, r7
 8007846:	b002      	add	sp, #8
 8007848:	bd80      	pop	{r7, pc}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	20001080 	.word	0x20001080
 8007850:	20000f80 	.word	0x20000f80
 8007854:	2000108c 	.word	0x2000108c
 8007858:	2000109c 	.word	0x2000109c
 800785c:	20001088 	.word	0x20001088
 8007860:	20000f84 	.word	0x20000f84

08007864 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d010      	beq.n	8007898 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007876:	4b0d      	ldr	r3, [pc, #52]	; (80078ac <vTaskDelay+0x48>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <vTaskDelay+0x1e>
 800787e:	b672      	cpsid	i
 8007880:	e7fe      	b.n	8007880 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007882:	f000 f84b 	bl	800791c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2100      	movs	r1, #0
 800788a:	0018      	movs	r0, r3
 800788c:	f000 fc7c 	bl	8008188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007890:	f000 f850 	bl	8007934 <xTaskResumeAll>
 8007894:	0003      	movs	r3, r0
 8007896:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800789e:	f7ff f82d 	bl	80068fc <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b004      	add	sp, #16
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	200010a8 	.word	0x200010a8

080078b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80078b6:	4913      	ldr	r1, [pc, #76]	; (8007904 <vTaskStartScheduler+0x54>)
 80078b8:	4813      	ldr	r0, [pc, #76]	; (8007908 <vTaskStartScheduler+0x58>)
 80078ba:	4b14      	ldr	r3, [pc, #80]	; (800790c <vTaskStartScheduler+0x5c>)
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	2300      	movs	r3, #0
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	2300      	movs	r3, #0
 80078c4:	2280      	movs	r2, #128	; 0x80
 80078c6:	f7ff fea6 	bl	8007616 <xTaskCreate>
 80078ca:	0003      	movs	r3, r0
 80078cc:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d10d      	bne.n	80078f0 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80078d4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078d6:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <vTaskStartScheduler+0x60>)
 80078d8:	2201      	movs	r2, #1
 80078da:	4252      	negs	r2, r2
 80078dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <vTaskStartScheduler+0x64>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <vTaskStartScheduler+0x68>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ea:	f7fe ffe5 	bl	80068b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ee:	e004      	b.n	80078fa <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3301      	adds	r3, #1
 80078f4:	d101      	bne.n	80078fa <vTaskStartScheduler+0x4a>
 80078f6:	b672      	cpsid	i
 80078f8:	e7fe      	b.n	80078f8 <vTaskStartScheduler+0x48>
}
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	46bd      	mov	sp, r7
 80078fe:	b002      	add	sp, #8
 8007900:	bd80      	pop	{r7, pc}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	0800ac6c 	.word	0x0800ac6c
 8007908:	08007e31 	.word	0x08007e31
 800790c:	200010a4 	.word	0x200010a4
 8007910:	200010a0 	.word	0x200010a0
 8007914:	2000108c 	.word	0x2000108c
 8007918:	20001084 	.word	0x20001084

0800791c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007920:	4b03      	ldr	r3, [pc, #12]	; (8007930 <vTaskSuspendAll+0x14>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	4b02      	ldr	r3, [pc, #8]	; (8007930 <vTaskSuspendAll+0x14>)
 8007928:	601a      	str	r2, [r3, #0]
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200010a8 	.word	0x200010a8

08007934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800793e:	2300      	movs	r3, #0
 8007940:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007942:	4b3a      	ldr	r3, [pc, #232]	; (8007a2c <xTaskResumeAll+0xf8>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <xTaskResumeAll+0x1a>
 800794a:	b672      	cpsid	i
 800794c:	e7fe      	b.n	800794c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800794e:	f7fe ffe5 	bl	800691c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007952:	4b36      	ldr	r3, [pc, #216]	; (8007a2c <xTaskResumeAll+0xf8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1e5a      	subs	r2, r3, #1
 8007958:	4b34      	ldr	r3, [pc, #208]	; (8007a2c <xTaskResumeAll+0xf8>)
 800795a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800795c:	4b33      	ldr	r3, [pc, #204]	; (8007a2c <xTaskResumeAll+0xf8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d15b      	bne.n	8007a1c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007964:	4b32      	ldr	r3, [pc, #200]	; (8007a30 <xTaskResumeAll+0xfc>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d057      	beq.n	8007a1c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800796c:	e02f      	b.n	80079ce <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800796e:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <xTaskResumeAll+0x100>)
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3318      	adds	r3, #24
 800797a:	0018      	movs	r0, r3
 800797c:	f7fe ff1b 	bl	80067b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3304      	adds	r3, #4
 8007984:	0018      	movs	r0, r3
 8007986:	f7fe ff16 	bl	80067b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798e:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <xTaskResumeAll+0x104>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d903      	bls.n	800799e <xTaskResumeAll+0x6a>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	4b27      	ldr	r3, [pc, #156]	; (8007a38 <xTaskResumeAll+0x104>)
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	0013      	movs	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	189b      	adds	r3, r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4a24      	ldr	r2, [pc, #144]	; (8007a3c <xTaskResumeAll+0x108>)
 80079ac:	189a      	adds	r2, r3, r2
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3304      	adds	r3, #4
 80079b2:	0019      	movs	r1, r3
 80079b4:	0010      	movs	r0, r2
 80079b6:	f7fe fea6 	bl	8006706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079be:	4b20      	ldr	r3, [pc, #128]	; (8007a40 <xTaskResumeAll+0x10c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d302      	bcc.n	80079ce <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80079c8:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <xTaskResumeAll+0x110>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ce:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <xTaskResumeAll+0x100>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1cb      	bne.n	800796e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079dc:	f000 fac8 	bl	8007f70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079e0:	4b19      	ldr	r3, [pc, #100]	; (8007a48 <xTaskResumeAll+0x114>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00f      	beq.n	8007a0c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079ec:	f000 f82e 	bl	8007a4c <xTaskIncrementTick>
 80079f0:	1e03      	subs	r3, r0, #0
 80079f2:	d002      	beq.n	80079fa <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80079f4:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <xTaskResumeAll+0x110>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f2      	bne.n	80079ec <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <xTaskResumeAll+0x114>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <xTaskResumeAll+0x110>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a18:	f7fe ff70 	bl	80068fc <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a1c:	f7fe ff90 	bl	8006940 <vPortExitCritical>

	return xAlreadyYielded;
 8007a20:	68bb      	ldr	r3, [r7, #8]
}
 8007a22:	0018      	movs	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b004      	add	sp, #16
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	200010a8 	.word	0x200010a8
 8007a30:	20001080 	.word	0x20001080
 8007a34:	20001040 	.word	0x20001040
 8007a38:	20001088 	.word	0x20001088
 8007a3c:	20000f84 	.word	0x20000f84
 8007a40:	20000f80 	.word	0x20000f80
 8007a44:	20001094 	.word	0x20001094
 8007a48:	20001090 	.word	0x20001090

08007a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a56:	4b4c      	ldr	r3, [pc, #304]	; (8007b88 <xTaskIncrementTick+0x13c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d000      	beq.n	8007a60 <xTaskIncrementTick+0x14>
 8007a5e:	e083      	b.n	8007b68 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8007a60:	4b4a      	ldr	r3, [pc, #296]	; (8007b8c <xTaskIncrementTick+0x140>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a68:	4b48      	ldr	r3, [pc, #288]	; (8007b8c <xTaskIncrementTick+0x140>)
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d117      	bne.n	8007aa4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a74:	4b46      	ldr	r3, [pc, #280]	; (8007b90 <xTaskIncrementTick+0x144>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <xTaskIncrementTick+0x36>
 8007a7e:	b672      	cpsid	i
 8007a80:	e7fe      	b.n	8007a80 <xTaskIncrementTick+0x34>
 8007a82:	4b43      	ldr	r3, [pc, #268]	; (8007b90 <xTaskIncrementTick+0x144>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	4b42      	ldr	r3, [pc, #264]	; (8007b94 <xTaskIncrementTick+0x148>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <xTaskIncrementTick+0x144>)
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	4b40      	ldr	r3, [pc, #256]	; (8007b94 <xTaskIncrementTick+0x148>)
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	4b40      	ldr	r3, [pc, #256]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f000 fa66 	bl	8007f70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007aa4:	4b3d      	ldr	r3, [pc, #244]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d34e      	bcc.n	8007b4c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aae:	4b38      	ldr	r3, [pc, #224]	; (8007b90 <xTaskIncrementTick+0x144>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <xTaskIncrementTick+0x70>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <xTaskIncrementTick+0x72>
 8007abc:	2300      	movs	r3, #0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac2:	4b36      	ldr	r3, [pc, #216]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4252      	negs	r2, r2
 8007ac8:	601a      	str	r2, [r3, #0]
					break;
 8007aca:	e03f      	b.n	8007b4c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007acc:	4b30      	ldr	r3, [pc, #192]	; (8007b90 <xTaskIncrementTick+0x144>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d203      	bcs.n	8007aec <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ae4:	4b2d      	ldr	r3, [pc, #180]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
						break;
 8007aea:	e02f      	b.n	8007b4c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	3304      	adds	r3, #4
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7fe fe60 	bl	80067b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d004      	beq.n	8007b08 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	3318      	adds	r3, #24
 8007b02:	0018      	movs	r0, r3
 8007b04:	f7fe fe57 	bl	80067b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0c:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <xTaskIncrementTick+0xd0>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	4b21      	ldr	r3, [pc, #132]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b20:	0013      	movs	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	189b      	adds	r3, r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4a1e      	ldr	r2, [pc, #120]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007b2a:	189a      	adds	r2, r3, r2
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	0019      	movs	r1, r3
 8007b32:	0010      	movs	r0, r2
 8007b34:	f7fe fde7 	bl	8006706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d3b3      	bcc.n	8007aae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007b46:	2301      	movs	r3, #1
 8007b48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b4a:	e7b0      	b.n	8007aae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b4c:	4b16      	ldr	r3, [pc, #88]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b52:	4914      	ldr	r1, [pc, #80]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007b54:	0013      	movs	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	189b      	adds	r3, r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	585b      	ldr	r3, [r3, r1]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d907      	bls.n	8007b72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	e004      	b.n	8007b72 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b68:	4b10      	ldr	r3, [pc, #64]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b70:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b72:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b7e:	697b      	ldr	r3, [r7, #20]
}
 8007b80:	0018      	movs	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b006      	add	sp, #24
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	200010a8 	.word	0x200010a8
 8007b8c:	20001084 	.word	0x20001084
 8007b90:	20001038 	.word	0x20001038
 8007b94:	2000103c 	.word	0x2000103c
 8007b98:	20001098 	.word	0x20001098
 8007b9c:	200010a0 	.word	0x200010a0
 8007ba0:	20001088 	.word	0x20001088
 8007ba4:	20000f84 	.word	0x20000f84
 8007ba8:	20000f80 	.word	0x20000f80
 8007bac:	20001090 	.word	0x20001090
 8007bb0:	20001094 	.word	0x20001094

08007bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bba:	4b22      	ldr	r3, [pc, #136]	; (8007c44 <vTaskSwitchContext+0x90>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bc2:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <vTaskSwitchContext+0x94>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bc8:	e037      	b.n	8007c3a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8007bca:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <vTaskSwitchContext+0x94>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <vTaskSwitchContext+0x98>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	607b      	str	r3, [r7, #4]
 8007bd6:	e007      	b.n	8007be8 <vTaskSwitchContext+0x34>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <vTaskSwitchContext+0x2e>
 8007bde:	b672      	cpsid	i
 8007be0:	e7fe      	b.n	8007be0 <vTaskSwitchContext+0x2c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	607b      	str	r3, [r7, #4]
 8007be8:	4919      	ldr	r1, [pc, #100]	; (8007c50 <vTaskSwitchContext+0x9c>)
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	0013      	movs	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	189b      	adds	r3, r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	585b      	ldr	r3, [r3, r1]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0ee      	beq.n	8007bd8 <vTaskSwitchContext+0x24>
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	0013      	movs	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	189b      	adds	r3, r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <vTaskSwitchContext+0x9c>)
 8007c06:	189b      	adds	r3, r3, r2
 8007c08:	603b      	str	r3, [r7, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	605a      	str	r2, [r3, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d104      	bne.n	8007c2a <vTaskSwitchContext+0x76>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <vTaskSwitchContext+0xa0>)
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <vTaskSwitchContext+0x98>)
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b002      	add	sp, #8
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	200010a8 	.word	0x200010a8
 8007c48:	20001094 	.word	0x20001094
 8007c4c:	20001088 	.word	0x20001088
 8007c50:	20000f84 	.word	0x20000f84
 8007c54:	20000f80 	.word	0x20000f80

08007c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <vTaskPlaceOnEventList+0x14>
 8007c68:	b672      	cpsid	i
 8007c6a:	e7fe      	b.n	8007c6a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c6c:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <vTaskPlaceOnEventList+0x38>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3318      	adds	r3, #24
 8007c72:	001a      	movs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	0011      	movs	r1, r2
 8007c78:	0018      	movs	r0, r3
 8007c7a:	f7fe fd66 	bl	800674a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2101      	movs	r1, #1
 8007c82:	0018      	movs	r0, r3
 8007c84:	f000 fa80 	bl	8008188 <prvAddCurrentTaskToDelayedList>
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b002      	add	sp, #8
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000f80 	.word	0x20000f80

08007c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <xTaskRemoveFromEventList+0x1a>
 8007caa:	b672      	cpsid	i
 8007cac:	e7fe      	b.n	8007cac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f7fe fd7f 	bl	80067b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cb8:	4b1e      	ldr	r3, [pc, #120]	; (8007d34 <xTaskRemoveFromEventList+0xa0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d11d      	bne.n	8007cfc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f7fe fd76 	bl	80067b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4b1a      	ldr	r3, [pc, #104]	; (8007d38 <xTaskRemoveFromEventList+0xa4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d903      	bls.n	8007cde <xTaskRemoveFromEventList+0x4a>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cda:	4b17      	ldr	r3, [pc, #92]	; (8007d38 <xTaskRemoveFromEventList+0xa4>)
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	0013      	movs	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <xTaskRemoveFromEventList+0xa8>)
 8007cec:	189a      	adds	r2, r3, r2
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	0019      	movs	r1, r3
 8007cf4:	0010      	movs	r0, r2
 8007cf6:	f7fe fd06 	bl	8006706 <vListInsertEnd>
 8007cfa:	e007      	b.n	8007d0c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	3318      	adds	r3, #24
 8007d00:	001a      	movs	r2, r3
 8007d02:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <xTaskRemoveFromEventList+0xac>)
 8007d04:	0011      	movs	r1, r2
 8007d06:	0018      	movs	r0, r3
 8007d08:	f7fe fcfd 	bl	8006706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <xTaskRemoveFromEventList+0xb0>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d905      	bls.n	8007d26 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <xTaskRemoveFromEventList+0xb4>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e001      	b.n	8007d2a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
}
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	b004      	add	sp, #16
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	200010a8 	.word	0x200010a8
 8007d38:	20001088 	.word	0x20001088
 8007d3c:	20000f84 	.word	0x20000f84
 8007d40:	20001040 	.word	0x20001040
 8007d44:	20000f80 	.word	0x20000f80
 8007d48:	20001094 	.word	0x20001094

08007d4c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <vTaskSetTimeOutState+0x12>
 8007d5a:	b672      	cpsid	i
 8007d5c:	e7fe      	b.n	8007d5c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <vTaskSetTimeOutState+0x2c>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <vTaskSetTimeOutState+0x30>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	605a      	str	r2, [r3, #4]
}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b002      	add	sp, #8
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	20001098 	.word	0x20001098
 8007d7c:	20001084 	.word	0x20001084

08007d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <xTaskCheckForTimeOut+0x14>
 8007d90:	b672      	cpsid	i
 8007d92:	e7fe      	b.n	8007d92 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <xTaskCheckForTimeOut+0x1e>
 8007d9a:	b672      	cpsid	i
 8007d9c:	e7fe      	b.n	8007d9c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007d9e:	f7fe fdbd 	bl	800691c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007da2:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <xTaskCheckForTimeOut+0x94>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	d102      	bne.n	8007db6 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e027      	b.n	8007e06 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <xTaskCheckForTimeOut+0x98>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d007      	beq.n	8007dd2 <xTaskCheckForTimeOut+0x52>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d802      	bhi.n	8007dd2 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	e019      	b.n	8007e06 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d20f      	bcs.n	8007e02 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6859      	ldr	r1, [r3, #4]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	1acb      	subs	r3, r1, r3
 8007dee:	18d2      	adds	r2, r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7ff ffa8 	bl	8007d4c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e001      	b.n	8007e06 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e06:	f7fe fd9b 	bl	8006940 <vPortExitCritical>

	return xReturn;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
}
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b004      	add	sp, #16
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20001084 	.word	0x20001084
 8007e18:	20001098 	.word	0x20001098

08007e1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <vTaskMissedYield+0x10>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20001094 	.word	0x20001094

08007e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e38:	f000 f84e 	bl	8007ed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e3c:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <prvIdleTask+0x1c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d9f9      	bls.n	8007e38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e44:	f7fe fd5a 	bl	80068fc <vPortYield>
		prvCheckTasksWaitingTermination();
 8007e48:	e7f6      	b.n	8007e38 <prvIdleTask+0x8>
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	20000f84 	.word	0x20000f84

08007e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e56:	2300      	movs	r3, #0
 8007e58:	607b      	str	r3, [r7, #4]
 8007e5a:	e00c      	b.n	8007e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	0013      	movs	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	189b      	adds	r3, r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <prvInitialiseTaskLists+0x68>)
 8007e68:	189b      	adds	r3, r3, r2
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f7fe fc22 	bl	80066b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3301      	adds	r3, #1
 8007e74:	607b      	str	r3, [r7, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b06      	cmp	r3, #6
 8007e7a:	d9ef      	bls.n	8007e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e7c:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <prvInitialiseTaskLists+0x6c>)
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f7fe fc18 	bl	80066b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e84:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <prvInitialiseTaskLists+0x70>)
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7fe fc14 	bl	80066b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <prvInitialiseTaskLists+0x74>)
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f7fe fc10 	bl	80066b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <prvInitialiseTaskLists+0x78>)
 8007e96:	0018      	movs	r0, r3
 8007e98:	f7fe fc0c 	bl	80066b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <prvInitialiseTaskLists+0x7c>)
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7fe fc08 	bl	80066b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvInitialiseTaskLists+0x80>)
 8007ea6:	4a05      	ldr	r2, [pc, #20]	; (8007ebc <prvInitialiseTaskLists+0x6c>)
 8007ea8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <prvInitialiseTaskLists+0x84>)
 8007eac:	4a04      	ldr	r2, [pc, #16]	; (8007ec0 <prvInitialiseTaskLists+0x70>)
 8007eae:	601a      	str	r2, [r3, #0]
}
 8007eb0:	46c0      	nop			; (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000f84 	.word	0x20000f84
 8007ebc:	20001010 	.word	0x20001010
 8007ec0:	20001024 	.word	0x20001024
 8007ec4:	20001040 	.word	0x20001040
 8007ec8:	20001054 	.word	0x20001054
 8007ecc:	2000106c 	.word	0x2000106c
 8007ed0:	20001038 	.word	0x20001038
 8007ed4:	2000103c 	.word	0x2000103c

08007ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ede:	e027      	b.n	8007f30 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8007ee0:	f7ff fd1c 	bl	800791c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007ee4:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <prvCheckTasksWaitingTermination+0x68>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	425a      	negs	r2, r3
 8007eea:	4153      	adcs	r3, r2
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8007ef0:	f7ff fd20 	bl	8007934 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d11a      	bne.n	8007f30 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8007efa:	f7fe fd0f 	bl	800691c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <prvCheckTasksWaitingTermination+0x68>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f7fe fc53 	bl	80067b6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007f10:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <prvCheckTasksWaitingTermination+0x6c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	1e5a      	subs	r2, r3, #1
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <prvCheckTasksWaitingTermination+0x6c>)
 8007f18:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <prvCheckTasksWaitingTermination+0x70>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	1e5a      	subs	r2, r3, #1
 8007f20:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <prvCheckTasksWaitingTermination+0x70>)
 8007f22:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8007f24:	f7fe fd0c 	bl	8006940 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f000 f80e 	bl	8007f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <prvCheckTasksWaitingTermination+0x70>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1d3      	bne.n	8007ee0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f38:	46c0      	nop			; (mov r8, r8)
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b002      	add	sp, #8
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20001054 	.word	0x20001054
 8007f44:	20001080 	.word	0x20001080
 8007f48:	20001068 	.word	0x20001068

08007f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f7fe fe17 	bl	8006b8c <vPortFree>
			vPortFree( pxTCB );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	0018      	movs	r0, r3
 8007f62:	f7fe fe13 	bl	8006b8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	b002      	add	sp, #8
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f76:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <prvResetNextTaskUnblockTime+0x40>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <prvResetNextTaskUnblockTime+0x14>
 8007f80:	2301      	movs	r3, #1
 8007f82:	e000      	b.n	8007f86 <prvResetNextTaskUnblockTime+0x16>
 8007f84:	2300      	movs	r3, #0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <prvResetNextTaskUnblockTime+0x44>)
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4252      	negs	r2, r2
 8007f90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f92:	e008      	b.n	8007fa6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f94:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <prvResetNextTaskUnblockTime+0x40>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <prvResetNextTaskUnblockTime+0x44>)
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b002      	add	sp, #8
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	20001038 	.word	0x20001038
 8007fb4:	200010a0 	.word	0x200010a0

08007fb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <xTaskGetSchedulerState+0x30>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	607b      	str	r3, [r7, #4]
 8007fca:	e008      	b.n	8007fde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <xTaskGetSchedulerState+0x34>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	607b      	str	r3, [r7, #4]
 8007fd8:	e001      	b.n	8007fde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fde:	687b      	ldr	r3, [r7, #4]
	}
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	b002      	add	sp, #8
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	2000108c 	.word	0x2000108c
 8007fec:	200010a8 	.word	0x200010a8

08007ff0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d04a      	beq.n	8008098 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	4b26      	ldr	r3, [pc, #152]	; (80080a0 <vTaskPriorityInherit+0xb0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d243      	bcs.n	8008098 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	db06      	blt.n	8008026 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008018:	4b21      	ldr	r3, [pc, #132]	; (80080a0 <vTaskPriorityInherit+0xb0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	2207      	movs	r2, #7
 8008020:	1ad2      	subs	r2, r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6959      	ldr	r1, [r3, #20]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	0013      	movs	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	189b      	adds	r3, r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4a1b      	ldr	r2, [pc, #108]	; (80080a4 <vTaskPriorityInherit+0xb4>)
 8008038:	189b      	adds	r3, r3, r2
 800803a:	4299      	cmp	r1, r3
 800803c:	d101      	bne.n	8008042 <vTaskPriorityInherit+0x52>
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <vTaskPriorityInherit+0x54>
 8008042:	2300      	movs	r3, #0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d022      	beq.n	800808e <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3304      	adds	r3, #4
 800804c:	0018      	movs	r0, r3
 800804e:	f7fe fbb2 	bl	80067b6 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008052:	4b13      	ldr	r3, [pc, #76]	; (80080a0 <vTaskPriorityInherit+0xb0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008060:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <vTaskPriorityInherit+0xb8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d903      	bls.n	8008070 <vTaskPriorityInherit+0x80>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806c:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <vTaskPriorityInherit+0xb8>)
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	0013      	movs	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	189b      	adds	r3, r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <vTaskPriorityInherit+0xb4>)
 800807e:	189a      	adds	r2, r3, r2
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3304      	adds	r3, #4
 8008084:	0019      	movs	r1, r3
 8008086:	0010      	movs	r0, r2
 8008088:	f7fe fb3d 	bl	8006706 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800808c:	e004      	b.n	8008098 <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800808e:	4b04      	ldr	r3, [pc, #16]	; (80080a0 <vTaskPriorityInherit+0xb0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8008098:	46c0      	nop			; (mov r8, r8)
 800809a:	46bd      	mov	sp, r7
 800809c:	b004      	add	sp, #16
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000f80 	.word	0x20000f80
 80080a4:	20000f84 	.word	0x20000f84
 80080a8:	20001088 	.word	0x20001088

080080ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d044      	beq.n	800814c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080c2:	4b25      	ldr	r3, [pc, #148]	; (8008158 <xTaskPriorityDisinherit+0xac>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d001      	beq.n	80080d0 <xTaskPriorityDisinherit+0x24>
 80080cc:	b672      	cpsid	i
 80080ce:	e7fe      	b.n	80080ce <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <xTaskPriorityDisinherit+0x30>
 80080d8:	b672      	cpsid	i
 80080da:	e7fe      	b.n	80080da <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e0:	1e5a      	subs	r2, r3, #1
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d02c      	beq.n	800814c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d128      	bne.n	800814c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3304      	adds	r3, #4
 80080fe:	0018      	movs	r0, r3
 8008100:	f7fe fb59 	bl	80067b6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	2207      	movs	r2, #7
 8008112:	1ad2      	subs	r2, r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811c:	4b0f      	ldr	r3, [pc, #60]	; (800815c <xTaskPriorityDisinherit+0xb0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d903      	bls.n	800812c <xTaskPriorityDisinherit+0x80>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <xTaskPriorityDisinherit+0xb0>)
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	0013      	movs	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	189b      	adds	r3, r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4a09      	ldr	r2, [pc, #36]	; (8008160 <xTaskPriorityDisinherit+0xb4>)
 800813a:	189a      	adds	r2, r3, r2
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	3304      	adds	r3, #4
 8008140:	0019      	movs	r1, r3
 8008142:	0010      	movs	r0, r2
 8008144:	f7fe fadf 	bl	8006706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800814c:	68fb      	ldr	r3, [r7, #12]
	}
 800814e:	0018      	movs	r0, r3
 8008150:	46bd      	mov	sp, r7
 8008152:	b004      	add	sp, #16
 8008154:	bd80      	pop	{r7, pc}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	20000f80 	.word	0x20000f80
 800815c:	20001088 	.word	0x20001088
 8008160:	20000f84 	.word	0x20000f84

08008164 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008168:	4b06      	ldr	r3, [pc, #24]	; (8008184 <pvTaskIncrementMutexHeldCount+0x20>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <pvTaskIncrementMutexHeldCount+0x20>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008176:	3201      	adds	r2, #1
 8008178:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800817a:	4b02      	ldr	r3, [pc, #8]	; (8008184 <pvTaskIncrementMutexHeldCount+0x20>)
 800817c:	681b      	ldr	r3, [r3, #0]
	}
 800817e:	0018      	movs	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20000f80 	.word	0x20000f80

08008188 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008192:	4b21      	ldr	r3, [pc, #132]	; (8008218 <prvAddCurrentTaskToDelayedList+0x90>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008198:	4b20      	ldr	r3, [pc, #128]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3304      	adds	r3, #4
 800819e:	0018      	movs	r0, r3
 80081a0:	f7fe fb09 	bl	80067b6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	d10b      	bne.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d008      	beq.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b0:	4b1a      	ldr	r3, [pc, #104]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <prvAddCurrentTaskToDelayedList+0x98>)
 80081b8:	0011      	movs	r1, r2
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7fe faa3 	bl	8006706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081c0:	e026      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	18d3      	adds	r3, r2, r3
 80081c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d209      	bcs.n	80081ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081da:	4b12      	ldr	r3, [pc, #72]	; (8008224 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3304      	adds	r3, #4
 80081e4:	0019      	movs	r1, r3
 80081e6:	0010      	movs	r0, r2
 80081e8:	f7fe faaf 	bl	800674a <vListInsert>
}
 80081ec:	e010      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3304      	adds	r3, #4
 80081f8:	0019      	movs	r1, r3
 80081fa:	0010      	movs	r0, r2
 80081fc:	f7fe faa5 	bl	800674a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d202      	bcs.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800820a:	4b08      	ldr	r3, [pc, #32]	; (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	601a      	str	r2, [r3, #0]
}
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b004      	add	sp, #16
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20001084 	.word	0x20001084
 800821c:	20000f80 	.word	0x20000f80
 8008220:	2000106c 	.word	0x2000106c
 8008224:	2000103c 	.word	0x2000103c
 8008228:	20001038 	.word	0x20001038
 800822c:	200010a0 	.word	0x200010a0

08008230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008230:	b590      	push	{r4, r7, lr}
 8008232:	b08d      	sub	sp, #52	; 0x34
 8008234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008236:	f7f9 f881 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800823a:	f000 f83f 	bl	80082bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800823e:	f000 f8df 	bl	8008400 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 8008242:	f000 f8a3 	bl	800838c <_ZL11MX_CAN_Initv>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of ledToggleTask */
  osThreadDef(ledToggleTask, ledToggleTaskFunc, osPriorityBelowNormal, 0, 128);
 8008246:	231c      	movs	r3, #28
 8008248:	18fb      	adds	r3, r7, r3
 800824a:	4a16      	ldr	r2, [pc, #88]	; (80082a4 <main+0x74>)
 800824c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800824e:	c313      	stmia	r3!, {r0, r1, r4}
 8008250:	ca03      	ldmia	r2!, {r0, r1}
 8008252:	c303      	stmia	r3!, {r0, r1}
  ledToggleTaskHandle = osThreadCreate(osThread(ledToggleTask), NULL);
 8008254:	231c      	movs	r3, #28
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	2100      	movs	r1, #0
 800825a:	0018      	movs	r0, r3
 800825c:	f7fe f92a 	bl	80064b4 <osThreadCreate>
 8008260:	0002      	movs	r2, r0
 8008262:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <main+0x78>)
 8008264:	601a      	str	r2, [r3, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, uartTaskFunc, osPriorityNormal, 0, 128);
 8008266:	2308      	movs	r3, #8
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	4a10      	ldr	r2, [pc, #64]	; (80082ac <main+0x7c>)
 800826c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800826e:	c313      	stmia	r3!, {r0, r1, r4}
 8008270:	ca03      	ldmia	r2!, {r0, r1}
 8008272:	c303      	stmia	r3!, {r0, r1}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8008274:	2308      	movs	r3, #8
 8008276:	18fb      	adds	r3, r7, r3
 8008278:	2100      	movs	r1, #0
 800827a:	0018      	movs	r0, r3
 800827c:	f7fe f91a 	bl	80064b4 <osThreadCreate>
 8008280:	0002      	movs	r2, r0
 8008282:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <main+0x80>)
 8008284:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of cdcData */
  osMessageQDef(cdcData, 128, uint8_t);
 8008286:	003b      	movs	r3, r7
 8008288:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <main+0x84>)
 800828a:	ca03      	ldmia	r2!, {r0, r1}
 800828c:	c303      	stmia	r3!, {r0, r1}
  cdcDataHandle = osMessageCreate(osMessageQ(cdcData), NULL);
 800828e:	003b      	movs	r3, r7
 8008290:	2100      	movs	r1, #0
 8008292:	0018      	movs	r0, r3
 8008294:	f7fe f94a 	bl	800652c <osMessageCreate>
 8008298:	0002      	movs	r2, r0
 800829a:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <main+0x88>)
 800829c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 800829e:	f7fe f901 	bl	80064a4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80082a2:	e7fe      	b.n	80082a2 <main+0x72>
 80082a4:	0800ac84 	.word	0x0800ac84
 80082a8:	20000358 	.word	0x20000358
 80082ac:	0800aca4 	.word	0x0800aca4
 80082b0:	2000035c 	.word	0x2000035c
 80082b4:	0800acb8 	.word	0x0800acb8
 80082b8:	20000360 	.word	0x20000360

080082bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b098      	sub	sp, #96	; 0x60
 80082c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082c2:	232c      	movs	r3, #44	; 0x2c
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	0018      	movs	r0, r3
 80082c8:	2334      	movs	r3, #52	; 0x34
 80082ca:	001a      	movs	r2, r3
 80082cc:	2100      	movs	r1, #0
 80082ce:	f002 fc46 	bl	800ab5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082d2:	231c      	movs	r3, #28
 80082d4:	18fb      	adds	r3, r7, r3
 80082d6:	0018      	movs	r0, r3
 80082d8:	2310      	movs	r3, #16
 80082da:	001a      	movs	r2, r3
 80082dc:	2100      	movs	r1, #0
 80082de:	f002 fc3e 	bl	800ab5e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082e2:	003b      	movs	r3, r7
 80082e4:	0018      	movs	r0, r3
 80082e6:	231c      	movs	r3, #28
 80082e8:	001a      	movs	r2, r3
 80082ea:	2100      	movs	r1, #0
 80082ec:	f002 fc37 	bl	800ab5e <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80082f0:	232c      	movs	r3, #44	; 0x2c
 80082f2:	18fb      	adds	r3, r7, r3
 80082f4:	2220      	movs	r2, #32
 80082f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80082f8:	232c      	movs	r3, #44	; 0x2c
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	2201      	movs	r2, #1
 80082fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008300:	232c      	movs	r3, #44	; 0x2c
 8008302:	18fb      	adds	r3, r7, r3
 8008304:	2200      	movs	r2, #0
 8008306:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008308:	232c      	movs	r3, #44	; 0x2c
 800830a:	18fb      	adds	r3, r7, r3
 800830c:	0018      	movs	r0, r3
 800830e:	f7fb fd9f 	bl	8003e50 <HAL_RCC_OscConfig>
 8008312:	0003      	movs	r3, r0
 8008314:	1e5a      	subs	r2, r3, #1
 8008316:	4193      	sbcs	r3, r2
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <_Z18SystemClock_Configv+0x66>
  {
    Error_Handler();
 800831e:	f000 f94f 	bl	80085c0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008322:	231c      	movs	r3, #28
 8008324:	18fb      	adds	r3, r7, r3
 8008326:	2207      	movs	r2, #7
 8008328:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800832a:	231c      	movs	r3, #28
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	2203      	movs	r2, #3
 8008330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008332:	231c      	movs	r3, #28
 8008334:	18fb      	adds	r3, r7, r3
 8008336:	2200      	movs	r2, #0
 8008338:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800833a:	231c      	movs	r3, #28
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	2200      	movs	r2, #0
 8008340:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008342:	231c      	movs	r3, #28
 8008344:	18fb      	adds	r3, r7, r3
 8008346:	2101      	movs	r1, #1
 8008348:	0018      	movs	r0, r3
 800834a:	f7fc f8df 	bl	800450c <HAL_RCC_ClockConfig>
 800834e:	0003      	movs	r3, r0
 8008350:	1e5a      	subs	r2, r3, #1
 8008352:	4193      	sbcs	r3, r2
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800835a:	f000 f931 	bl	80085c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800835e:	003b      	movs	r3, r7
 8008360:	2280      	movs	r2, #128	; 0x80
 8008362:	0292      	lsls	r2, r2, #10
 8008364:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008366:	003b      	movs	r3, r7
 8008368:	2200      	movs	r2, #0
 800836a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800836c:	003b      	movs	r3, r7
 800836e:	0018      	movs	r0, r3
 8008370:	f7fc fa9c 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 8008374:	0003      	movs	r3, r0
 8008376:	1e5a      	subs	r2, r3, #1
 8008378:	4193      	sbcs	r3, r2
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8008380:	f000 f91e 	bl	80085c0 <Error_Handler>
  }
}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	b018      	add	sp, #96	; 0x60
 800838a:	bd80      	pop	{r7, pc}

0800838c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 8008392:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <_ZL11MX_CAN_Initv+0x70>)
 8008394:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008396:	4b18      	ldr	r3, [pc, #96]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 8008398:	2210      	movs	r2, #16
 800839a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800839c:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 800839e:	2200      	movs	r2, #0
 80083a0:	609a      	str	r2, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	60da      	str	r2, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_1TQ;
 80083a8:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	611a      	str	r2, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	615a      	str	r2, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 80083b4:	4b10      	ldr	r3, [pc, #64]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 80083ba:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083bc:	2200      	movs	r2, #0
 80083be:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 80083c0:	4b0d      	ldr	r3, [pc, #52]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	629a      	str	r2, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 80083d2:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80083d8:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <_ZL11MX_CAN_Initv+0x6c>)
 80083da:	0018      	movs	r0, r3
 80083dc:	f7f8 ffd8 	bl	8001390 <HAL_CAN_Init>
 80083e0:	0003      	movs	r3, r0
 80083e2:	1e5a      	subs	r2, r3, #1
 80083e4:	4193      	sbcs	r3, r2
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 80083ec:	f000 f8e8 	bl	80085c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80083f0:	46c0      	nop			; (mov r8, r8)
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	20000314 	.word	0x20000314
 80083fc:	40006400 	.word	0x40006400

08008400 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008406:	230c      	movs	r3, #12
 8008408:	18fb      	adds	r3, r7, r3
 800840a:	0018      	movs	r0, r3
 800840c:	2314      	movs	r3, #20
 800840e:	001a      	movs	r2, r3
 8008410:	2100      	movs	r1, #0
 8008412:	f002 fba4 	bl	800ab5e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008416:	4b3b      	ldr	r3, [pc, #236]	; (8008504 <_ZL12MX_GPIO_Initv+0x104>)
 8008418:	4a3a      	ldr	r2, [pc, #232]	; (8008504 <_ZL12MX_GPIO_Initv+0x104>)
 800841a:	6952      	ldr	r2, [r2, #20]
 800841c:	2180      	movs	r1, #128	; 0x80
 800841e:	0289      	lsls	r1, r1, #10
 8008420:	430a      	orrs	r2, r1
 8008422:	615a      	str	r2, [r3, #20]
 8008424:	4b37      	ldr	r3, [pc, #220]	; (8008504 <_ZL12MX_GPIO_Initv+0x104>)
 8008426:	695a      	ldr	r2, [r3, #20]
 8008428:	2380      	movs	r3, #128	; 0x80
 800842a:	029b      	lsls	r3, r3, #10
 800842c:	4013      	ands	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008432:	4b34      	ldr	r3, [pc, #208]	; (8008504 <_ZL12MX_GPIO_Initv+0x104>)
 8008434:	4a33      	ldr	r2, [pc, #204]	; (8008504 <_ZL12MX_GPIO_Initv+0x104>)
 8008436:	6952      	ldr	r2, [r2, #20]
 8008438:	2180      	movs	r1, #128	; 0x80
 800843a:	02c9      	lsls	r1, r1, #11
 800843c:	430a      	orrs	r2, r1
 800843e:	615a      	str	r2, [r3, #20]
 8008440:	4b30      	ldr	r3, [pc, #192]	; (8008504 <_ZL12MX_GPIO_Initv+0x104>)
 8008442:	695a      	ldr	r2, [r3, #20]
 8008444:	2380      	movs	r3, #128	; 0x80
 8008446:	02db      	lsls	r3, r3, #11
 8008448:	4013      	ands	r3, r2
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IO_RELAY_0_1_Pin|IO_RELAY_0_2_Pin|IO_RELAY_0_3_Pin|IO_RELAY_0_4_Pin 
                          |IO_RELAY_0_5_Pin|IO_RELAY_0_6_Pin|IO_RELAY_0_7_Pin|IO_RELAY_1_7_Pin, GPIO_PIN_RESET);
 800844e:	2390      	movs	r3, #144	; 0x90
 8008450:	05db      	lsls	r3, r3, #23
 8008452:	2200      	movs	r2, #0
 8008454:	21ff      	movs	r1, #255	; 0xff
 8008456:	0018      	movs	r0, r3
 8008458:	f7f9 fbdd 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IO_RELAY_1_6_Pin|IO_RELAY_1_5_Pin|IO_RELAY_1_4_Pin|IO_RELAY_1_3_Pin 
                          |IO_RELAY_1_2_Pin|IO_RELAY_1_1_Pin|IO_LED_Pin, GPIO_PIN_RESET);
 800845c:	492a      	ldr	r1, [pc, #168]	; (8008508 <_ZL12MX_GPIO_Initv+0x108>)
 800845e:	4b2b      	ldr	r3, [pc, #172]	; (800850c <_ZL12MX_GPIO_Initv+0x10c>)
 8008460:	2200      	movs	r2, #0
 8008462:	0018      	movs	r0, r3
 8008464:	f7f9 fbd7 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IO_RELAY_0_1_Pin IO_RELAY_0_2_Pin IO_RELAY_0_3_Pin IO_RELAY_0_4_Pin 
                           IO_RELAY_0_5_Pin IO_RELAY_0_6_Pin IO_RELAY_0_7_Pin IO_RELAY_1_7_Pin */
  GPIO_InitStruct.Pin = IO_RELAY_0_1_Pin|IO_RELAY_0_2_Pin|IO_RELAY_0_3_Pin|IO_RELAY_0_4_Pin 
 8008468:	230c      	movs	r3, #12
 800846a:	18fb      	adds	r3, r7, r3
 800846c:	22ff      	movs	r2, #255	; 0xff
 800846e:	601a      	str	r2, [r3, #0]
                          |IO_RELAY_0_5_Pin|IO_RELAY_0_6_Pin|IO_RELAY_0_7_Pin|IO_RELAY_1_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008470:	230c      	movs	r3, #12
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	2201      	movs	r2, #1
 8008476:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008478:	230c      	movs	r3, #12
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	2200      	movs	r2, #0
 800847e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008480:	230c      	movs	r3, #12
 8008482:	18fb      	adds	r3, r7, r3
 8008484:	2200      	movs	r2, #0
 8008486:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008488:	230c      	movs	r3, #12
 800848a:	18fa      	adds	r2, r7, r3
 800848c:	2390      	movs	r3, #144	; 0x90
 800848e:	05db      	lsls	r3, r3, #23
 8008490:	0011      	movs	r1, r2
 8008492:	0018      	movs	r0, r3
 8008494:	f7f9 f94a 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_RELAY_1_6_Pin IO_RELAY_1_5_Pin IO_RELAY_1_4_Pin IO_RELAY_1_3_Pin 
                           IO_RELAY_1_2_Pin IO_RELAY_1_1_Pin IO_LED_Pin */
  GPIO_InitStruct.Pin = IO_RELAY_1_6_Pin|IO_RELAY_1_5_Pin|IO_RELAY_1_4_Pin|IO_RELAY_1_3_Pin 
 8008498:	230c      	movs	r3, #12
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	4a1a      	ldr	r2, [pc, #104]	; (8008508 <_ZL12MX_GPIO_Initv+0x108>)
 800849e:	601a      	str	r2, [r3, #0]
                          |IO_RELAY_1_2_Pin|IO_RELAY_1_1_Pin|IO_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084a0:	230c      	movs	r3, #12
 80084a2:	18fb      	adds	r3, r7, r3
 80084a4:	2201      	movs	r2, #1
 80084a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a8:	230c      	movs	r3, #12
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	2200      	movs	r2, #0
 80084ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084b0:	230c      	movs	r3, #12
 80084b2:	18fb      	adds	r3, r7, r3
 80084b4:	2200      	movs	r2, #0
 80084b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084b8:	230c      	movs	r3, #12
 80084ba:	18fb      	adds	r3, r7, r3
 80084bc:	4a13      	ldr	r2, [pc, #76]	; (800850c <_ZL12MX_GPIO_Initv+0x10c>)
 80084be:	0019      	movs	r1, r3
 80084c0:	0010      	movs	r0, r2
 80084c2:	f7f9 f933 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80084c6:	230c      	movs	r3, #12
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	2238      	movs	r2, #56	; 0x38
 80084cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ce:	230c      	movs	r3, #12
 80084d0:	18fb      	adds	r3, r7, r3
 80084d2:	2202      	movs	r2, #2
 80084d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d6:	230c      	movs	r3, #12
 80084d8:	18fb      	adds	r3, r7, r3
 80084da:	2200      	movs	r2, #0
 80084dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084de:	230c      	movs	r3, #12
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	2203      	movs	r2, #3
 80084e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80084e6:	230c      	movs	r3, #12
 80084e8:	18fb      	adds	r3, r7, r3
 80084ea:	2200      	movs	r2, #0
 80084ec:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ee:	230c      	movs	r3, #12
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	4a06      	ldr	r2, [pc, #24]	; (800850c <_ZL12MX_GPIO_Initv+0x10c>)
 80084f4:	0019      	movs	r1, r3
 80084f6:	0010      	movs	r0, r2
 80084f8:	f7f9 f918 	bl	800172c <HAL_GPIO_Init>

}
 80084fc:	46c0      	nop			; (mov r8, r8)
 80084fe:	46bd      	mov	sp, r7
 8008500:	b008      	add	sp, #32
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40021000 	.word	0x40021000
 8008508:	00003c07 	.word	0x00003c07
 800850c:	48000400 	.word	0x48000400

08008510 <_Z17ledToggleTaskFuncPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ledToggleTaskFunc */
void ledToggleTaskFunc(void const * argument)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // OFF
 8008518:	2380      	movs	r3, #128	; 0x80
 800851a:	019b      	lsls	r3, r3, #6
 800851c:	4814      	ldr	r0, [pc, #80]	; (8008570 <_Z17ledToggleTaskFuncPKv+0x60>)
 800851e:	2201      	movs	r2, #1
 8008520:	0019      	movs	r1, r3
 8008522:	f7f9 fb78 	bl	8001c16 <HAL_GPIO_WritePin>
	osDelay(800);
 8008526:	23c8      	movs	r3, #200	; 0xc8
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	0018      	movs	r0, r3
 800852c:	f7fd ffea 	bl	8006504 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // ON
 8008530:	2380      	movs	r3, #128	; 0x80
 8008532:	019b      	lsls	r3, r3, #6
 8008534:	480e      	ldr	r0, [pc, #56]	; (8008570 <_Z17ledToggleTaskFuncPKv+0x60>)
 8008536:	2200      	movs	r2, #0
 8008538:	0019      	movs	r1, r3
 800853a:	f7f9 fb6c 	bl	8001c16 <HAL_GPIO_WritePin>
	osDelay(50);
 800853e:	2032      	movs	r0, #50	; 0x32
 8008540:	f7fd ffe0 	bl	8006504 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // OFF
 8008544:	2380      	movs	r3, #128	; 0x80
 8008546:	019b      	lsls	r3, r3, #6
 8008548:	4809      	ldr	r0, [pc, #36]	; (8008570 <_Z17ledToggleTaskFuncPKv+0x60>)
 800854a:	2201      	movs	r2, #1
 800854c:	0019      	movs	r1, r3
 800854e:	f7f9 fb62 	bl	8001c16 <HAL_GPIO_WritePin>
	osDelay(100);
 8008552:	2064      	movs	r0, #100	; 0x64
 8008554:	f7fd ffd6 	bl	8006504 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // ON
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	019b      	lsls	r3, r3, #6
 800855c:	4804      	ldr	r0, [pc, #16]	; (8008570 <_Z17ledToggleTaskFuncPKv+0x60>)
 800855e:	2200      	movs	r2, #0
 8008560:	0019      	movs	r1, r3
 8008562:	f7f9 fb58 	bl	8001c16 <HAL_GPIO_WritePin>
	osDelay(50);
 8008566:	2032      	movs	r0, #50	; 0x32
 8008568:	f7fd ffcc 	bl	8006504 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // OFF
 800856c:	e7d4      	b.n	8008518 <_Z17ledToggleTaskFuncPKv+0x8>
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	48000400 	.word	0x48000400

08008574 <_Z12uartTaskFuncPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartTaskFunc */
void uartTaskFunc(void const * argument)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800857c:	f001 fcd4 	bl	8009f28 <MX_USB_DEVICE_Init>
  control controlDrv;
 8008580:	230c      	movs	r3, #12
 8008582:	18fb      	adds	r3, r7, r3
 8008584:	0018      	movs	r0, r3
 8008586:	f000 fb98 	bl	8008cba <_ZN7controlC1Ev>
  /* USER CODE BEGIN uartTaskFunc */

  /* Infinite loop */
  for(;;)
  {
	controlDrv.cyclic();
 800858a:	230c      	movs	r3, #12
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	0018      	movs	r0, r3
 8008590:	f000 ff7e 	bl	8009490 <_ZN7control6cyclicEv>
    osDelay(10);
 8008594:	200a      	movs	r0, #10
 8008596:	f7fd ffb5 	bl	8006504 <osDelay>
	controlDrv.cyclic();
 800859a:	e7f6      	b.n	800858a <_Z12uartTaskFuncPKv+0x16>

0800859c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a04      	ldr	r2, [pc, #16]	; (80085bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d101      	bne.n	80085b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80085ae:	f7f8 fed9 	bl	8001364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b002      	add	sp, #8
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	40012c00 	.word	0x40012c00

080085c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80085c4:	46c0      	nop			; (mov r8, r8)
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085d2:	4b12      	ldr	r3, [pc, #72]	; (800861c <HAL_MspInit+0x50>)
 80085d4:	4a11      	ldr	r2, [pc, #68]	; (800861c <HAL_MspInit+0x50>)
 80085d6:	6992      	ldr	r2, [r2, #24]
 80085d8:	2101      	movs	r1, #1
 80085da:	430a      	orrs	r2, r1
 80085dc:	619a      	str	r2, [r3, #24]
 80085de:	4b0f      	ldr	r3, [pc, #60]	; (800861c <HAL_MspInit+0x50>)
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	2201      	movs	r2, #1
 80085e4:	4013      	ands	r3, r2
 80085e6:	607b      	str	r3, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <HAL_MspInit+0x50>)
 80085ec:	4a0b      	ldr	r2, [pc, #44]	; (800861c <HAL_MspInit+0x50>)
 80085ee:	69d2      	ldr	r2, [r2, #28]
 80085f0:	2180      	movs	r1, #128	; 0x80
 80085f2:	0549      	lsls	r1, r1, #21
 80085f4:	430a      	orrs	r2, r1
 80085f6:	61da      	str	r2, [r3, #28]
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <HAL_MspInit+0x50>)
 80085fa:	69da      	ldr	r2, [r3, #28]
 80085fc:	2380      	movs	r3, #128	; 0x80
 80085fe:	055b      	lsls	r3, r3, #21
 8008600:	4013      	ands	r3, r2
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008606:	2302      	movs	r3, #2
 8008608:	425b      	negs	r3, r3
 800860a:	2200      	movs	r2, #0
 800860c:	2103      	movs	r1, #3
 800860e:	0018      	movs	r0, r3
 8008610:	f7f9 f866 	bl	80016e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008614:	46c0      	nop			; (mov r8, r8)
 8008616:	46bd      	mov	sp, r7
 8008618:	b002      	add	sp, #8
 800861a:	bd80      	pop	{r7, pc}
 800861c:	40021000 	.word	0x40021000

08008620 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008628:	2314      	movs	r3, #20
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	0018      	movs	r0, r3
 800862e:	2314      	movs	r3, #20
 8008630:	001a      	movs	r2, r3
 8008632:	2100      	movs	r1, #0
 8008634:	f002 fa93 	bl	800ab5e <memset>
  if(hcan->Instance==CAN)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1f      	ldr	r2, [pc, #124]	; (80086bc <HAL_CAN_MspInit+0x9c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d137      	bne.n	80086b2 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008642:	4b1f      	ldr	r3, [pc, #124]	; (80086c0 <HAL_CAN_MspInit+0xa0>)
 8008644:	4a1e      	ldr	r2, [pc, #120]	; (80086c0 <HAL_CAN_MspInit+0xa0>)
 8008646:	69d2      	ldr	r2, [r2, #28]
 8008648:	2180      	movs	r1, #128	; 0x80
 800864a:	0489      	lsls	r1, r1, #18
 800864c:	430a      	orrs	r2, r1
 800864e:	61da      	str	r2, [r3, #28]
 8008650:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <HAL_CAN_MspInit+0xa0>)
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	2380      	movs	r3, #128	; 0x80
 8008656:	049b      	lsls	r3, r3, #18
 8008658:	4013      	ands	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
 800865c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800865e:	4b18      	ldr	r3, [pc, #96]	; (80086c0 <HAL_CAN_MspInit+0xa0>)
 8008660:	4a17      	ldr	r2, [pc, #92]	; (80086c0 <HAL_CAN_MspInit+0xa0>)
 8008662:	6952      	ldr	r2, [r2, #20]
 8008664:	2180      	movs	r1, #128	; 0x80
 8008666:	02c9      	lsls	r1, r1, #11
 8008668:	430a      	orrs	r2, r1
 800866a:	615a      	str	r2, [r3, #20]
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <HAL_CAN_MspInit+0xa0>)
 800866e:	695a      	ldr	r2, [r3, #20]
 8008670:	2380      	movs	r3, #128	; 0x80
 8008672:	02db      	lsls	r3, r3, #11
 8008674:	4013      	ands	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800867a:	2314      	movs	r3, #20
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	22c0      	movs	r2, #192	; 0xc0
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008684:	2314      	movs	r3, #20
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	2202      	movs	r2, #2
 800868a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868c:	2314      	movs	r3, #20
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	2200      	movs	r2, #0
 8008692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008694:	2314      	movs	r3, #20
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	2203      	movs	r2, #3
 800869a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800869c:	2314      	movs	r3, #20
 800869e:	18fb      	adds	r3, r7, r3
 80086a0:	2204      	movs	r2, #4
 80086a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086a4:	2314      	movs	r3, #20
 80086a6:	18fb      	adds	r3, r7, r3
 80086a8:	4a06      	ldr	r2, [pc, #24]	; (80086c4 <HAL_CAN_MspInit+0xa4>)
 80086aa:	0019      	movs	r1, r3
 80086ac:	0010      	movs	r0, r2
 80086ae:	f7f9 f83d 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b00a      	add	sp, #40	; 0x28
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	40006400 	.word	0x40006400
 80086c0:	40021000 	.word	0x40021000
 80086c4:	48000400 	.word	0x48000400

080086c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	; 0x28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	0019      	movs	r1, r3
 80086de:	200d      	movs	r0, #13
 80086e0:	f7f8 fffe 	bl	80016e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 80086e4:	200d      	movs	r0, #13
 80086e6:	f7f9 f811 	bl	800170c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80086ea:	4b21      	ldr	r3, [pc, #132]	; (8008770 <HAL_InitTick+0xa8>)
 80086ec:	4a20      	ldr	r2, [pc, #128]	; (8008770 <HAL_InitTick+0xa8>)
 80086ee:	6992      	ldr	r2, [r2, #24]
 80086f0:	2180      	movs	r1, #128	; 0x80
 80086f2:	0109      	lsls	r1, r1, #4
 80086f4:	430a      	orrs	r2, r1
 80086f6:	619a      	str	r2, [r3, #24]
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <HAL_InitTick+0xa8>)
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	2380      	movs	r3, #128	; 0x80
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	4013      	ands	r3, r2
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008706:	230c      	movs	r3, #12
 8008708:	18fa      	adds	r2, r7, r3
 800870a:	2310      	movs	r3, #16
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	0011      	movs	r1, r2
 8008710:	0018      	movs	r0, r3
 8008712:	f7fc f8a1 	bl	8004858 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008716:	f7fc f889 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 800871a:	0003      	movs	r3, r0
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	4914      	ldr	r1, [pc, #80]	; (8008774 <HAL_InitTick+0xac>)
 8008722:	0018      	movs	r0, r3
 8008724:	f7f7 fd02 	bl	800012c <__udivsi3>
 8008728:	0003      	movs	r3, r0
 800872a:	3b01      	subs	r3, #1
 800872c:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <HAL_InitTick+0xb0>)
 8008730:	4a12      	ldr	r2, [pc, #72]	; (800877c <HAL_InitTick+0xb4>)
 8008732:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008734:	4b10      	ldr	r3, [pc, #64]	; (8008778 <HAL_InitTick+0xb0>)
 8008736:	4a12      	ldr	r2, [pc, #72]	; (8008780 <HAL_InitTick+0xb8>)
 8008738:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800873a:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <HAL_InitTick+0xb0>)
 800873c:	6a3a      	ldr	r2, [r7, #32]
 800873e:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8008740:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <HAL_InitTick+0xb0>)
 8008742:	2200      	movs	r2, #0
 8008744:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <HAL_InitTick+0xb0>)
 8008748:	2200      	movs	r2, #0
 800874a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <HAL_InitTick+0xb0>)
 800874e:	0018      	movs	r0, r3
 8008750:	f7fc f9aa 	bl	8004aa8 <HAL_TIM_Base_Init>
 8008754:	1e03      	subs	r3, r0, #0
 8008756:	d105      	bne.n	8008764 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8008758:	4b07      	ldr	r3, [pc, #28]	; (8008778 <HAL_InitTick+0xb0>)
 800875a:	0018      	movs	r0, r3
 800875c:	f7fc f9d8 	bl	8004b10 <HAL_TIM_Base_Start_IT>
 8008760:	0003      	movs	r3, r0
 8008762:	e000      	b.n	8008766 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
}
 8008766:	0018      	movs	r0, r3
 8008768:	46bd      	mov	sp, r7
 800876a:	b00a      	add	sp, #40	; 0x28
 800876c:	bd80      	pop	{r7, pc}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	40021000 	.word	0x40021000
 8008774:	000f4240 	.word	0x000f4240
 8008778:	200012d0 	.word	0x200012d0
 800877c:	40012c00 	.word	0x40012c00
 8008780:	000003e7 	.word	0x000003e7

08008784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008788:	46c0      	nop			; (mov r8, r8)
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008792:	e7fe      	b.n	8008792 <HardFault_Handler+0x4>

08008794 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008798:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800879a:	0018      	movs	r0, r3
 800879c:	f7fc f9d1 	bl	8004b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80087a0:	46c0      	nop			; (mov r8, r8)
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	200012d0 	.word	0x200012d0

080087ac <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80087b0:	4b03      	ldr	r3, [pc, #12]	; (80087c0 <USB_IRQHandler+0x14>)
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7f9 fb54 	bl	8001e60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80087b8:	46c0      	nop			; (mov r8, r8)
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	20001d04 	.word	0x20001d04

080087c4 <_ZN7num2strIaE6getStrEaPch>:
  return itoa(number, str, radix);
}

// Explicitly specialize for the member function
template <>
uint8_t num2str<int8_t>::getStr(int8_t number, char *str, uint8_t radix){
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6039      	str	r1, [r7, #0]
 80087cc:	0011      	movs	r1, r2
 80087ce:	1dfb      	adds	r3, r7, #7
 80087d0:	1c02      	adds	r2, r0, #0
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	1dbb      	adds	r3, r7, #6
 80087d6:	1c0a      	adds	r2, r1, #0
 80087d8:	701a      	strb	r2, [r3, #0]
  return itoa((int32_t)number, str, radix);
 80087da:	1dbb      	adds	r3, r7, #6
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	1dfb      	adds	r3, r7, #7
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	b25b      	sxtb	r3, r3
 80087e6:	0018      	movs	r0, r3
 80087e8:	f000 f8fe 	bl	80089e8 <_ZN11num2strBaseIaE4itoaEaPch>
 80087ec:	0003      	movs	r3, r0
}
 80087ee:	0018      	movs	r0, r3
 80087f0:	46bd      	mov	sp, r7
 80087f2:	b002      	add	sp, #8
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <_ZN7num2strIhE6getStrEhPch>:
  return itoa(number, str, radix);
}

// Explicitly specialize for the member function
template <>
uint8_t num2str<uint8_t>::getStr(uint8_t number, char *str, uint8_t radix){
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	0011      	movs	r1, r2
 8008800:	1dfb      	adds	r3, r7, #7
 8008802:	1c02      	adds	r2, r0, #0
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	1dbb      	adds	r3, r7, #6
 8008808:	1c0a      	adds	r2, r1, #0
 800880a:	701a      	strb	r2, [r3, #0]
  return itoa((int32_t)number, str, radix);
 800880c:	1dbb      	adds	r3, r7, #6
 800880e:	781a      	ldrb	r2, [r3, #0]
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	1dfb      	adds	r3, r7, #7
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	0018      	movs	r0, r3
 8008818:	f000 f998 	bl	8008b4c <_ZN11num2strBaseIhE4itoaEhPch>
 800881c:	0003      	movs	r3, r0
}
 800881e:	0018      	movs	r0, r3
 8008820:	46bd      	mov	sp, r7
 8008822:	b002      	add	sp, #8
 8008824:	bd80      	pop	{r7, pc}

08008826 <_ZN7cStringC1EPct>:
{
  //ctor
}


cString::cString(char *arg_string, uint16_t arg_size):index(0)
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	1dbb      	adds	r3, r7, #6
 8008832:	801a      	strh	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	80da      	strh	r2, [r3, #6]
{
  string = arg_string;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	601a      	str	r2, [r3, #0]
  maxSize = arg_size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	1dba      	adds	r2, r7, #6
 8008844:	8812      	ldrh	r2, [r2, #0]
 8008846:	809a      	strh	r2, [r3, #4]
}
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	0018      	movs	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	b004      	add	sp, #16
 8008850:	bd80      	pop	{r7, pc}

08008852 <_ZN7cString9addInt8_tEah>:
   return index; 
}


uint16_t cString::addInt8_t(int8_t number, uint8_t radix)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	0008      	movs	r0, r1
 800885c:	0011      	movs	r1, r2
 800885e:	1cfb      	adds	r3, r7, #3
 8008860:	1c02      	adds	r2, r0, #0
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	1cbb      	adds	r3, r7, #2
 8008866:	1c0a      	adds	r2, r1, #0
 8008868:	701a      	strb	r2, [r3, #0]
   uint16_t ret;
   ret = num2str<int8_t>::getStr(number, &(string[index]), radix); // buffer overflow
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	88d2      	ldrh	r2, [r2, #6]
 8008872:	1899      	adds	r1, r3, r2
 8008874:	1cbb      	adds	r3, r7, #2
 8008876:	781a      	ldrb	r2, [r3, #0]
 8008878:	1cfb      	adds	r3, r7, #3
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	b25b      	sxtb	r3, r3
 800887e:	0018      	movs	r0, r3
 8008880:	f7ff ffa0 	bl	80087c4 <_ZN7num2strIaE6getStrEaPch>
 8008884:	0003      	movs	r3, r0
 8008886:	001a      	movs	r2, r3
 8008888:	230e      	movs	r3, #14
 800888a:	18fb      	adds	r3, r7, r3
 800888c:	801a      	strh	r2, [r3, #0]
   index += ret;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	88da      	ldrh	r2, [r3, #6]
 8008892:	230e      	movs	r3, #14
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	18d3      	adds	r3, r2, r3
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	80da      	strh	r2, [r3, #6]
   
   return index; 
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	88db      	ldrh	r3, [r3, #6]
}
 80088a4:	0018      	movs	r0, r3
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b004      	add	sp, #16
 80088aa:	bd80      	pop	{r7, pc}

080088ac <_ZN7cString10addUint8_tEhh>:
   return index; 
}


uint16_t cString::addUint8_t(uint8_t number, uint8_t radix)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	0008      	movs	r0, r1
 80088b6:	0011      	movs	r1, r2
 80088b8:	1cfb      	adds	r3, r7, #3
 80088ba:	1c02      	adds	r2, r0, #0
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	1cbb      	adds	r3, r7, #2
 80088c0:	1c0a      	adds	r2, r1, #0
 80088c2:	701a      	strb	r2, [r3, #0]
   uint16_t ret;
   ret = num2str<uint8_t>::getStr(number, &(string[index]), radix); // buffer overflow
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	88d2      	ldrh	r2, [r2, #6]
 80088cc:	1899      	adds	r1, r3, r2
 80088ce:	1cbb      	adds	r3, r7, #2
 80088d0:	781a      	ldrb	r2, [r3, #0]
 80088d2:	1cfb      	adds	r3, r7, #3
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	0018      	movs	r0, r3
 80088d8:	f7ff ff8d 	bl	80087f6 <_ZN7num2strIhE6getStrEhPch>
 80088dc:	0003      	movs	r3, r0
 80088de:	001a      	movs	r2, r3
 80088e0:	230e      	movs	r3, #14
 80088e2:	18fb      	adds	r3, r7, r3
 80088e4:	801a      	strh	r2, [r3, #0]
   index += ret;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	88da      	ldrh	r2, [r3, #6]
 80088ea:	230e      	movs	r3, #14
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	18d3      	adds	r3, r2, r3
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	80da      	strh	r2, [r3, #6]
   
   return index; 
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	88db      	ldrh	r3, [r3, #6]
}
 80088fc:	0018      	movs	r0, r3
 80088fe:	46bd      	mov	sp, r7
 8008900:	b004      	add	sp, #16
 8008902:	bd80      	pop	{r7, pc}

08008904 <_ZN7cString7addCharEc>:


uint16_t cString::addChar(char arg_char)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	000a      	movs	r2, r1
 800890e:	1cfb      	adds	r3, r7, #3
 8008910:	701a      	strb	r2, [r3, #0]
  uint16_t ret = 0;
 8008912:	230e      	movs	r3, #14
 8008914:	18fb      	adds	r3, r7, r3
 8008916:	2200      	movs	r2, #0
 8008918:	801a      	strh	r2, [r3, #0]
  
  if((index+1) < maxSize)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	88db      	ldrh	r3, [r3, #6]
 800891e:	3301      	adds	r3, #1
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	8892      	ldrh	r2, [r2, #4]
 8008924:	4293      	cmp	r3, r2
 8008926:	da10      	bge.n	800894a <_ZN7cString7addCharEc+0x46>
  {
    string[index++] = arg_char;  
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	88db      	ldrh	r3, [r3, #6]
 8008930:	1c59      	adds	r1, r3, #1
 8008932:	b288      	uxth	r0, r1
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	80c8      	strh	r0, [r1, #6]
 8008938:	18d3      	adds	r3, r2, r3
 800893a:	1cfa      	adds	r2, r7, #3
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	701a      	strb	r2, [r3, #0]
    ret = index;
 8008940:	230e      	movs	r3, #14
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	88d2      	ldrh	r2, [r2, #6]
 8008948:	801a      	strh	r2, [r3, #0]
  }
  
  string[index] = 0x00;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	88d2      	ldrh	r2, [r2, #6]
 8008952:	189b      	adds	r3, r3, r2
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
  
  return ret;
 8008958:	230e      	movs	r3, #14
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	881b      	ldrh	r3, [r3, #0]
}
 800895e:	0018      	movs	r0, r3
 8008960:	46bd      	mov	sp, r7
 8008962:	b004      	add	sp, #16
 8008964:	bd80      	pop	{r7, pc}

08008966 <_ZN7cString9addStringEPc>:


uint16_t cString::addString(char *arg_string)
{
 8008966:	b590      	push	{r4, r7, lr}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  uint16_t i = 0;
 8008970:	230e      	movs	r3, #14
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	2200      	movs	r2, #0
 8008976:	801a      	strh	r2, [r3, #0]
  uint16_t ret = 0;
 8008978:	230c      	movs	r3, #12
 800897a:	18fb      	adds	r3, r7, r3
 800897c:	2200      	movs	r2, #0
 800897e:	801a      	strh	r2, [r3, #0]
  
  while(arg_string[i] != '\0')
 8008980:	230e      	movs	r3, #14
 8008982:	18fb      	adds	r3, r7, r3
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	18d3      	adds	r3, r2, r3
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d014      	beq.n	80089ba <_ZN7cString9addStringEPc+0x54>
  {
    ret = addChar(arg_string[i++]);
 8008990:	230e      	movs	r3, #14
 8008992:	18fb      	adds	r3, r7, r3
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	220e      	movs	r2, #14
 8008998:	18ba      	adds	r2, r7, r2
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	8011      	strh	r1, [r2, #0]
 800899e:	001a      	movs	r2, r3
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	189b      	adds	r3, r3, r2
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	230c      	movs	r3, #12
 80089a8:	18fc      	adds	r4, r7, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	0011      	movs	r1, r2
 80089ae:	0018      	movs	r0, r3
 80089b0:	f7ff ffa8 	bl	8008904 <_ZN7cString7addCharEc>
 80089b4:	0003      	movs	r3, r0
 80089b6:	8023      	strh	r3, [r4, #0]
  while(arg_string[i] != '\0')
 80089b8:	e7e2      	b.n	8008980 <_ZN7cString9addStringEPc+0x1a>
  }
  
  return ret;
 80089ba:	230c      	movs	r3, #12
 80089bc:	18fb      	adds	r3, r7, r3
 80089be:	881b      	ldrh	r3, [r3, #0]
}
 80089c0:	0018      	movs	r0, r3
 80089c2:	46bd      	mov	sp, r7
 80089c4:	b005      	add	sp, #20
 80089c6:	bd90      	pop	{r4, r7, pc}

080089c8 <_ZN7cStringpLEPc>:

cString &cString::operator+=(char *arg_string)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  addString(arg_string);
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	0011      	movs	r1, r2
 80089d8:	0018      	movs	r0, r3
 80089da:	f7ff ffc4 	bl	8008966 <_ZN7cString9addStringEPc>
  
  return *this;
 80089de:	687b      	ldr	r3, [r7, #4]
}
 80089e0:	0018      	movs	r0, r3
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b002      	add	sp, #8
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <_ZN11num2strBaseIaE4itoaEaPch>:
uint8_t num2strBase<T>::itoa(T argValue, char *sp, uint8_t radix)
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6039      	str	r1, [r7, #0]
 80089f0:	0011      	movs	r1, r2
 80089f2:	1dfb      	adds	r3, r7, #7
 80089f4:	1c02      	adds	r2, r0, #0
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	1dbb      	adds	r3, r7, #6
 80089fa:	1c0a      	adds	r2, r1, #0
 80089fc:	701a      	strb	r2, [r3, #0]
    char *tp = tmp;
 80089fe:	230c      	movs	r3, #12
 8008a00:	18fb      	adds	r3, r7, r3
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t sign = 0;    
 8008a04:	2321      	movs	r3, #33	; 0x21
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
    if((radix == 10) && (argValue < 0))
 8008a0c:	1dbb      	adds	r3, r7, #6
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b0a      	cmp	r3, #10
 8008a12:	d10f      	bne.n	8008a34 <_ZN11num2strBaseIaE4itoaEaPch+0x4c>
 8008a14:	1dfb      	adds	r3, r7, #7
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b7f      	cmp	r3, #127	; 0x7f
 8008a1a:	d90b      	bls.n	8008a34 <_ZN11num2strBaseIaE4itoaEaPch+0x4c>
      sign = 1;
 8008a1c:	2321      	movs	r3, #33	; 0x21
 8008a1e:	18fb      	adds	r3, r7, r3
 8008a20:	2201      	movs	r2, #1
 8008a22:	701a      	strb	r2, [r3, #0]
      value = -argValue; 
 8008a24:	1dfb      	adds	r3, r7, #7
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	425b      	negs	r3, r3
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	2323      	movs	r3, #35	; 0x23
 8008a2e:	18fb      	adds	r3, r7, r3
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e004      	b.n	8008a3e <_ZN11num2strBaseIaE4itoaEaPch+0x56>
      value = (unsigned)argValue;
 8008a34:	2323      	movs	r3, #35	; 0x23
 8008a36:	18fb      	adds	r3, r7, r3
 8008a38:	1dfa      	adds	r2, r7, #7
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	701a      	strb	r2, [r3, #0]
    while (value || tp == tmp)
 8008a3e:	2323      	movs	r3, #35	; 0x23
 8008a40:	18fb      	adds	r3, r7, r3
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d104      	bne.n	8008a54 <_ZN11num2strBaseIaE4itoaEaPch+0x6c>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	18fb      	adds	r3, r7, r3
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d13f      	bne.n	8008ad4 <_ZN11num2strBaseIaE4itoaEaPch+0xec>
      i = value % radix;
 8008a54:	2323      	movs	r3, #35	; 0x23
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	2200      	movs	r2, #0
 8008a5a:	569a      	ldrsb	r2, [r3, r2]
 8008a5c:	1dbb      	adds	r3, r7, #6
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	0019      	movs	r1, r3
 8008a62:	0010      	movs	r0, r2
 8008a64:	f7f7 fcd2 	bl	800040c <__aeabi_idivmod>
 8008a68:	000b      	movs	r3, r1
 8008a6a:	001a      	movs	r2, r3
 8008a6c:	231e      	movs	r3, #30
 8008a6e:	18fb      	adds	r3, r7, r3
 8008a70:	801a      	strh	r2, [r3, #0]
      value /= radix;
 8008a72:	2323      	movs	r3, #35	; 0x23
 8008a74:	18fb      	adds	r3, r7, r3
 8008a76:	2200      	movs	r2, #0
 8008a78:	569a      	ldrsb	r2, [r3, r2]
 8008a7a:	1dbb      	adds	r3, r7, #6
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	0019      	movs	r1, r3
 8008a80:	0010      	movs	r0, r2
 8008a82:	f7f7 fbdd 	bl	8000240 <__divsi3>
 8008a86:	0003      	movs	r3, r0
 8008a88:	001a      	movs	r2, r3
 8008a8a:	2323      	movs	r3, #35	; 0x23
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	701a      	strb	r2, [r3, #0]
      if (i < 10)
 8008a90:	231e      	movs	r3, #30
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	2200      	movs	r2, #0
 8008a96:	5e9b      	ldrsh	r3, [r3, r2]
 8008a98:	2b09      	cmp	r3, #9
 8008a9a:	dc0a      	bgt.n	8008ab2 <_ZN11num2strBaseIaE4itoaEaPch+0xca>
        *tp++ = i+'0';
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	627a      	str	r2, [r7, #36]	; 0x24
 8008aa2:	221e      	movs	r2, #30
 8008aa4:	18ba      	adds	r2, r7, r2
 8008aa6:	8812      	ldrh	r2, [r2, #0]
 8008aa8:	b2d2      	uxtb	r2, r2
 8008aaa:	3230      	adds	r2, #48	; 0x30
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	e009      	b.n	8008ac6 <_ZN11num2strBaseIaE4itoaEaPch+0xde>
        *tp++ = i + 'a' - 10;
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	1c5a      	adds	r2, r3, #1
 8008ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8008ab8:	221e      	movs	r2, #30
 8008aba:	18ba      	adds	r2, r7, r2
 8008abc:	8812      	ldrh	r2, [r2, #0]
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	3257      	adds	r2, #87	; 0x57
 8008ac2:	b2d2      	uxtb	r2, r2
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	2321      	movs	r3, #33	; 0x21
 8008ac8:	18fb      	adds	r3, r7, r3
 8008aca:	2221      	movs	r2, #33	; 0x21
 8008acc:	18ba      	adds	r2, r7, r2
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	701a      	strb	r2, [r3, #0]
    while (value || tp == tmp)
 8008ad2:	e7b4      	b.n	8008a3e <_ZN11num2strBaseIaE4itoaEaPch+0x56>
    len = tp - tmp;
 8008ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	2322      	movs	r3, #34	; 0x22
 8008ade:	18fb      	adds	r3, r7, r3
 8008ae0:	701a      	strb	r2, [r3, #0]
    if (sign) 
 8008ae2:	2321      	movs	r3, #33	; 0x21
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <_ZN11num2strBaseIaE4itoaEaPch+0x122>
      *sp++ = '-';
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	603a      	str	r2, [r7, #0]
 8008af2:	222d      	movs	r2, #45	; 0x2d
 8008af4:	701a      	strb	r2, [r3, #0]
      len++;
 8008af6:	2322      	movs	r3, #34	; 0x22
 8008af8:	18fb      	adds	r3, r7, r3
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	b25b      	sxtb	r3, r3
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	3301      	adds	r3, #1
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	2322      	movs	r3, #34	; 0x22
 8008b06:	18fb      	adds	r3, r7, r3
 8008b08:	701a      	strb	r2, [r3, #0]
    while (tp > tmp)
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	18fb      	adds	r3, r7, r3
 8008b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d90f      	bls.n	8008b34 <_ZN11num2strBaseIaE4itoaEaPch+0x14c>
      *sp++ = *--tp;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	603a      	str	r2, [r7, #0]
 8008b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1c:	3a01      	subs	r2, #1
 8008b1e:	627a      	str	r2, [r7, #36]	; 0x24
 8008b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b22:	7812      	ldrb	r2, [r2, #0]
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	2322      	movs	r3, #34	; 0x22
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	2222      	movs	r2, #34	; 0x22
 8008b2c:	18ba      	adds	r2, r7, r2
 8008b2e:	7812      	ldrb	r2, [r2, #0]
 8008b30:	701a      	strb	r2, [r3, #0]
    while (tp > tmp)
 8008b32:	e7ea      	b.n	8008b0a <_ZN11num2strBaseIaE4itoaEaPch+0x122>
    *sp++ = 0x00;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	603a      	str	r2, [r7, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	701a      	strb	r2, [r3, #0]
    return len;
 8008b3e:	2322      	movs	r3, #34	; 0x22
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	781b      	ldrb	r3, [r3, #0]
}
 8008b44:	0018      	movs	r0, r3
 8008b46:	46bd      	mov	sp, r7
 8008b48:	b00a      	add	sp, #40	; 0x28
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <_ZN11num2strBaseIhE4itoaEhPch>:
uint8_t num2strBase<T>::itoa(T argValue, char *sp, uint8_t radix)
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b08b      	sub	sp, #44	; 0x2c
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6039      	str	r1, [r7, #0]
 8008b54:	0011      	movs	r1, r2
 8008b56:	1dfb      	adds	r3, r7, #7
 8008b58:	1c02      	adds	r2, r0, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	1dbb      	adds	r3, r7, #6
 8008b5e:	1c0a      	adds	r2, r1, #0
 8008b60:	701a      	strb	r2, [r3, #0]
    char *tp = tmp;
 8008b62:	230c      	movs	r3, #12
 8008b64:	18fb      	adds	r3, r7, r3
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t sign = 0;    
 8008b68:	2321      	movs	r3, #33	; 0x21
 8008b6a:	18fb      	adds	r3, r7, r3
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
      value = (unsigned)argValue;
 8008b70:	2323      	movs	r3, #35	; 0x23
 8008b72:	18fb      	adds	r3, r7, r3
 8008b74:	1dfa      	adds	r2, r7, #7
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	701a      	strb	r2, [r3, #0]
    while (value || tp == tmp)
 8008b7a:	2323      	movs	r3, #35	; 0x23
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <_ZN11num2strBaseIhE4itoaEhPch+0x42>
 8008b84:	230c      	movs	r3, #12
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d136      	bne.n	8008bfc <_ZN11num2strBaseIhE4itoaEhPch+0xb0>
      i = value % radix;
 8008b8e:	2323      	movs	r3, #35	; 0x23
 8008b90:	18fa      	adds	r2, r7, r3
 8008b92:	1dbb      	adds	r3, r7, #6
 8008b94:	7812      	ldrb	r2, [r2, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	0019      	movs	r1, r3
 8008b9a:	0010      	movs	r0, r2
 8008b9c:	f7f7 fb4c 	bl	8000238 <__aeabi_uidivmod>
 8008ba0:	000b      	movs	r3, r1
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	231e      	movs	r3, #30
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	801a      	strh	r2, [r3, #0]
      value /= radix;
 8008baa:	2323      	movs	r3, #35	; 0x23
 8008bac:	18fc      	adds	r4, r7, r3
 8008bae:	2323      	movs	r3, #35	; 0x23
 8008bb0:	18fa      	adds	r2, r7, r3
 8008bb2:	1dbb      	adds	r3, r7, #6
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	0019      	movs	r1, r3
 8008bba:	0010      	movs	r0, r2
 8008bbc:	f7f7 fab6 	bl	800012c <__udivsi3>
 8008bc0:	0003      	movs	r3, r0
 8008bc2:	7023      	strb	r3, [r4, #0]
      if (i < 10)
 8008bc4:	231e      	movs	r3, #30
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	2200      	movs	r2, #0
 8008bca:	5e9b      	ldrsh	r3, [r3, r2]
 8008bcc:	2b09      	cmp	r3, #9
 8008bce:	dc0a      	bgt.n	8008be6 <_ZN11num2strBaseIhE4itoaEhPch+0x9a>
        *tp++ = i+'0';
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	627a      	str	r2, [r7, #36]	; 0x24
 8008bd6:	221e      	movs	r2, #30
 8008bd8:	18ba      	adds	r2, r7, r2
 8008bda:	8812      	ldrh	r2, [r2, #0]
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	3230      	adds	r2, #48	; 0x30
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	e7c9      	b.n	8008b7a <_ZN11num2strBaseIhE4itoaEhPch+0x2e>
        *tp++ = i + 'a' - 10;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	627a      	str	r2, [r7, #36]	; 0x24
 8008bec:	221e      	movs	r2, #30
 8008bee:	18ba      	adds	r2, r7, r2
 8008bf0:	8812      	ldrh	r2, [r2, #0]
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	3257      	adds	r2, #87	; 0x57
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]
    while (value || tp == tmp)
 8008bfa:	e7be      	b.n	8008b7a <_ZN11num2strBaseIhE4itoaEhPch+0x2e>
    len = tp - tmp;
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	230c      	movs	r3, #12
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	2322      	movs	r3, #34	; 0x22
 8008c06:	18fb      	adds	r3, r7, r3
 8008c08:	701a      	strb	r2, [r3, #0]
    if (sign) 
 8008c0a:	2321      	movs	r3, #33	; 0x21
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00e      	beq.n	8008c32 <_ZN11num2strBaseIhE4itoaEhPch+0xe6>
      *sp++ = '-';
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	603a      	str	r2, [r7, #0]
 8008c1a:	222d      	movs	r2, #45	; 0x2d
 8008c1c:	701a      	strb	r2, [r3, #0]
      len++;
 8008c1e:	2322      	movs	r3, #34	; 0x22
 8008c20:	18fb      	adds	r3, r7, r3
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b25b      	sxtb	r3, r3
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	3301      	adds	r3, #1
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	2322      	movs	r3, #34	; 0x22
 8008c2e:	18fb      	adds	r3, r7, r3
 8008c30:	701a      	strb	r2, [r3, #0]
    while (tp > tmp)
 8008c32:	230c      	movs	r3, #12
 8008c34:	18fb      	adds	r3, r7, r3
 8008c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d90f      	bls.n	8008c5c <_ZN11num2strBaseIhE4itoaEhPch+0x110>
      *sp++ = *--tp;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	603a      	str	r2, [r7, #0]
 8008c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c44:	3a01      	subs	r2, #1
 8008c46:	627a      	str	r2, [r7, #36]	; 0x24
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	7812      	ldrb	r2, [r2, #0]
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	2322      	movs	r3, #34	; 0x22
 8008c50:	18fb      	adds	r3, r7, r3
 8008c52:	2222      	movs	r2, #34	; 0x22
 8008c54:	18ba      	adds	r2, r7, r2
 8008c56:	7812      	ldrb	r2, [r2, #0]
 8008c58:	701a      	strb	r2, [r3, #0]
    while (tp > tmp)
 8008c5a:	e7ea      	b.n	8008c32 <_ZN11num2strBaseIhE4itoaEhPch+0xe6>
    *sp++ = 0x00;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	603a      	str	r2, [r7, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
    return len;
 8008c66:	2322      	movs	r3, #34	; 0x22
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	781b      	ldrb	r3, [r3, #0]
}
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	b00b      	add	sp, #44	; 0x2c
 8008c72:	bd90      	pop	{r4, r7, pc}

08008c74 <_ZN7cString7getSizeEv>:
  public:
    cString();
    cString(char *arg_string, uint16_t arg_size);
    
    char* getString(void) { return string; }
    uint16_t getSize(void) { return index; }
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	88db      	ldrh	r3, [r3, #6]
 8008c80:	0018      	movs	r0, r3
 8008c82:	46bd      	mov	sp, r7
 8008c84:	b002      	add	sp, #8
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <_ZN7str2numImE8getNumExEPmPchh>:
uint32_t str2num<uint32_t>::getNum(char *str, uint8_t size, uint8_t radix){
  return str2uint(str, size, radix); 
}

template <> // uint32_t
uint8_t str2num<uint32_t>::getNumEx(uint32_t *retValue, char *str, uint8_t size, uint8_t radix){
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	0019      	movs	r1, r3
 8008c94:	1dfb      	adds	r3, r7, #7
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	1dbb      	adds	r3, r7, #6
 8008c9a:	1c0a      	adds	r2, r1, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
  return str2uintEx(retValue, str, size, radix); 
 8008c9e:	1dfb      	adds	r3, r7, #7
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	1dbb      	adds	r3, r7, #6
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 feac 	bl	8009a08 <_ZN11str2numBaseImE10str2uintExEPmPcth>
 8008cb0:	0003      	movs	r3, r0
}
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	b004      	add	sp, #16
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <_ZN7controlC1Ev>:
  {PIN_IO12, GPIOB, IO_RELAY_1_6_Pin, "Relay12"},
  {PIN_IO13, GPIOA, IO_RELAY_1_7_Pin, "Relay13"},
};


control::control(void)
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
{

}
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b002      	add	sp, #8
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <_ZN7control11enableRelayEh>:

uint8_t control::enableRelay(uint8_t relay_id)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	000a      	movs	r2, r1
 8008cd6:	1cfb      	adds	r3, r7, #3
 8008cd8:	701a      	strb	r2, [r3, #0]
  uint8_t ret;

  if(relay_id < PIN_COUNT)
 8008cda:	1cfb      	adds	r3, r7, #3
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b0d      	cmp	r3, #13
 8008ce0:	dc1c      	bgt.n	8008d1c <_ZN7control11enableRelayEh+0x50>
  {
    HAL_GPIO_WritePin(pinsConfig[relay_id].GPIOx , pinsConfig[relay_id].GPIO_Pin, GPIO_PIN_SET);
 8008ce2:	1cfb      	adds	r3, r7, #3
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	4913      	ldr	r1, [pc, #76]	; (8008d34 <_ZN7control11enableRelayEh+0x68>)
 8008ce8:	0013      	movs	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	189b      	adds	r3, r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	18cb      	adds	r3, r1, r3
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	1cfb      	adds	r3, r7, #3
 8008cf8:	781a      	ldrb	r2, [r3, #0]
 8008cfa:	490e      	ldr	r1, [pc, #56]	; (8008d34 <_ZN7control11enableRelayEh+0x68>)
 8008cfc:	0013      	movs	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	189b      	adds	r3, r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	18cb      	adds	r3, r1, r3
 8008d06:	3308      	adds	r3, #8
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	f7f8 ff82 	bl	8001c16 <HAL_GPIO_WritePin>
    ret = 1;
 8008d12:	230f      	movs	r3, #15
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	2201      	movs	r2, #1
 8008d18:	701a      	strb	r2, [r3, #0]
 8008d1a:	e003      	b.n	8008d24 <_ZN7control11enableRelayEh+0x58>
  }
  else
  {
	ret = 0;
 8008d1c:	230f      	movs	r3, #15
 8008d1e:	18fb      	adds	r3, r7, r3
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008d24:	230f      	movs	r3, #15
 8008d26:	18fb      	adds	r3, r7, r3
 8008d28:	781b      	ldrb	r3, [r3, #0]
}
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b004      	add	sp, #16
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	20000020 	.word	0x20000020

08008d38 <_ZN7control12disableRelayEh>:

uint8_t control::disableRelay(uint8_t relay_id)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	000a      	movs	r2, r1
 8008d42:	1cfb      	adds	r3, r7, #3
 8008d44:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8008d46:	230f      	movs	r3, #15
 8008d48:	18fb      	adds	r3, r7, r3
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	701a      	strb	r2, [r3, #0]

  if(relay_id < PIN_COUNT)
 8008d4e:	1cfb      	adds	r3, r7, #3
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b0d      	cmp	r3, #13
 8008d54:	dc1c      	bgt.n	8008d90 <_ZN7control12disableRelayEh+0x58>
  {
    HAL_GPIO_WritePin(pinsConfig[relay_id].GPIOx , pinsConfig[relay_id].GPIO_Pin, GPIO_PIN_RESET);
 8008d56:	1cfb      	adds	r3, r7, #3
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	4913      	ldr	r1, [pc, #76]	; (8008da8 <_ZN7control12disableRelayEh+0x70>)
 8008d5c:	0013      	movs	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	189b      	adds	r3, r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	18cb      	adds	r3, r1, r3
 8008d66:	3304      	adds	r3, #4
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	1cfb      	adds	r3, r7, #3
 8008d6c:	781a      	ldrb	r2, [r3, #0]
 8008d6e:	490e      	ldr	r1, [pc, #56]	; (8008da8 <_ZN7control12disableRelayEh+0x70>)
 8008d70:	0013      	movs	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	189b      	adds	r3, r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	18cb      	adds	r3, r1, r3
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	0019      	movs	r1, r3
 8008d82:	f7f8 ff48 	bl	8001c16 <HAL_GPIO_WritePin>
    ret = 1;
 8008d86:	230f      	movs	r3, #15
 8008d88:	18fb      	adds	r3, r7, r3
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	e003      	b.n	8008d98 <_ZN7control12disableRelayEh+0x60>
  }
  else
  {
	ret = 0;
 8008d90:	230f      	movs	r3, #15
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008d98:	230f      	movs	r3, #15
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	781b      	ldrb	r3, [r3, #0]
}
 8008d9e:	0018      	movs	r0, r3
 8008da0:	46bd      	mov	sp, r7
 8008da2:	b004      	add	sp, #16
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	20000020 	.word	0x20000020

08008dac <_ZN7control14isRelayEnabledEh>:

uint8_t control::isRelayEnabled(uint8_t relay_id)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	000a      	movs	r2, r1
 8008db6:	1cfb      	adds	r3, r7, #3
 8008db8:	701a      	strb	r2, [r3, #0]
  GPIO_PinState pinState;
  uint8_t ret;

  if(relay_id < PIN_COUNT)
 8008dba:	1cfb      	adds	r3, r7, #3
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b0d      	cmp	r3, #13
 8008dc0:	dc2a      	bgt.n	8008e18 <_ZN7control14isRelayEnabledEh+0x6c>
  {
    pinState = HAL_GPIO_ReadPin(pinsConfig[relay_id].GPIOx, pinsConfig[relay_id].GPIO_Pin);
 8008dc2:	1cfb      	adds	r3, r7, #3
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	491a      	ldr	r1, [pc, #104]	; (8008e30 <_ZN7control14isRelayEnabledEh+0x84>)
 8008dc8:	0013      	movs	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	189b      	adds	r3, r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	18cb      	adds	r3, r1, r3
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	1cfb      	adds	r3, r7, #3
 8008dd8:	781a      	ldrb	r2, [r3, #0]
 8008dda:	4915      	ldr	r1, [pc, #84]	; (8008e30 <_ZN7control14isRelayEnabledEh+0x84>)
 8008ddc:	0013      	movs	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	189b      	adds	r3, r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	18cb      	adds	r3, r1, r3
 8008de6:	3308      	adds	r3, #8
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	0019      	movs	r1, r3
 8008dec:	f7f8 fef6 	bl	8001bdc <HAL_GPIO_ReadPin>
 8008df0:	0003      	movs	r3, r0
 8008df2:	001a      	movs	r2, r3
 8008df4:	230e      	movs	r3, #14
 8008df6:	18fb      	adds	r3, r7, r3
 8008df8:	701a      	strb	r2, [r3, #0]
    if(pinState == GPIO_PIN_SET)
 8008dfa:	230e      	movs	r3, #14
 8008dfc:	18fb      	adds	r3, r7, r3
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d104      	bne.n	8008e0e <_ZN7control14isRelayEnabledEh+0x62>
    {
      ret = 1;
 8008e04:	230f      	movs	r3, #15
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	2201      	movs	r2, #1
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	e008      	b.n	8008e20 <_ZN7control14isRelayEnabledEh+0x74>
    }
    else
    {
      ret = 0;
 8008e0e:	230f      	movs	r3, #15
 8008e10:	18fb      	adds	r3, r7, r3
 8008e12:	2200      	movs	r2, #0
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e003      	b.n	8008e20 <_ZN7control14isRelayEnabledEh+0x74>
    }
  }
  else
  {
	ret = 0;
 8008e18:	230f      	movs	r3, #15
 8008e1a:	18fb      	adds	r3, r7, r3
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
  }


  return ret;
 8008e20:	230f      	movs	r3, #15
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	781b      	ldrb	r3, [r3, #0]
}
 8008e26:	0018      	movs	r0, r3
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	b004      	add	sp, #16
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	20000020 	.word	0x20000020

08008e34 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE>:


uint8_t control::configurePin(uint8_t arg_id, ePinMode arg_mode, ePinPush arg_push)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b089      	sub	sp, #36	; 0x24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	000c      	movs	r4, r1
 8008e3e:	0010      	movs	r0, r2
 8008e40:	0019      	movs	r1, r3
 8008e42:	1cfb      	adds	r3, r7, #3
 8008e44:	1c22      	adds	r2, r4, #0
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	1cbb      	adds	r3, r7, #2
 8008e4a:	1c02      	adds	r2, r0, #0
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	1c7b      	adds	r3, r7, #1
 8008e50:	1c0a      	adds	r2, r1, #0
 8008e52:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  GPIO_InitStruct.Pin = pinsConfig[arg_id].GPIO_Pin;
 8008e54:	1cfb      	adds	r3, r7, #3
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	492a      	ldr	r1, [pc, #168]	; (8008f04 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xd0>)
 8008e5a:	0013      	movs	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	18cb      	adds	r3, r1, r3
 8008e64:	3308      	adds	r3, #8
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	001a      	movs	r2, r3
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	18fb      	adds	r3, r7, r3
 8008e6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = pinModeConv[arg_mode];
 8008e70:	1cbb      	adds	r3, r7, #2
 8008e72:	781a      	ldrb	r2, [r3, #0]
 8008e74:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xd4>)
 8008e76:	0092      	lsls	r2, r2, #2
 8008e78:	58d2      	ldr	r2, [r2, r3]
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	18fb      	adds	r3, r7, r3
 8008e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = pinPushConv[arg_push];
 8008e80:	1c7b      	adds	r3, r7, #1
 8008e82:	781a      	ldrb	r2, [r3, #0]
 8008e84:	4b21      	ldr	r3, [pc, #132]	; (8008f0c <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xd8>)
 8008e86:	0092      	lsls	r2, r2, #2
 8008e88:	58d2      	ldr	r2, [r2, r3]
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	18fb      	adds	r3, r7, r3
 8008e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e90:	230c      	movs	r3, #12
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	2200      	movs	r2, #0
 8008e96:	60da      	str	r2, [r3, #12]

  if(arg_id < PIN_COUNT)
 8008e98:	1cfb      	adds	r3, r7, #3
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b0d      	cmp	r3, #13
 8008e9e:	dc2b      	bgt.n	8008ef8 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xc4>
  {
    HAL_GPIO_DeInit(pinsConfig[arg_id].GPIOx, pinsConfig[arg_id].GPIO_Pin);
 8008ea0:	1cfb      	adds	r3, r7, #3
 8008ea2:	781a      	ldrb	r2, [r3, #0]
 8008ea4:	4917      	ldr	r1, [pc, #92]	; (8008f04 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xd0>)
 8008ea6:	0013      	movs	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	189b      	adds	r3, r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	18cb      	adds	r3, r1, r3
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	1cfb      	adds	r3, r7, #3
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	4912      	ldr	r1, [pc, #72]	; (8008f04 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xd0>)
 8008eba:	0013      	movs	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	189b      	adds	r3, r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	18cb      	adds	r3, r1, r3
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	0019      	movs	r1, r3
 8008eca:	f7f8 fdab 	bl	8001a24 <HAL_GPIO_DeInit>
    HAL_GPIO_Init(pinsConfig[arg_id].GPIOx, &GPIO_InitStruct);
 8008ece:	1cfb      	adds	r3, r7, #3
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	490c      	ldr	r1, [pc, #48]	; (8008f04 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xd0>)
 8008ed4:	0013      	movs	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	189b      	adds	r3, r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	18cb      	adds	r3, r1, r3
 8008ede:	3304      	adds	r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	220c      	movs	r2, #12
 8008ee4:	18ba      	adds	r2, r7, r2
 8008ee6:	0011      	movs	r1, r2
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f7f8 fc1f 	bl	800172c <HAL_GPIO_Init>
    CDC_Transmit_FS((uint8_t*)"As you wish!\r", strlen("As you wish!\r"));
 8008eee:	4b08      	ldr	r3, [pc, #32]	; (8008f10 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE+0xdc>)
 8008ef0:	210d      	movs	r1, #13
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f001 f8bc 	bl	800a070 <CDC_Transmit_FS>
  }
}
 8008ef8:	46c0      	nop			; (mov r8, r8)
 8008efa:	0018      	movs	r0, r3
 8008efc:	46bd      	mov	sp, r7
 8008efe:	b009      	add	sp, #36	; 0x24
 8008f00:	bd90      	pop	{r4, r7, pc}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	20000020 	.word	0x20000020
 8008f08:	20000008 	.word	0x20000008
 8008f0c:	20000014 	.word	0x20000014
 8008f10:	0800acec 	.word	0x0800acec

08008f14 <_ZN7control11controllPinEhh>:

uint8_t control::controllPin(uint8_t arg_id, uint8_t arg_state)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08c      	sub	sp, #48	; 0x30
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	0008      	movs	r0, r1
 8008f1e:	0011      	movs	r1, r2
 8008f20:	1cfb      	adds	r3, r7, #3
 8008f22:	1c02      	adds	r2, r0, #0
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	1cbb      	adds	r3, r7, #2
 8008f28:	1c0a      	adds	r2, r1, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[32] = {0};
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	18fb      	adds	r3, r7, r3
 8008f30:	0018      	movs	r0, r3
 8008f32:	2320      	movs	r3, #32
 8008f34:	001a      	movs	r2, r3
 8008f36:	2100      	movs	r1, #0
 8008f38:	f001 fe11 	bl	800ab5e <memset>
  cString string((char*)buffer, 32);
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	18f9      	adds	r1, r7, r3
 8008f40:	2308      	movs	r3, #8
 8008f42:	18fb      	adds	r3, r7, r3
 8008f44:	2220      	movs	r2, #32
 8008f46:	0018      	movs	r0, r3
 8008f48:	f7ff fc6d 	bl	8008826 <_ZN7cStringC1EPct>

  if(arg_id < PIN_COUNT)
 8008f4c:	1cfb      	adds	r3, r7, #3
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b0d      	cmp	r3, #13
 8008f52:	dc4d      	bgt.n	8008ff0 <_ZN7control11controllPinEhh+0xdc>
  {
    if(arg_state == 1)
 8008f54:	1cbb      	adds	r3, r7, #2
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d124      	bne.n	8008fa6 <_ZN7control11controllPinEhh+0x92>
    {
      enableRelay(arg_id);
 8008f5c:	1cfb      	adds	r3, r7, #3
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	0011      	movs	r1, r2
 8008f64:	0018      	movs	r0, r3
 8008f66:	f7ff feb1 	bl	8008ccc <_ZN7control11enableRelayEh>
      string += "Channel ";
 8008f6a:	4a2e      	ldr	r2, [pc, #184]	; (8009024 <_ZN7control11controllPinEhh+0x110>)
 8008f6c:	2308      	movs	r3, #8
 8008f6e:	18fb      	adds	r3, r7, r3
 8008f70:	0011      	movs	r1, r2
 8008f72:	0018      	movs	r0, r3
 8008f74:	f7ff fd28 	bl	80089c8 <_ZN7cStringpLEPc>
      string.addInt8_t((uint8_t)pinsConfig[arg_id].pinID, 10);
 8008f78:	1cfb      	adds	r3, r7, #3
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	492a      	ldr	r1, [pc, #168]	; (8009028 <_ZN7control11controllPinEhh+0x114>)
 8008f7e:	0013      	movs	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	189b      	adds	r3, r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	5c5b      	ldrb	r3, [r3, r1]
 8008f88:	b259      	sxtb	r1, r3
 8008f8a:	2308      	movs	r3, #8
 8008f8c:	18fb      	adds	r3, r7, r3
 8008f8e:	220a      	movs	r2, #10
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7ff fc5e 	bl	8008852 <_ZN7cString9addInt8_tEah>
      //string += pinsConfig[arg_id].name;
      string += " is now enabled\r";
 8008f96:	4a25      	ldr	r2, [pc, #148]	; (800902c <_ZN7control11controllPinEhh+0x118>)
 8008f98:	2308      	movs	r3, #8
 8008f9a:	18fb      	adds	r3, r7, r3
 8008f9c:	0011      	movs	r1, r2
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f7ff fd12 	bl	80089c8 <_ZN7cStringpLEPc>
 8008fa4:	e02b      	b.n	8008ffe <_ZN7control11controllPinEhh+0xea>
    }
    else
    {
      disableRelay(arg_id);
 8008fa6:	1cfb      	adds	r3, r7, #3
 8008fa8:	781a      	ldrb	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	0011      	movs	r1, r2
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f7ff fec2 	bl	8008d38 <_ZN7control12disableRelayEh>
      string += "Channel ";
 8008fb4:	4a1b      	ldr	r2, [pc, #108]	; (8009024 <_ZN7control11controllPinEhh+0x110>)
 8008fb6:	2308      	movs	r3, #8
 8008fb8:	18fb      	adds	r3, r7, r3
 8008fba:	0011      	movs	r1, r2
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f7ff fd03 	bl	80089c8 <_ZN7cStringpLEPc>
      string.addInt8_t((uint8_t)pinsConfig[arg_id].pinID, 10);
 8008fc2:	1cfb      	adds	r3, r7, #3
 8008fc4:	781a      	ldrb	r2, [r3, #0]
 8008fc6:	4918      	ldr	r1, [pc, #96]	; (8009028 <_ZN7control11controllPinEhh+0x114>)
 8008fc8:	0013      	movs	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	189b      	adds	r3, r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	5c5b      	ldrb	r3, [r3, r1]
 8008fd2:	b259      	sxtb	r1, r3
 8008fd4:	2308      	movs	r3, #8
 8008fd6:	18fb      	adds	r3, r7, r3
 8008fd8:	220a      	movs	r2, #10
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f7ff fc39 	bl	8008852 <_ZN7cString9addInt8_tEah>
      //string += pinsConfig[arg_id].name;
      string += " is now disabled\r";
 8008fe0:	4a13      	ldr	r2, [pc, #76]	; (8009030 <_ZN7control11controllPinEhh+0x11c>)
 8008fe2:	2308      	movs	r3, #8
 8008fe4:	18fb      	adds	r3, r7, r3
 8008fe6:	0011      	movs	r1, r2
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f7ff fced 	bl	80089c8 <_ZN7cStringpLEPc>
 8008fee:	e006      	b.n	8008ffe <_ZN7control11controllPinEhh+0xea>
    }
  }
  else
  {
    string += "index out of range\r";
 8008ff0:	4a10      	ldr	r2, [pc, #64]	; (8009034 <_ZN7control11controllPinEhh+0x120>)
 8008ff2:	2308      	movs	r3, #8
 8008ff4:	18fb      	adds	r3, r7, r3
 8008ff6:	0011      	movs	r1, r2
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7ff fce5 	bl	80089c8 <_ZN7cStringpLEPc>
  }

  CDC_Transmit_FS(buffer, string.getSize());
 8008ffe:	2308      	movs	r3, #8
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	0018      	movs	r0, r3
 8009004:	f7ff fe36 	bl	8008c74 <_ZN7cString7getSizeEv>
 8009008:	0003      	movs	r3, r0
 800900a:	001a      	movs	r2, r3
 800900c:	2310      	movs	r3, #16
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	0011      	movs	r1, r2
 8009012:	0018      	movs	r0, r3
 8009014:	f001 f82c 	bl	800a070 <CDC_Transmit_FS>

}
 8009018:	46c0      	nop			; (mov r8, r8)
 800901a:	0018      	movs	r0, r3
 800901c:	46bd      	mov	sp, r7
 800901e:	b00c      	add	sp, #48	; 0x30
 8009020:	bd80      	pop	{r7, pc}
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	0800acfc 	.word	0x0800acfc
 8009028:	20000020 	.word	0x20000020
 800902c:	0800ad08 	.word	0x0800ad08
 8009030:	0800ad1c 	.word	0x0800ad1c
 8009034:	0800ad30 	.word	0x0800ad30

08009038 <_ZN7control17controllPinSetBinEt>:


uint8_t control::controllPinSetBin(uint16_t tempNumber)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	000a      	movs	r2, r1
 8009042:	1cbb      	adds	r3, r7, #2
 8009044:	801a      	strh	r2, [r3, #0]
  int8_t relayNumber;
  int8_t relayState;

  for(relayNumber = 0; relayNumber <= 14; relayNumber++)
 8009046:	230f      	movs	r3, #15
 8009048:	18fb      	adds	r3, r7, r3
 800904a:	2200      	movs	r2, #0
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	230f      	movs	r3, #15
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	b25b      	sxtb	r3, r3
 8009056:	2b0e      	cmp	r3, #14
 8009058:	dc2e      	bgt.n	80090b8 <_ZN7control17controllPinSetBinEt+0x80>
  {
	relayState = tempNumber & 0x0001;
 800905a:	1cbb      	adds	r3, r7, #2
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b25a      	sxtb	r2, r3
 8009060:	230e      	movs	r3, #14
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	2101      	movs	r1, #1
 8009066:	400a      	ands	r2, r1
 8009068:	701a      	strb	r2, [r3, #0]
    if(relayState == 1)
 800906a:	230e      	movs	r3, #14
 800906c:	18fb      	adds	r3, r7, r3
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	b25b      	sxtb	r3, r3
 8009072:	2b01      	cmp	r3, #1
 8009074:	d108      	bne.n	8009088 <_ZN7control17controllPinSetBinEt+0x50>
    {
      enableRelay(relayNumber);
 8009076:	230f      	movs	r3, #15
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	0011      	movs	r1, r2
 8009080:	0018      	movs	r0, r3
 8009082:	f7ff fe23 	bl	8008ccc <_ZN7control11enableRelayEh>
 8009086:	e007      	b.n	8009098 <_ZN7control17controllPinSetBinEt+0x60>
    }
    else
    {
      disableRelay(relayNumber);
 8009088:	230f      	movs	r3, #15
 800908a:	18fb      	adds	r3, r7, r3
 800908c:	781a      	ldrb	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	0011      	movs	r1, r2
 8009092:	0018      	movs	r0, r3
 8009094:	f7ff fe50 	bl	8008d38 <_ZN7control12disableRelayEh>
    }

    tempNumber>>=1;
 8009098:	1cbb      	adds	r3, r7, #2
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	105a      	asrs	r2, r3, #1
 800909e:	1cbb      	adds	r3, r7, #2
 80090a0:	801a      	strh	r2, [r3, #0]
  for(relayNumber = 0; relayNumber <= 14; relayNumber++)
 80090a2:	230f      	movs	r3, #15
 80090a4:	18fb      	adds	r3, r7, r3
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	b25b      	sxtb	r3, r3
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	3301      	adds	r3, #1
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	230f      	movs	r3, #15
 80090b2:	18fb      	adds	r3, r7, r3
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	e7ca      	b.n	800904e <_ZN7control17controllPinSetBinEt+0x16>
  }

  reportBin();
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	0018      	movs	r0, r3
 80090bc:	f000 f970 	bl	80093a0 <_ZN7control9reportBinEv>
}
 80090c0:	46c0      	nop			; (mov r8, r8)
 80090c2:	0018      	movs	r0, r3
 80090c4:	46bd      	mov	sp, r7
 80090c6:	b004      	add	sp, #16
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZN7control20controllPinEnableBinEt>:

uint8_t control::controllPinEnableBin(uint16_t tempNumber)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	000a      	movs	r2, r1
 80090d4:	1cbb      	adds	r3, r7, #2
 80090d6:	801a      	strh	r2, [r3, #0]
  int8_t relayNumber;
  int8_t relayState;

  for(relayNumber = 0; relayNumber <= 14; relayNumber++)
 80090d8:	230f      	movs	r3, #15
 80090da:	18fb      	adds	r3, r7, r3
 80090dc:	2200      	movs	r2, #0
 80090de:	701a      	strb	r2, [r3, #0]
 80090e0:	230f      	movs	r3, #15
 80090e2:	18fb      	adds	r3, r7, r3
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	b25b      	sxtb	r3, r3
 80090e8:	2b0e      	cmp	r3, #14
 80090ea:	dc25      	bgt.n	8009138 <_ZN7control20controllPinEnableBinEt+0x6e>
  {
	relayState = tempNumber & 0x0001;
 80090ec:	1cbb      	adds	r3, r7, #2
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b25a      	sxtb	r2, r3
 80090f2:	230e      	movs	r3, #14
 80090f4:	18fb      	adds	r3, r7, r3
 80090f6:	2101      	movs	r1, #1
 80090f8:	400a      	ands	r2, r1
 80090fa:	701a      	strb	r2, [r3, #0]
    if(relayState == 1)
 80090fc:	230e      	movs	r3, #14
 80090fe:	18fb      	adds	r3, r7, r3
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b25b      	sxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d107      	bne.n	8009118 <_ZN7control20controllPinEnableBinEt+0x4e>
    {
      enableRelay(relayNumber);
 8009108:	230f      	movs	r3, #15
 800910a:	18fb      	adds	r3, r7, r3
 800910c:	781a      	ldrb	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	0011      	movs	r1, r2
 8009112:	0018      	movs	r0, r3
 8009114:	f7ff fdda 	bl	8008ccc <_ZN7control11enableRelayEh>
    }

    tempNumber>>=1;
 8009118:	1cbb      	adds	r3, r7, #2
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	105a      	asrs	r2, r3, #1
 800911e:	1cbb      	adds	r3, r7, #2
 8009120:	801a      	strh	r2, [r3, #0]
  for(relayNumber = 0; relayNumber <= 14; relayNumber++)
 8009122:	230f      	movs	r3, #15
 8009124:	18fb      	adds	r3, r7, r3
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b25b      	sxtb	r3, r3
 800912a:	b2db      	uxtb	r3, r3
 800912c:	3301      	adds	r3, #1
 800912e:	b2da      	uxtb	r2, r3
 8009130:	230f      	movs	r3, #15
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	701a      	strb	r2, [r3, #0]
 8009136:	e7d3      	b.n	80090e0 <_ZN7control20controllPinEnableBinEt+0x16>
  }

  reportBin();
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	0018      	movs	r0, r3
 800913c:	f000 f930 	bl	80093a0 <_ZN7control9reportBinEv>
}
 8009140:	46c0      	nop			; (mov r8, r8)
 8009142:	0018      	movs	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	b004      	add	sp, #16
 8009148:	bd80      	pop	{r7, pc}

0800914a <_ZN7control21controllPinDisableBinEt>:

uint8_t control::controllPinDisableBin(uint16_t tempNumber)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	000a      	movs	r2, r1
 8009154:	1cbb      	adds	r3, r7, #2
 8009156:	801a      	strh	r2, [r3, #0]
  int8_t relayNumber;
  int8_t relayState;


  for(relayNumber = 0; relayNumber <= 14; relayNumber++)
 8009158:	230f      	movs	r3, #15
 800915a:	18fb      	adds	r3, r7, r3
 800915c:	2200      	movs	r2, #0
 800915e:	701a      	strb	r2, [r3, #0]
 8009160:	230f      	movs	r3, #15
 8009162:	18fb      	adds	r3, r7, r3
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	b25b      	sxtb	r3, r3
 8009168:	2b0e      	cmp	r3, #14
 800916a:	dc25      	bgt.n	80091b8 <_ZN7control21controllPinDisableBinEt+0x6e>
  {
	relayState = tempNumber & 0x0001;
 800916c:	1cbb      	adds	r3, r7, #2
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	b25a      	sxtb	r2, r3
 8009172:	230e      	movs	r3, #14
 8009174:	18fb      	adds	r3, r7, r3
 8009176:	2101      	movs	r1, #1
 8009178:	400a      	ands	r2, r1
 800917a:	701a      	strb	r2, [r3, #0]
    if(relayState == 0)
 800917c:	230e      	movs	r3, #14
 800917e:	18fb      	adds	r3, r7, r3
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	b25b      	sxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d107      	bne.n	8009198 <_ZN7control21controllPinDisableBinEt+0x4e>
    {
      disableRelay(relayNumber);
 8009188:	230f      	movs	r3, #15
 800918a:	18fb      	adds	r3, r7, r3
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	0011      	movs	r1, r2
 8009192:	0018      	movs	r0, r3
 8009194:	f7ff fdd0 	bl	8008d38 <_ZN7control12disableRelayEh>
    }

    tempNumber>>=1;
 8009198:	1cbb      	adds	r3, r7, #2
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	105a      	asrs	r2, r3, #1
 800919e:	1cbb      	adds	r3, r7, #2
 80091a0:	801a      	strh	r2, [r3, #0]
  for(relayNumber = 0; relayNumber <= 14; relayNumber++)
 80091a2:	230f      	movs	r3, #15
 80091a4:	18fb      	adds	r3, r7, r3
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	b25b      	sxtb	r3, r3
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	3301      	adds	r3, #1
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	230f      	movs	r3, #15
 80091b2:	18fb      	adds	r3, r7, r3
 80091b4:	701a      	strb	r2, [r3, #0]
 80091b6:	e7d3      	b.n	8009160 <_ZN7control21controllPinDisableBinEt+0x16>
  }

  reportBin();
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	0018      	movs	r0, r3
 80091bc:	f000 f8f0 	bl	80093a0 <_ZN7control9reportBinEv>
}
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	0018      	movs	r0, r3
 80091c4:	46bd      	mov	sp, r7
 80091c6:	b004      	add	sp, #16
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <_ZN7control10reportPinsEh>:


void control::reportPins(uint8_t arg_id)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b096      	sub	sp, #88	; 0x58
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	000a      	movs	r2, r1
 80091d6:	1cfb      	adds	r3, r7, #3
 80091d8:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[64] = {0};
 80091da:	2314      	movs	r3, #20
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	0018      	movs	r0, r3
 80091e0:	2340      	movs	r3, #64	; 0x40
 80091e2:	001a      	movs	r2, r3
 80091e4:	2100      	movs	r1, #0
 80091e6:	f001 fcba 	bl	800ab5e <memset>
  cString string((char*)buffer, 64);
 80091ea:	2314      	movs	r3, #20
 80091ec:	18f9      	adds	r1, r7, r3
 80091ee:	230c      	movs	r3, #12
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	2240      	movs	r2, #64	; 0x40
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7ff fb16 	bl	8008826 <_ZN7cStringC1EPct>
  uint8_t pinState;
  uint8_t isFirst = 1;
 80091fa:	2357      	movs	r3, #87	; 0x57
 80091fc:	18fb      	adds	r3, r7, r3
 80091fe:	2201      	movs	r2, #1
 8009200:	701a      	strb	r2, [r3, #0]

  if(arg_id == 0xff)
 8009202:	1cfb      	adds	r3, r7, #3
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2bff      	cmp	r3, #255	; 0xff
 8009208:	d164      	bne.n	80092d4 <_ZN7control10reportPinsEh+0x108>
  {
     for(uint8_t i=0; i<PIN_COUNT; i++)
 800920a:	2356      	movs	r3, #86	; 0x56
 800920c:	18fb      	adds	r3, r7, r3
 800920e:	2200      	movs	r2, #0
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	2356      	movs	r3, #86	; 0x56
 8009214:	18fb      	adds	r3, r7, r3
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b0d      	cmp	r3, #13
 800921a:	dc41      	bgt.n	80092a0 <_ZN7control10reportPinsEh+0xd4>
     {
    	 pinState = isRelayEnabled(i);
 800921c:	2356      	movs	r3, #86	; 0x56
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	0011      	movs	r1, r2
 8009226:	0018      	movs	r0, r3
 8009228:	f7ff fdc0 	bl	8008dac <_ZN7control14isRelayEnabledEh>
 800922c:	0003      	movs	r3, r0
 800922e:	001a      	movs	r2, r3
 8009230:	2355      	movs	r3, #85	; 0x55
 8009232:	18fb      	adds	r3, r7, r3
 8009234:	701a      	strb	r2, [r3, #0]
         if(pinState == 1)
 8009236:	2355      	movs	r3, #85	; 0x55
 8009238:	18fb      	adds	r3, r7, r3
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d127      	bne.n	8009290 <_ZN7control10reportPinsEh+0xc4>
         {
             if(isFirst == 0)
 8009240:	2357      	movs	r3, #87	; 0x57
 8009242:	18fb      	adds	r3, r7, r3
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d107      	bne.n	800925a <_ZN7control10reportPinsEh+0x8e>
             {
               string += ", ";
 800924a:	4a4d      	ldr	r2, [pc, #308]	; (8009380 <_ZN7control10reportPinsEh+0x1b4>)
 800924c:	230c      	movs	r3, #12
 800924e:	18fb      	adds	r3, r7, r3
 8009250:	0011      	movs	r1, r2
 8009252:	0018      	movs	r0, r3
 8009254:	f7ff fbb8 	bl	80089c8 <_ZN7cStringpLEPc>
 8009258:	e00a      	b.n	8009270 <_ZN7control10reportPinsEh+0xa4>
             }
             else
             {
               string += "Enabled channels ";
 800925a:	4a4a      	ldr	r2, [pc, #296]	; (8009384 <_ZN7control10reportPinsEh+0x1b8>)
 800925c:	230c      	movs	r3, #12
 800925e:	18fb      	adds	r3, r7, r3
 8009260:	0011      	movs	r1, r2
 8009262:	0018      	movs	r0, r3
 8009264:	f7ff fbb0 	bl	80089c8 <_ZN7cStringpLEPc>
               isFirst = 0;
 8009268:	2357      	movs	r3, #87	; 0x57
 800926a:	18fb      	adds	r3, r7, r3
 800926c:	2200      	movs	r2, #0
 800926e:	701a      	strb	r2, [r3, #0]
             }
             string.addInt8_t((uint8_t)pinsConfig[i].pinID, 10);
 8009270:	2356      	movs	r3, #86	; 0x56
 8009272:	18fb      	adds	r3, r7, r3
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	4944      	ldr	r1, [pc, #272]	; (8009388 <_ZN7control10reportPinsEh+0x1bc>)
 8009278:	0013      	movs	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	189b      	adds	r3, r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	5c5b      	ldrb	r3, [r3, r1]
 8009282:	b259      	sxtb	r1, r3
 8009284:	230c      	movs	r3, #12
 8009286:	18fb      	adds	r3, r7, r3
 8009288:	220a      	movs	r2, #10
 800928a:	0018      	movs	r0, r3
 800928c:	f7ff fae1 	bl	8008852 <_ZN7cString9addInt8_tEah>
     for(uint8_t i=0; i<PIN_COUNT; i++)
 8009290:	2356      	movs	r3, #86	; 0x56
 8009292:	18fb      	adds	r3, r7, r3
 8009294:	781a      	ldrb	r2, [r3, #0]
 8009296:	2356      	movs	r3, #86	; 0x56
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	3201      	adds	r2, #1
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	e7b8      	b.n	8009212 <_ZN7control10reportPinsEh+0x46>
         }
     }

     if(string.getSize() == 0)
 80092a0:	230c      	movs	r3, #12
 80092a2:	18fb      	adds	r3, r7, r3
 80092a4:	0018      	movs	r0, r3
 80092a6:	f7ff fce5 	bl	8008c74 <_ZN7cString7getSizeEv>
 80092aa:	0003      	movs	r3, r0
 80092ac:	425a      	negs	r2, r3
 80092ae:	4153      	adcs	r3, r2
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d006      	beq.n	80092c4 <_ZN7control10reportPinsEh+0xf8>
     {
        string += "all channels disabled\n";
 80092b6:	4a35      	ldr	r2, [pc, #212]	; (800938c <_ZN7control10reportPinsEh+0x1c0>)
 80092b8:	230c      	movs	r3, #12
 80092ba:	18fb      	adds	r3, r7, r3
 80092bc:	0011      	movs	r1, r2
 80092be:	0018      	movs	r0, r3
 80092c0:	f7ff fb82 	bl	80089c8 <_ZN7cStringpLEPc>
     }
     string += "\r";
 80092c4:	4a32      	ldr	r2, [pc, #200]	; (8009390 <_ZN7control10reportPinsEh+0x1c4>)
 80092c6:	230c      	movs	r3, #12
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	0011      	movs	r1, r2
 80092cc:	0018      	movs	r0, r3
 80092ce:	f7ff fb7b 	bl	80089c8 <_ZN7cStringpLEPc>
 80092d2:	e043      	b.n	800935c <_ZN7control10reportPinsEh+0x190>
  }
  else
  {
    if(arg_id < PIN_COUNT)
 80092d4:	1cfb      	adds	r3, r7, #3
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b0d      	cmp	r3, #13
 80092da:	dc3f      	bgt.n	800935c <_ZN7control10reportPinsEh+0x190>
    {
      pinState = isRelayEnabled(arg_id);
 80092dc:	1cfb      	adds	r3, r7, #3
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff fd61 	bl	8008dac <_ZN7control14isRelayEnabledEh>
 80092ea:	0003      	movs	r3, r0
 80092ec:	001a      	movs	r2, r3
 80092ee:	2355      	movs	r3, #85	; 0x55
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	701a      	strb	r2, [r3, #0]
      if(pinState == 1)
 80092f4:	2355      	movs	r3, #85	; 0x55
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d117      	bne.n	800932e <_ZN7control10reportPinsEh+0x162>
      {
        string += "Channel ";
 80092fe:	4a25      	ldr	r2, [pc, #148]	; (8009394 <_ZN7control10reportPinsEh+0x1c8>)
 8009300:	230c      	movs	r3, #12
 8009302:	18fb      	adds	r3, r7, r3
 8009304:	0011      	movs	r1, r2
 8009306:	0018      	movs	r0, r3
 8009308:	f7ff fb5e 	bl	80089c8 <_ZN7cStringpLEPc>
        string.addInt8_t((uint8_t)arg_id, 10);
 800930c:	1cfb      	adds	r3, r7, #3
 800930e:	2100      	movs	r1, #0
 8009310:	5659      	ldrsb	r1, [r3, r1]
 8009312:	230c      	movs	r3, #12
 8009314:	18fb      	adds	r3, r7, r3
 8009316:	220a      	movs	r2, #10
 8009318:	0018      	movs	r0, r3
 800931a:	f7ff fa9a 	bl	8008852 <_ZN7cString9addInt8_tEah>
        string += " is enabled\r";
 800931e:	4a1e      	ldr	r2, [pc, #120]	; (8009398 <_ZN7control10reportPinsEh+0x1cc>)
 8009320:	230c      	movs	r3, #12
 8009322:	18fb      	adds	r3, r7, r3
 8009324:	0011      	movs	r1, r2
 8009326:	0018      	movs	r0, r3
 8009328:	f7ff fb4e 	bl	80089c8 <_ZN7cStringpLEPc>
 800932c:	e016      	b.n	800935c <_ZN7control10reportPinsEh+0x190>
      }
      else
      {
        string += "Channel ";
 800932e:	4a19      	ldr	r2, [pc, #100]	; (8009394 <_ZN7control10reportPinsEh+0x1c8>)
 8009330:	230c      	movs	r3, #12
 8009332:	18fb      	adds	r3, r7, r3
 8009334:	0011      	movs	r1, r2
 8009336:	0018      	movs	r0, r3
 8009338:	f7ff fb46 	bl	80089c8 <_ZN7cStringpLEPc>
        string.addInt8_t((uint8_t)arg_id, 10);
 800933c:	1cfb      	adds	r3, r7, #3
 800933e:	2100      	movs	r1, #0
 8009340:	5659      	ldrsb	r1, [r3, r1]
 8009342:	230c      	movs	r3, #12
 8009344:	18fb      	adds	r3, r7, r3
 8009346:	220a      	movs	r2, #10
 8009348:	0018      	movs	r0, r3
 800934a:	f7ff fa82 	bl	8008852 <_ZN7cString9addInt8_tEah>
        string += " is disabled\r";
 800934e:	4a13      	ldr	r2, [pc, #76]	; (800939c <_ZN7control10reportPinsEh+0x1d0>)
 8009350:	230c      	movs	r3, #12
 8009352:	18fb      	adds	r3, r7, r3
 8009354:	0011      	movs	r1, r2
 8009356:	0018      	movs	r0, r3
 8009358:	f7ff fb36 	bl	80089c8 <_ZN7cStringpLEPc>
      }
    }
  }

  CDC_Transmit_FS(buffer, string.getSize());
 800935c:	230c      	movs	r3, #12
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	0018      	movs	r0, r3
 8009362:	f7ff fc87 	bl	8008c74 <_ZN7cString7getSizeEv>
 8009366:	0003      	movs	r3, r0
 8009368:	001a      	movs	r2, r3
 800936a:	2314      	movs	r3, #20
 800936c:	18fb      	adds	r3, r7, r3
 800936e:	0011      	movs	r1, r2
 8009370:	0018      	movs	r0, r3
 8009372:	f000 fe7d 	bl	800a070 <CDC_Transmit_FS>
}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	46bd      	mov	sp, r7
 800937a:	b016      	add	sp, #88	; 0x58
 800937c:	bd80      	pop	{r7, pc}
 800937e:	46c0      	nop			; (mov r8, r8)
 8009380:	0800ad44 	.word	0x0800ad44
 8009384:	0800ad48 	.word	0x0800ad48
 8009388:	20000020 	.word	0x20000020
 800938c:	0800ad5c 	.word	0x0800ad5c
 8009390:	0800ad74 	.word	0x0800ad74
 8009394:	0800acfc 	.word	0x0800acfc
 8009398:	0800ad78 	.word	0x0800ad78
 800939c:	0800ad88 	.word	0x0800ad88

080093a0 <_ZN7control9reportBinEv>:


void control::reportBin()
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08e      	sub	sp, #56	; 0x38
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint8_t buffer[32] = {0};
 80093a8:	2314      	movs	r3, #20
 80093aa:	18fb      	adds	r3, r7, r3
 80093ac:	0018      	movs	r0, r3
 80093ae:	2320      	movs	r3, #32
 80093b0:	001a      	movs	r2, r3
 80093b2:	2100      	movs	r1, #0
 80093b4:	f001 fbd3 	bl	800ab5e <memset>
  cString string((char*)buffer, 32);
 80093b8:	2314      	movs	r3, #20
 80093ba:	18f9      	adds	r1, r7, r3
 80093bc:	230c      	movs	r3, #12
 80093be:	18fb      	adds	r3, r7, r3
 80093c0:	2220      	movs	r2, #32
 80093c2:	0018      	movs	r0, r3
 80093c4:	f7ff fa2f 	bl	8008826 <_ZN7cStringC1EPct>
  uint8_t pinState;
  uint8_t pinState2;
  uint8_t output = 0;
 80093c8:	2337      	movs	r3, #55	; 0x37
 80093ca:	18fb      	adds	r3, r7, r3
 80093cc:	2200      	movs	r2, #0
 80093ce:	701a      	strb	r2, [r3, #0]

 for(uint8_t i=0; i<PIN_COUNT; i++)
 80093d0:	2336      	movs	r3, #54	; 0x36
 80093d2:	18fb      	adds	r3, r7, r3
 80093d4:	2200      	movs	r2, #0
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	2336      	movs	r3, #54	; 0x36
 80093da:	18fb      	adds	r3, r7, r3
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b0d      	cmp	r3, #13
 80093e0:	dc29      	bgt.n	8009436 <_ZN7control9reportBinEv+0x96>
 {
   //if(pinState == 1)
   //pinState = HAL_GPIO_ReadPin(pinsConfig[i].GPIOx , pinsConfig[i].GPIO_Pin);
   pinState = isRelayEnabled(i);
 80093e2:	2336      	movs	r3, #54	; 0x36
 80093e4:	18fb      	adds	r3, r7, r3
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	0011      	movs	r1, r2
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7ff fcdd 	bl	8008dac <_ZN7control14isRelayEnabledEh>
 80093f2:	0003      	movs	r3, r0
 80093f4:	001a      	movs	r2, r3
 80093f6:	2335      	movs	r3, #53	; 0x35
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	701a      	strb	r2, [r3, #0]
   if(pinState == GPIO_PIN_SET)
 80093fc:	2335      	movs	r3, #53	; 0x35
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d10f      	bne.n	8009426 <_ZN7control9reportBinEv+0x86>
   {
     output |= 1 << i;
 8009406:	2336      	movs	r3, #54	; 0x36
 8009408:	18fb      	adds	r3, r7, r3
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2201      	movs	r2, #1
 800940e:	409a      	lsls	r2, r3
 8009410:	0013      	movs	r3, r2
 8009412:	b25a      	sxtb	r2, r3
 8009414:	2337      	movs	r3, #55	; 0x37
 8009416:	18fb      	adds	r3, r7, r3
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	b25b      	sxtb	r3, r3
 800941c:	4313      	orrs	r3, r2
 800941e:	b25a      	sxtb	r2, r3
 8009420:	2337      	movs	r3, #55	; 0x37
 8009422:	18fb      	adds	r3, r7, r3
 8009424:	701a      	strb	r2, [r3, #0]
 for(uint8_t i=0; i<PIN_COUNT; i++)
 8009426:	2336      	movs	r3, #54	; 0x36
 8009428:	18fb      	adds	r3, r7, r3
 800942a:	781a      	ldrb	r2, [r3, #0]
 800942c:	2336      	movs	r3, #54	; 0x36
 800942e:	18fb      	adds	r3, r7, r3
 8009430:	3201      	adds	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	e7d0      	b.n	80093d8 <_ZN7control9reportBinEv+0x38>
   }
 }

 string += "Channels state 0x";
 8009436:	4a14      	ldr	r2, [pc, #80]	; (8009488 <_ZN7control9reportBinEv+0xe8>)
 8009438:	230c      	movs	r3, #12
 800943a:	18fb      	adds	r3, r7, r3
 800943c:	0011      	movs	r1, r2
 800943e:	0018      	movs	r0, r3
 8009440:	f7ff fac2 	bl	80089c8 <_ZN7cStringpLEPc>
 string.addUint8_t((uint8_t)output, 16);
 8009444:	2337      	movs	r3, #55	; 0x37
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	7819      	ldrb	r1, [r3, #0]
 800944a:	230c      	movs	r3, #12
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	2210      	movs	r2, #16
 8009450:	0018      	movs	r0, r3
 8009452:	f7ff fa2b 	bl	80088ac <_ZN7cString10addUint8_tEhh>
 string += "\r";
 8009456:	4a0d      	ldr	r2, [pc, #52]	; (800948c <_ZN7control9reportBinEv+0xec>)
 8009458:	230c      	movs	r3, #12
 800945a:	18fb      	adds	r3, r7, r3
 800945c:	0011      	movs	r1, r2
 800945e:	0018      	movs	r0, r3
 8009460:	f7ff fab2 	bl	80089c8 <_ZN7cStringpLEPc>


  CDC_Transmit_FS(buffer, string.getSize());
 8009464:	230c      	movs	r3, #12
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	0018      	movs	r0, r3
 800946a:	f7ff fc03 	bl	8008c74 <_ZN7cString7getSizeEv>
 800946e:	0003      	movs	r3, r0
 8009470:	001a      	movs	r2, r3
 8009472:	2314      	movs	r3, #20
 8009474:	18fb      	adds	r3, r7, r3
 8009476:	0011      	movs	r1, r2
 8009478:	0018      	movs	r0, r3
 800947a:	f000 fdf9 	bl	800a070 <CDC_Transmit_FS>
}
 800947e:	46c0      	nop			; (mov r8, r8)
 8009480:	46bd      	mov	sp, r7
 8009482:	b00e      	add	sp, #56	; 0x38
 8009484:	bd80      	pop	{r7, pc}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	0800ad98 	.word	0x0800ad98
 800948c:	0800ad74 	.word	0x0800ad74

08009490 <_ZN7control6cyclicEv>:

void control::cyclic(void)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b0a7      	sub	sp, #156	; 0x9c
 8009494:	af02      	add	r7, sp, #8
 8009496:	6078      	str	r0, [r7, #4]
  uint8_t dataBuff[64] = {0};
 8009498:	2344      	movs	r3, #68	; 0x44
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	0018      	movs	r0, r3
 800949e:	2340      	movs	r3, #64	; 0x40
 80094a0:	001a      	movs	r2, r3
 80094a2:	2100      	movs	r1, #0
 80094a4:	f001 fb5b 	bl	800ab5e <memset>
  uint8_t tempBuff[10] = {0};
 80094a8:	2338      	movs	r3, #56	; 0x38
 80094aa:	18fb      	adds	r3, r7, r3
 80094ac:	0018      	movs	r0, r3
 80094ae:	230a      	movs	r3, #10
 80094b0:	001a      	movs	r2, r3
 80094b2:	2100      	movs	r1, #0
 80094b4:	f001 fb53 	bl	800ab5e <memset>
  parseString<0> stringEx;
 80094b8:	2318      	movs	r3, #24
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	0018      	movs	r0, r3
 80094be:	f000 fb33 	bl	8009b28 <_ZN11parseStringILt0EEC1Ev>
  uint8_t buffIndex = 0;
 80094c2:	238f      	movs	r3, #143	; 0x8f
 80094c4:	18fb      	adds	r3, r7, r3
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
  uint8_t tempChar = 0;
 80094ca:	2389      	movs	r3, #137	; 0x89
 80094cc:	18fb      	adds	r3, r7, r3
 80094ce:	2200      	movs	r2, #0
 80094d0:	701a      	strb	r2, [r3, #0]
  uint16_t tempNumber = 0;
 80094d2:	2386      	movs	r3, #134	; 0x86
 80094d4:	18fb      	adds	r3, r7, r3
 80094d6:	2200      	movs	r2, #0
 80094d8:	801a      	strh	r2, [r3, #0]

  stringEx.Init((char*)dataBuff, 64);
 80094da:	2344      	movs	r3, #68	; 0x44
 80094dc:	18f9      	adds	r1, r7, r3
 80094de:	2318      	movs	r3, #24
 80094e0:	18fb      	adds	r3, r7, r3
 80094e2:	2240      	movs	r2, #64	; 0x40
 80094e4:	0018      	movs	r0, r3
 80094e6:	f000 fb28 	bl	8009b3a <_ZN11parseStringILt0EE4InitEPct>

  do
    {
    osEvent evt = osMessageGet(cdcDataHandle, osWaitForever);
 80094ea:	4be3      	ldr	r3, [pc, #908]	; (8009878 <_ZN7control6cyclicEv+0x3e8>)
 80094ec:	6819      	ldr	r1, [r3, #0]
 80094ee:	230c      	movs	r3, #12
 80094f0:	18f8      	adds	r0, r7, r3
 80094f2:	2301      	movs	r3, #1
 80094f4:	425b      	negs	r3, r3
 80094f6:	001a      	movs	r2, r3
 80094f8:	f7fd f866 	bl	80065c8 <osMessageGet>
    if (evt.status == osEventMessage)
 80094fc:	230c      	movs	r3, #12
 80094fe:	18fb      	adds	r3, r7, r3
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b10      	cmp	r3, #16
 8009504:	d117      	bne.n	8009536 <_ZN7control6cyclicEv+0xa6>
    {
      dataBuff[buffIndex] = (uint8_t)evt.value.v;
 8009506:	238f      	movs	r3, #143	; 0x8f
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	230c      	movs	r3, #12
 800950e:	18fb      	adds	r3, r7, r3
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	b2d9      	uxtb	r1, r3
 8009514:	2344      	movs	r3, #68	; 0x44
 8009516:	18fb      	adds	r3, r7, r3
 8009518:	5499      	strb	r1, [r3, r2]
      buffIndex++;
 800951a:	238f      	movs	r3, #143	; 0x8f
 800951c:	18fb      	adds	r3, r7, r3
 800951e:	781a      	ldrb	r2, [r3, #0]
 8009520:	238f      	movs	r3, #143	; 0x8f
 8009522:	18fb      	adds	r3, r7, r3
 8009524:	3201      	adds	r2, #1
 8009526:	701a      	strb	r2, [r3, #0]
      dataBuff[buffIndex] = 0;
 8009528:	238f      	movs	r3, #143	; 0x8f
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2244      	movs	r2, #68	; 0x44
 8009530:	18ba      	adds	r2, r7, r2
 8009532:	2100      	movs	r1, #0
 8009534:	54d1      	strb	r1, [r2, r3]
    }
  }while(dataBuff[buffIndex-1] != '\r');
 8009536:	238f      	movs	r3, #143	; 0x8f
 8009538:	18fb      	adds	r3, r7, r3
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	3b01      	subs	r3, #1
 800953e:	2244      	movs	r2, #68	; 0x44
 8009540:	18ba      	adds	r2, r7, r2
 8009542:	5cd3      	ldrb	r3, [r2, r3]
 8009544:	2b0d      	cmp	r3, #13
 8009546:	d000      	beq.n	800954a <_ZN7control6cyclicEv+0xba>
  do
 8009548:	e7cf      	b.n	80094ea <_ZN7control6cyclicEv+0x5a>


  if(stringEx.strcmpAndShift("Enable ", strlen("Enable ")) == 1)
 800954a:	49cc      	ldr	r1, [pc, #816]	; (800987c <_ZN7control6cyclicEv+0x3ec>)
 800954c:	2318      	movs	r3, #24
 800954e:	18fb      	adds	r3, r7, r3
 8009550:	2207      	movs	r2, #7
 8009552:	0018      	movs	r0, r3
 8009554:	f000 fb0b 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 8009558:	0003      	movs	r3, r0
 800955a:	3b01      	subs	r3, #1
 800955c:	425a      	negs	r2, r3
 800955e:	4153      	adcs	r3, r2
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d027      	beq.n	80095b6 <_ZN7control6cyclicEv+0x126>
  {
    do
    {
      tempChar = stringEx.findNext((const char[2]){',', '\r'}, 2);
 8009566:	49c6      	ldr	r1, [pc, #792]	; (8009880 <_ZN7control6cyclicEv+0x3f0>)
 8009568:	2318      	movs	r3, #24
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	2202      	movs	r2, #2
 800956e:	0018      	movs	r0, r3
 8009570:	f000 fb30 	bl	8009bd4 <_ZN11parseStringILt0EE8findNextEPKch>
 8009574:	0003      	movs	r3, r0
 8009576:	001a      	movs	r2, r3
 8009578:	2389      	movs	r3, #137	; 0x89
 800957a:	18fb      	adds	r3, r7, r3
 800957c:	701a      	strb	r2, [r3, #0]
      tempNumber = stringEx.getUint(' ', tempChar);
 800957e:	2389      	movs	r3, #137	; 0x89
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	2318      	movs	r3, #24
 8009586:	18fb      	adds	r3, r7, r3
 8009588:	2120      	movs	r1, #32
 800958a:	0018      	movs	r0, r3
 800958c:	f000 fb53 	bl	8009c36 <_ZN11parseStringILt0EE7getUintEcc>
 8009590:	0002      	movs	r2, r0
 8009592:	2386      	movs	r3, #134	; 0x86
 8009594:	18fb      	adds	r3, r7, r3
 8009596:	801a      	strh	r2, [r3, #0]
      controllPin(tempNumber, 1);
 8009598:	2386      	movs	r3, #134	; 0x86
 800959a:	18fb      	adds	r3, r7, r3
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	b2d9      	uxtb	r1, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	0018      	movs	r0, r3
 80095a6:	f7ff fcb5 	bl	8008f14 <_ZN7control11controllPinEhh>
    }while(tempChar != '\r');
 80095aa:	2389      	movs	r3, #137	; 0x89
 80095ac:	18fb      	adds	r3, r7, r3
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b0d      	cmp	r3, #13
 80095b2:	d000      	beq.n	80095b6 <_ZN7control6cyclicEv+0x126>
    do
 80095b4:	e7d7      	b.n	8009566 <_ZN7control6cyclicEv+0xd6>
  }

  if(stringEx.strcmpAndShift("Disable ", strlen("Disable ")) == 1)
 80095b6:	49b3      	ldr	r1, [pc, #716]	; (8009884 <_ZN7control6cyclicEv+0x3f4>)
 80095b8:	2318      	movs	r3, #24
 80095ba:	18fb      	adds	r3, r7, r3
 80095bc:	2208      	movs	r2, #8
 80095be:	0018      	movs	r0, r3
 80095c0:	f000 fad5 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 80095c4:	0003      	movs	r3, r0
 80095c6:	3b01      	subs	r3, #1
 80095c8:	425a      	negs	r2, r3
 80095ca:	4153      	adcs	r3, r2
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d027      	beq.n	8009622 <_ZN7control6cyclicEv+0x192>
  {
    do
    {
      tempChar = stringEx.findNext((const char[2]){',', '\r'}, 2);
 80095d2:	49ad      	ldr	r1, [pc, #692]	; (8009888 <_ZN7control6cyclicEv+0x3f8>)
 80095d4:	2318      	movs	r3, #24
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	2202      	movs	r2, #2
 80095da:	0018      	movs	r0, r3
 80095dc:	f000 fafa 	bl	8009bd4 <_ZN11parseStringILt0EE8findNextEPKch>
 80095e0:	0003      	movs	r3, r0
 80095e2:	001a      	movs	r2, r3
 80095e4:	2389      	movs	r3, #137	; 0x89
 80095e6:	18fb      	adds	r3, r7, r3
 80095e8:	701a      	strb	r2, [r3, #0]
      tempNumber = stringEx.getUint(' ', tempChar);
 80095ea:	2389      	movs	r3, #137	; 0x89
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	781a      	ldrb	r2, [r3, #0]
 80095f0:	2318      	movs	r3, #24
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	2120      	movs	r1, #32
 80095f6:	0018      	movs	r0, r3
 80095f8:	f000 fb1d 	bl	8009c36 <_ZN11parseStringILt0EE7getUintEcc>
 80095fc:	0002      	movs	r2, r0
 80095fe:	2386      	movs	r3, #134	; 0x86
 8009600:	18fb      	adds	r3, r7, r3
 8009602:	801a      	strh	r2, [r3, #0]
      controllPin(tempNumber, 0);
 8009604:	2386      	movs	r3, #134	; 0x86
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b2d9      	uxtb	r1, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	0018      	movs	r0, r3
 8009612:	f7ff fc7f 	bl	8008f14 <_ZN7control11controllPinEhh>
    }while(tempChar != '\r');
 8009616:	2389      	movs	r3, #137	; 0x89
 8009618:	18fb      	adds	r3, r7, r3
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	2b0d      	cmp	r3, #13
 800961e:	d000      	beq.n	8009622 <_ZN7control6cyclicEv+0x192>
    do
 8009620:	e7d7      	b.n	80095d2 <_ZN7control6cyclicEv+0x142>
  }

  if(stringEx.strcmpAndShift("Set 0x", strlen("Set 0x")) == 1)
 8009622:	499a      	ldr	r1, [pc, #616]	; (800988c <_ZN7control6cyclicEv+0x3fc>)
 8009624:	2318      	movs	r3, #24
 8009626:	18fb      	adds	r3, r7, r3
 8009628:	2206      	movs	r2, #6
 800962a:	0018      	movs	r0, r3
 800962c:	f000 fa9f 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 8009630:	0003      	movs	r3, r0
 8009632:	3b01      	subs	r3, #1
 8009634:	425a      	negs	r2, r3
 8009636:	4153      	adcs	r3, r2
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d020      	beq.n	8009680 <_ZN7control6cyclicEv+0x1f0>
  {
    tempChar = stringEx.findNext((const char[1]){'\r'}, 1);
 800963e:	4994      	ldr	r1, [pc, #592]	; (8009890 <_ZN7control6cyclicEv+0x400>)
 8009640:	2318      	movs	r3, #24
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	2201      	movs	r2, #1
 8009646:	0018      	movs	r0, r3
 8009648:	f000 fac4 	bl	8009bd4 <_ZN11parseStringILt0EE8findNextEPKch>
 800964c:	0003      	movs	r3, r0
 800964e:	001a      	movs	r2, r3
 8009650:	2389      	movs	r3, #137	; 0x89
 8009652:	18fb      	adds	r3, r7, r3
 8009654:	701a      	strb	r2, [r3, #0]
    tempNumber = stringEx.getUint('x', tempChar);
 8009656:	2389      	movs	r3, #137	; 0x89
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	781a      	ldrb	r2, [r3, #0]
 800965c:	2318      	movs	r3, #24
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	2178      	movs	r1, #120	; 0x78
 8009662:	0018      	movs	r0, r3
 8009664:	f000 fae7 	bl	8009c36 <_ZN11parseStringILt0EE7getUintEcc>
 8009668:	0002      	movs	r2, r0
 800966a:	2386      	movs	r3, #134	; 0x86
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	801a      	strh	r2, [r3, #0]
    controllPinSetBin(tempNumber);
 8009670:	2386      	movs	r3, #134	; 0x86
 8009672:	18fb      	adds	r3, r7, r3
 8009674:	881a      	ldrh	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	0011      	movs	r1, r2
 800967a:	0018      	movs	r0, r3
 800967c:	f7ff fcdc 	bl	8009038 <_ZN7control17controllPinSetBinEt>
  }

  if(stringEx.strcmpAndShift("Enable 0x", strlen("Enable 0x")) == 1)
 8009680:	4984      	ldr	r1, [pc, #528]	; (8009894 <_ZN7control6cyclicEv+0x404>)
 8009682:	2318      	movs	r3, #24
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	2209      	movs	r2, #9
 8009688:	0018      	movs	r0, r3
 800968a:	f000 fa70 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 800968e:	0003      	movs	r3, r0
 8009690:	3b01      	subs	r3, #1
 8009692:	425a      	negs	r2, r3
 8009694:	4153      	adcs	r3, r2
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d020      	beq.n	80096de <_ZN7control6cyclicEv+0x24e>
  {
	 tempChar = stringEx.findNext((const char[1]){'\r'}, 1);
 800969c:	497e      	ldr	r1, [pc, #504]	; (8009898 <_ZN7control6cyclicEv+0x408>)
 800969e:	2318      	movs	r3, #24
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	2201      	movs	r2, #1
 80096a4:	0018      	movs	r0, r3
 80096a6:	f000 fa95 	bl	8009bd4 <_ZN11parseStringILt0EE8findNextEPKch>
 80096aa:	0003      	movs	r3, r0
 80096ac:	001a      	movs	r2, r3
 80096ae:	2389      	movs	r3, #137	; 0x89
 80096b0:	18fb      	adds	r3, r7, r3
 80096b2:	701a      	strb	r2, [r3, #0]
	 tempNumber = stringEx.getUint('x', tempChar);
 80096b4:	2389      	movs	r3, #137	; 0x89
 80096b6:	18fb      	adds	r3, r7, r3
 80096b8:	781a      	ldrb	r2, [r3, #0]
 80096ba:	2318      	movs	r3, #24
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	2178      	movs	r1, #120	; 0x78
 80096c0:	0018      	movs	r0, r3
 80096c2:	f000 fab8 	bl	8009c36 <_ZN11parseStringILt0EE7getUintEcc>
 80096c6:	0002      	movs	r2, r0
 80096c8:	2386      	movs	r3, #134	; 0x86
 80096ca:	18fb      	adds	r3, r7, r3
 80096cc:	801a      	strh	r2, [r3, #0]
	 controllPinEnableBin(tempNumber);
 80096ce:	2386      	movs	r3, #134	; 0x86
 80096d0:	18fb      	adds	r3, r7, r3
 80096d2:	881a      	ldrh	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	0011      	movs	r1, r2
 80096d8:	0018      	movs	r0, r3
 80096da:	f7ff fcf6 	bl	80090ca <_ZN7control20controllPinEnableBinEt>
  }

  if(stringEx.strcmpAndShift("Disable 0x", strlen("Disable 0x")) == 1)
 80096de:	496f      	ldr	r1, [pc, #444]	; (800989c <_ZN7control6cyclicEv+0x40c>)
 80096e0:	2318      	movs	r3, #24
 80096e2:	18fb      	adds	r3, r7, r3
 80096e4:	220a      	movs	r2, #10
 80096e6:	0018      	movs	r0, r3
 80096e8:	f000 fa41 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 80096ec:	0003      	movs	r3, r0
 80096ee:	3b01      	subs	r3, #1
 80096f0:	425a      	negs	r2, r3
 80096f2:	4153      	adcs	r3, r2
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d020      	beq.n	800973c <_ZN7control6cyclicEv+0x2ac>
  {
	 tempChar = stringEx.findNext((const char[1]){'\r'}, 1);
 80096fa:	4969      	ldr	r1, [pc, #420]	; (80098a0 <_ZN7control6cyclicEv+0x410>)
 80096fc:	2318      	movs	r3, #24
 80096fe:	18fb      	adds	r3, r7, r3
 8009700:	2201      	movs	r2, #1
 8009702:	0018      	movs	r0, r3
 8009704:	f000 fa66 	bl	8009bd4 <_ZN11parseStringILt0EE8findNextEPKch>
 8009708:	0003      	movs	r3, r0
 800970a:	001a      	movs	r2, r3
 800970c:	2389      	movs	r3, #137	; 0x89
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	701a      	strb	r2, [r3, #0]
	 tempNumber = stringEx.getUint('x', tempChar);
 8009712:	2389      	movs	r3, #137	; 0x89
 8009714:	18fb      	adds	r3, r7, r3
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	2318      	movs	r3, #24
 800971a:	18fb      	adds	r3, r7, r3
 800971c:	2178      	movs	r1, #120	; 0x78
 800971e:	0018      	movs	r0, r3
 8009720:	f000 fa89 	bl	8009c36 <_ZN11parseStringILt0EE7getUintEcc>
 8009724:	0002      	movs	r2, r0
 8009726:	2386      	movs	r3, #134	; 0x86
 8009728:	18fb      	adds	r3, r7, r3
 800972a:	801a      	strh	r2, [r3, #0]
	 controllPinDisableBin(tempNumber);
 800972c:	2386      	movs	r3, #134	; 0x86
 800972e:	18fb      	adds	r3, r7, r3
 8009730:	881a      	ldrh	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	0011      	movs	r1, r2
 8009736:	0018      	movs	r0, r3
 8009738:	f7ff fd07 	bl	800914a <_ZN7control21controllPinDisableBinEt>
  }

  if(stringEx.strcmpAndShift("Report\r", strlen("Report\r")) == 1)
 800973c:	4959      	ldr	r1, [pc, #356]	; (80098a4 <_ZN7control6cyclicEv+0x414>)
 800973e:	2318      	movs	r3, #24
 8009740:	18fb      	adds	r3, r7, r3
 8009742:	2207      	movs	r2, #7
 8009744:	0018      	movs	r0, r3
 8009746:	f000 fa12 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 800974a:	0003      	movs	r3, r0
 800974c:	3b01      	subs	r3, #1
 800974e:	425a      	negs	r2, r3
 8009750:	4153      	adcs	r3, r2
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d004      	beq.n	8009762 <_ZN7control6cyclicEv+0x2d2>
  {
    reportPins(0xff);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	21ff      	movs	r1, #255	; 0xff
 800975c:	0018      	movs	r0, r3
 800975e:	f7ff fd35 	bl	80091cc <_ZN7control10reportPinsEh>
  }

  if(stringEx.strcmpAndShift("Report binary\r", strlen("Report binary\r")) == 1)
 8009762:	4951      	ldr	r1, [pc, #324]	; (80098a8 <_ZN7control6cyclicEv+0x418>)
 8009764:	2318      	movs	r3, #24
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	220e      	movs	r2, #14
 800976a:	0018      	movs	r0, r3
 800976c:	f000 f9ff 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 8009770:	0003      	movs	r3, r0
 8009772:	3b01      	subs	r3, #1
 8009774:	425a      	negs	r2, r3
 8009776:	4153      	adcs	r3, r2
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d003      	beq.n	8009786 <_ZN7control6cyclicEv+0x2f6>
  {
    reportBin();
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	0018      	movs	r0, r3
 8009782:	f7ff fe0d 	bl	80093a0 <_ZN7control9reportBinEv>
  }

  if(stringEx.strcmpAndShift("Configure", strlen("Configure")) == 1)
 8009786:	4949      	ldr	r1, [pc, #292]	; (80098ac <_ZN7control6cyclicEv+0x41c>)
 8009788:	2318      	movs	r3, #24
 800978a:	18fb      	adds	r3, r7, r3
 800978c:	2209      	movs	r2, #9
 800978e:	0018      	movs	r0, r3
 8009790:	f000 f9ed 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 8009794:	0003      	movs	r3, r0
 8009796:	3b01      	subs	r3, #1
 8009798:	425a      	negs	r2, r3
 800979a:	4153      	adcs	r3, r2
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d100      	bne.n	80097a4 <_ZN7control6cyclicEv+0x314>
 80097a2:	e0ea      	b.n	800997a <_ZN7control6cyclicEv+0x4ea>
  {
    ePinMode mode = MODE_COUNT;
 80097a4:	238e      	movs	r3, #142	; 0x8e
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	2203      	movs	r2, #3
 80097aa:	701a      	strb	r2, [r3, #0]
    ePinPush push = PUSH_COUNT;
 80097ac:	238d      	movs	r3, #141	; 0x8d
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	2203      	movs	r2, #3
 80097b2:	701a      	strb	r2, [r3, #0]
    uint8_t pinID = 0;
 80097b4:	238c      	movs	r3, #140	; 0x8c
 80097b6:	18fb      	adds	r3, r7, r3
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]
    uint8_t paramNumber = 0;
 80097bc:	238b      	movs	r3, #139	; 0x8b
 80097be:	18fb      	adds	r3, r7, r3
 80097c0:	2200      	movs	r2, #0
 80097c2:	701a      	strb	r2, [r3, #0]

    do
    {
      tempChar = stringEx.findNext((const char[2]){',', '\r'}, 2);
 80097c4:	493a      	ldr	r1, [pc, #232]	; (80098b0 <_ZN7control6cyclicEv+0x420>)
 80097c6:	2318      	movs	r3, #24
 80097c8:	18fb      	adds	r3, r7, r3
 80097ca:	2202      	movs	r2, #2
 80097cc:	0018      	movs	r0, r3
 80097ce:	f000 fa01 	bl	8009bd4 <_ZN11parseStringILt0EE8findNextEPKch>
 80097d2:	0003      	movs	r3, r0
 80097d4:	001a      	movs	r2, r3
 80097d6:	2389      	movs	r3, #137	; 0x89
 80097d8:	18fb      	adds	r3, r7, r3
 80097da:	701a      	strb	r2, [r3, #0]

      switch(paramNumber)
 80097dc:	238b      	movs	r3, #139	; 0x8b
 80097de:	18fb      	adds	r3, r7, r3
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d012      	beq.n	800980c <_ZN7control6cyclicEv+0x37c>
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d06a      	beq.n	80098c0 <_ZN7control6cyclicEv+0x430>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d000      	beq.n	80097f0 <_ZN7control6cyclicEv+0x360>
             }

             break;

           default:
             break;
 80097ee:	e0a0      	b.n	8009932 <_ZN7control6cyclicEv+0x4a2>
          pinID = stringEx.getUint(' ', tempChar);
 80097f0:	2389      	movs	r3, #137	; 0x89
 80097f2:	18fb      	adds	r3, r7, r3
 80097f4:	781a      	ldrb	r2, [r3, #0]
 80097f6:	2318      	movs	r3, #24
 80097f8:	18fb      	adds	r3, r7, r3
 80097fa:	2120      	movs	r1, #32
 80097fc:	0018      	movs	r0, r3
 80097fe:	f000 fa1a 	bl	8009c36 <_ZN11parseStringILt0EE7getUintEcc>
 8009802:	0002      	movs	r2, r0
 8009804:	238c      	movs	r3, #140	; 0x8c
 8009806:	18fb      	adds	r3, r7, r3
 8009808:	701a      	strb	r2, [r3, #0]
          break;
 800980a:	e092      	b.n	8009932 <_ZN7control6cyclicEv+0x4a2>
           stringEx.getStr((char*)tempBuff, 8, ' ', tempChar);
 800980c:	2338      	movs	r3, #56	; 0x38
 800980e:	18f9      	adds	r1, r7, r3
 8009810:	2318      	movs	r3, #24
 8009812:	18f8      	adds	r0, r7, r3
 8009814:	2389      	movs	r3, #137	; 0x89
 8009816:	18fb      	adds	r3, r7, r3
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	2320      	movs	r3, #32
 800981e:	2208      	movs	r2, #8
 8009820:	f000 fa36 	bl	8009c90 <_ZN11parseStringILt0EE6getStrEPchcc>
           if(strcmp((char*)tempBuff, "IN") == 0)
 8009824:	4a23      	ldr	r2, [pc, #140]	; (80098b4 <_ZN7control6cyclicEv+0x424>)
 8009826:	2338      	movs	r3, #56	; 0x38
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	0011      	movs	r1, r2
 800982c:	0018      	movs	r0, r3
 800982e:	f7f6 fc6b 	bl	8000108 <strcmp>
 8009832:	1e03      	subs	r3, r0, #0
 8009834:	d104      	bne.n	8009840 <_ZN7control6cyclicEv+0x3b0>
              mode = (ePinMode)MODE_IN;
 8009836:	238e      	movs	r3, #142	; 0x8e
 8009838:	18fb      	adds	r3, r7, r3
 800983a:	2200      	movs	r2, #0
 800983c:	701a      	strb	r2, [r3, #0]
             break;
 800983e:	e075      	b.n	800992c <_ZN7control6cyclicEv+0x49c>
           else if(strcmp((char*)tempBuff, "OUTPP") == 0)
 8009840:	4a1d      	ldr	r2, [pc, #116]	; (80098b8 <_ZN7control6cyclicEv+0x428>)
 8009842:	2338      	movs	r3, #56	; 0x38
 8009844:	18fb      	adds	r3, r7, r3
 8009846:	0011      	movs	r1, r2
 8009848:	0018      	movs	r0, r3
 800984a:	f7f6 fc5d 	bl	8000108 <strcmp>
 800984e:	1e03      	subs	r3, r0, #0
 8009850:	d104      	bne.n	800985c <_ZN7control6cyclicEv+0x3cc>
              mode = (ePinMode)MODE_OUT_PP;
 8009852:	238e      	movs	r3, #142	; 0x8e
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	2201      	movs	r2, #1
 8009858:	701a      	strb	r2, [r3, #0]
             break;
 800985a:	e067      	b.n	800992c <_ZN7control6cyclicEv+0x49c>
             else if(strcmp((char*)tempBuff, "OUTOD") == 0)
 800985c:	4a17      	ldr	r2, [pc, #92]	; (80098bc <_ZN7control6cyclicEv+0x42c>)
 800985e:	2338      	movs	r3, #56	; 0x38
 8009860:	18fb      	adds	r3, r7, r3
 8009862:	0011      	movs	r1, r2
 8009864:	0018      	movs	r0, r3
 8009866:	f7f6 fc4f 	bl	8000108 <strcmp>
 800986a:	1e03      	subs	r3, r0, #0
 800986c:	d15e      	bne.n	800992c <_ZN7control6cyclicEv+0x49c>
                mode = (ePinMode)MODE_OUT_OD;
 800986e:	238e      	movs	r3, #142	; 0x8e
 8009870:	18fb      	adds	r3, r7, r3
 8009872:	2202      	movs	r2, #2
 8009874:	701a      	strb	r2, [r3, #0]
             break;
 8009876:	e059      	b.n	800992c <_ZN7control6cyclicEv+0x49c>
 8009878:	20000360 	.word	0x20000360
 800987c:	0800adac 	.word	0x0800adac
 8009880:	0800ae38 	.word	0x0800ae38
 8009884:	0800adb4 	.word	0x0800adb4
 8009888:	0800ae3c 	.word	0x0800ae3c
 800988c:	0800adc0 	.word	0x0800adc0
 8009890:	0800ae40 	.word	0x0800ae40
 8009894:	0800adc8 	.word	0x0800adc8
 8009898:	0800ae44 	.word	0x0800ae44
 800989c:	0800add4 	.word	0x0800add4
 80098a0:	0800ae48 	.word	0x0800ae48
 80098a4:	0800ade0 	.word	0x0800ade0
 80098a8:	0800ade8 	.word	0x0800ade8
 80098ac:	0800adf8 	.word	0x0800adf8
 80098b0:	0800ae4c 	.word	0x0800ae4c
 80098b4:	0800ae04 	.word	0x0800ae04
 80098b8:	0800ae08 	.word	0x0800ae08
 80098bc:	0800ae10 	.word	0x0800ae10
             stringEx.getStr((char*)tempBuff, 8, ' ', tempChar);
 80098c0:	2338      	movs	r3, #56	; 0x38
 80098c2:	18f9      	adds	r1, r7, r3
 80098c4:	2318      	movs	r3, #24
 80098c6:	18f8      	adds	r0, r7, r3
 80098c8:	2389      	movs	r3, #137	; 0x89
 80098ca:	18fb      	adds	r3, r7, r3
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	2320      	movs	r3, #32
 80098d2:	2208      	movs	r2, #8
 80098d4:	f000 f9dc 	bl	8009c90 <_ZN11parseStringILt0EE6getStrEPchcc>
             if(strcmp((char*)tempBuff, "PPNO") == 0)
 80098d8:	4a46      	ldr	r2, [pc, #280]	; (80099f4 <_ZN7control6cyclicEv+0x564>)
 80098da:	2338      	movs	r3, #56	; 0x38
 80098dc:	18fb      	adds	r3, r7, r3
 80098de:	0011      	movs	r1, r2
 80098e0:	0018      	movs	r0, r3
 80098e2:	f7f6 fc11 	bl	8000108 <strcmp>
 80098e6:	1e03      	subs	r3, r0, #0
 80098e8:	d104      	bne.n	80098f4 <_ZN7control6cyclicEv+0x464>
                push = (ePinPush)PP_NO;
 80098ea:	238d      	movs	r3, #141	; 0x8d
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
             break;
 80098f2:	e01d      	b.n	8009930 <_ZN7control6cyclicEv+0x4a0>
             else if(strcmp((char*)tempBuff, "PPUP") == 0)
 80098f4:	4a40      	ldr	r2, [pc, #256]	; (80099f8 <_ZN7control6cyclicEv+0x568>)
 80098f6:	2338      	movs	r3, #56	; 0x38
 80098f8:	18fb      	adds	r3, r7, r3
 80098fa:	0011      	movs	r1, r2
 80098fc:	0018      	movs	r0, r3
 80098fe:	f7f6 fc03 	bl	8000108 <strcmp>
 8009902:	1e03      	subs	r3, r0, #0
 8009904:	d104      	bne.n	8009910 <_ZN7control6cyclicEv+0x480>
                push = (ePinPush)PP_UP;
 8009906:	238d      	movs	r3, #141	; 0x8d
 8009908:	18fb      	adds	r3, r7, r3
 800990a:	2201      	movs	r2, #1
 800990c:	701a      	strb	r2, [r3, #0]
             break;
 800990e:	e00f      	b.n	8009930 <_ZN7control6cyclicEv+0x4a0>
             else if(strcmp((char*)tempBuff, "PPDOWN") == 0)
 8009910:	4a3a      	ldr	r2, [pc, #232]	; (80099fc <_ZN7control6cyclicEv+0x56c>)
 8009912:	2338      	movs	r3, #56	; 0x38
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	0011      	movs	r1, r2
 8009918:	0018      	movs	r0, r3
 800991a:	f7f6 fbf5 	bl	8000108 <strcmp>
 800991e:	1e03      	subs	r3, r0, #0
 8009920:	d106      	bne.n	8009930 <_ZN7control6cyclicEv+0x4a0>
                push = (ePinPush)PP_DOWN;
 8009922:	238d      	movs	r3, #141	; 0x8d
 8009924:	18fb      	adds	r3, r7, r3
 8009926:	2202      	movs	r2, #2
 8009928:	701a      	strb	r2, [r3, #0]
             break;
 800992a:	e001      	b.n	8009930 <_ZN7control6cyclicEv+0x4a0>
             break;
 800992c:	46c0      	nop			; (mov r8, r8)
 800992e:	e000      	b.n	8009932 <_ZN7control6cyclicEv+0x4a2>
             break;
 8009930:	46c0      	nop			; (mov r8, r8)

         }

         if((mode < MODE_COUNT) and (push < PUSH_COUNT))
 8009932:	238e      	movs	r3, #142	; 0x8e
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b02      	cmp	r3, #2
 800993a:	dc11      	bgt.n	8009960 <_ZN7control6cyclicEv+0x4d0>
 800993c:	238d      	movs	r3, #141	; 0x8d
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b02      	cmp	r3, #2
 8009944:	dc0c      	bgt.n	8009960 <_ZN7control6cyclicEv+0x4d0>
         {
            configurePin(pinID, mode, push);
 8009946:	238d      	movs	r3, #141	; 0x8d
 8009948:	18fb      	adds	r3, r7, r3
 800994a:	781c      	ldrb	r4, [r3, #0]
 800994c:	238e      	movs	r3, #142	; 0x8e
 800994e:	18fb      	adds	r3, r7, r3
 8009950:	781a      	ldrb	r2, [r3, #0]
 8009952:	238c      	movs	r3, #140	; 0x8c
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	7819      	ldrb	r1, [r3, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	0023      	movs	r3, r4
 800995c:	f7ff fa6a 	bl	8008e34 <_ZN7control12configurePinEhNS_8ePinModeENS_8ePinPushE>
         }

         paramNumber++;
 8009960:	238b      	movs	r3, #139	; 0x8b
 8009962:	18fb      	adds	r3, r7, r3
 8009964:	781a      	ldrb	r2, [r3, #0]
 8009966:	238b      	movs	r3, #139	; 0x8b
 8009968:	18fb      	adds	r3, r7, r3
 800996a:	3201      	adds	r2, #1
 800996c:	701a      	strb	r2, [r3, #0]
       }while(tempChar != '\r');
 800996e:	2389      	movs	r3, #137	; 0x89
 8009970:	18fb      	adds	r3, r7, r3
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b0d      	cmp	r3, #13
 8009976:	d000      	beq.n	800997a <_ZN7control6cyclicEv+0x4ea>
    do
 8009978:	e724      	b.n	80097c4 <_ZN7control6cyclicEv+0x334>



    }

  if(stringEx.strcmpAndShift("Info\r", strlen("Info\r")) == 1)
 800997a:	4921      	ldr	r1, [pc, #132]	; (8009a00 <_ZN7control6cyclicEv+0x570>)
 800997c:	2318      	movs	r3, #24
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	2205      	movs	r2, #5
 8009982:	0018      	movs	r0, r3
 8009984:	f000 f8f3 	bl	8009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>
 8009988:	0003      	movs	r3, r0
 800998a:	3b01      	subs	r3, #1
 800998c:	425a      	negs	r2, r3
 800998e:	4153      	adcs	r3, r2
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d025      	beq.n	80099e2 <_ZN7control6cyclicEv+0x552>
  {
    for(uint8_t i = 0; i<=1; i++)
 8009996:	238a      	movs	r3, #138	; 0x8a
 8009998:	18fb      	adds	r3, r7, r3
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
 800999e:	238a      	movs	r3, #138	; 0x8a
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	dc1c      	bgt.n	80099e2 <_ZN7control6cyclicEv+0x552>
    {
	  CDC_Transmit_FS((uint8_t*) infoArray[i], strlen(infoArray[i]));
 80099a8:	238a      	movs	r3, #138	; 0x8a
 80099aa:	18fb      	adds	r3, r7, r3
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	4b15      	ldr	r3, [pc, #84]	; (8009a04 <_ZN7control6cyclicEv+0x574>)
 80099b0:	0092      	lsls	r2, r2, #2
 80099b2:	58d4      	ldr	r4, [r2, r3]
 80099b4:	238a      	movs	r3, #138	; 0x8a
 80099b6:	18fb      	adds	r3, r7, r3
 80099b8:	781a      	ldrb	r2, [r3, #0]
 80099ba:	4b12      	ldr	r3, [pc, #72]	; (8009a04 <_ZN7control6cyclicEv+0x574>)
 80099bc:	0092      	lsls	r2, r2, #2
 80099be:	58d3      	ldr	r3, [r2, r3]
 80099c0:	0018      	movs	r0, r3
 80099c2:	f7f6 fbab 	bl	800011c <strlen>
 80099c6:	0003      	movs	r3, r0
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	0019      	movs	r1, r3
 80099cc:	0020      	movs	r0, r4
 80099ce:	f000 fb4f 	bl	800a070 <CDC_Transmit_FS>
    for(uint8_t i = 0; i<=1; i++)
 80099d2:	238a      	movs	r3, #138	; 0x8a
 80099d4:	18fb      	adds	r3, r7, r3
 80099d6:	781a      	ldrb	r2, [r3, #0]
 80099d8:	238a      	movs	r3, #138	; 0x8a
 80099da:	18fb      	adds	r3, r7, r3
 80099dc:	3201      	adds	r2, #1
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e7dd      	b.n	800999e <_ZN7control6cyclicEv+0x50e>
    }

  }


  stringEx.reset();
 80099e2:	2318      	movs	r3, #24
 80099e4:	18fb      	adds	r3, r7, r3
 80099e6:	0018      	movs	r0, r3
 80099e8:	f000 f96c 	bl	8009cc4 <_ZN11parseStringILt0EE5resetEv>

}
 80099ec:	46c0      	nop			; (mov r8, r8)
 80099ee:	46bd      	mov	sp, r7
 80099f0:	b025      	add	sp, #148	; 0x94
 80099f2:	bd90      	pop	{r4, r7, pc}
 80099f4:	0800ae18 	.word	0x0800ae18
 80099f8:	0800ae20 	.word	0x0800ae20
 80099fc:	0800ae28 	.word	0x0800ae28
 8009a00:	0800ae30 	.word	0x0800ae30
 8009a04:	20000000 	.word	0x20000000

08009a08 <_ZN11str2numBaseImE10str2uintExEPmPcth>:
uint8_t str2numBase <T>::str2uintEx(uint32_t *retValue, char *a, uint16_t len, uint8_t soust)
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	0019      	movs	r1, r3
 8009a14:	1dbb      	adds	r3, r7, #6
 8009a16:	801a      	strh	r2, [r3, #0]
 8009a18:	1d7b      	adds	r3, r7, #5
 8009a1a:	1c0a      	adds	r2, r1, #0
 8009a1c:	701a      	strb	r2, [r3, #0]
  uint16_t i = 0;
 8009a1e:	2316      	movs	r3, #22
 8009a20:	18fb      	adds	r3, r7, r3
 8009a22:	2200      	movs	r2, #0
 8009a24:	801a      	strh	r2, [r3, #0]
  uint16_t addVal = 0;
 8009a26:	2314      	movs	r3, #20
 8009a28:	18fb      	adds	r3, r7, r3
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	801a      	strh	r2, [r3, #0]
  uint32_t val = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	613b      	str	r3, [r7, #16]
  for(i=0;i<len;i++)
 8009a32:	2316      	movs	r3, #22
 8009a34:	18fb      	adds	r3, r7, r3
 8009a36:	2200      	movs	r2, #0
 8009a38:	801a      	strh	r2, [r3, #0]
 8009a3a:	2316      	movs	r3, #22
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	881a      	ldrh	r2, [r3, #0]
 8009a40:	1dbb      	adds	r3, r7, #6
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	db00      	blt.n	8009a4a <_ZN11str2numBaseImE10str2uintExEPmPcth+0x42>
 8009a48:	e066      	b.n	8009b18 <_ZN11str2numBaseImE10str2uintExEPmPcth+0x110>
    if((a[i] >= '0') && (a[i] <= '9'))
 8009a4a:	2316      	movs	r3, #22
 8009a4c:	18fb      	adds	r3, r7, r3
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	18d3      	adds	r3, r2, r3
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b2f      	cmp	r3, #47	; 0x2f
 8009a58:	dd13      	ble.n	8009a82 <_ZN11str2numBaseImE10str2uintExEPmPcth+0x7a>
 8009a5a:	2316      	movs	r3, #22
 8009a5c:	18fb      	adds	r3, r7, r3
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	18d3      	adds	r3, r2, r3
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b39      	cmp	r3, #57	; 0x39
 8009a68:	dc0b      	bgt.n	8009a82 <_ZN11str2numBaseImE10str2uintExEPmPcth+0x7a>
      addVal = a[i]-'0';
 8009a6a:	2316      	movs	r3, #22
 8009a6c:	18fb      	adds	r3, r7, r3
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	18d3      	adds	r3, r2, r3
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	2314      	movs	r3, #20
 8009a7a:	18fb      	adds	r3, r7, r3
 8009a7c:	3a30      	subs	r2, #48	; 0x30
 8009a7e:	801a      	strh	r2, [r3, #0]
 8009a80:	e039      	b.n	8009af6 <_ZN11str2numBaseImE10str2uintExEPmPcth+0xee>
    else if((a[i] >= 'a') && (a[i] <= 'z')) // a menci nez..
 8009a82:	2316      	movs	r3, #22
 8009a84:	18fb      	adds	r3, r7, r3
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	18d3      	adds	r3, r2, r3
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b60      	cmp	r3, #96	; 0x60
 8009a90:	dd13      	ble.n	8009aba <_ZN11str2numBaseImE10str2uintExEPmPcth+0xb2>
 8009a92:	2316      	movs	r3, #22
 8009a94:	18fb      	adds	r3, r7, r3
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	18d3      	adds	r3, r2, r3
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b7a      	cmp	r3, #122	; 0x7a
 8009aa0:	dc0b      	bgt.n	8009aba <_ZN11str2numBaseImE10str2uintExEPmPcth+0xb2>
      addVal = a[i]-'a'+10;
 8009aa2:	2316      	movs	r3, #22
 8009aa4:	18fb      	adds	r3, r7, r3
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	18d3      	adds	r3, r2, r3
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	2314      	movs	r3, #20
 8009ab2:	18fb      	adds	r3, r7, r3
 8009ab4:	3a57      	subs	r2, #87	; 0x57
 8009ab6:	801a      	strh	r2, [r3, #0]
 8009ab8:	e01d      	b.n	8009af6 <_ZN11str2numBaseImE10str2uintExEPmPcth+0xee>
    else if((a[i] >= 'A') && (a[i] <= 'Z'))  // a menci nez..
 8009aba:	2316      	movs	r3, #22
 8009abc:	18fb      	adds	r3, r7, r3
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	18d3      	adds	r3, r2, r3
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b40      	cmp	r3, #64	; 0x40
 8009ac8:	dd13      	ble.n	8009af2 <_ZN11str2numBaseImE10str2uintExEPmPcth+0xea>
 8009aca:	2316      	movs	r3, #22
 8009acc:	18fb      	adds	r3, r7, r3
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	18d3      	adds	r3, r2, r3
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b5a      	cmp	r3, #90	; 0x5a
 8009ad8:	dc0b      	bgt.n	8009af2 <_ZN11str2numBaseImE10str2uintExEPmPcth+0xea>
      addVal = a[i]-'A'+10;
 8009ada:	2316      	movs	r3, #22
 8009adc:	18fb      	adds	r3, r7, r3
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	18d3      	adds	r3, r2, r3
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	2314      	movs	r3, #20
 8009aea:	18fb      	adds	r3, r7, r3
 8009aec:	3a37      	subs	r2, #55	; 0x37
 8009aee:	801a      	strh	r2, [r3, #0]
 8009af0:	e001      	b.n	8009af6 <_ZN11str2numBaseImE10str2uintExEPmPcth+0xee>
      return 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	e014      	b.n	8009b20 <_ZN11str2numBaseImE10str2uintExEPmPcth+0x118>
     val = val*soust + addVal;
 8009af6:	1d7b      	adds	r3, r7, #5
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	435a      	muls	r2, r3
 8009afe:	2314      	movs	r3, #20
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	18d3      	adds	r3, r2, r3
 8009b06:	613b      	str	r3, [r7, #16]
  for(i=0;i<len;i++)
 8009b08:	2316      	movs	r3, #22
 8009b0a:	18fb      	adds	r3, r7, r3
 8009b0c:	881a      	ldrh	r2, [r3, #0]
 8009b0e:	2316      	movs	r3, #22
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	3201      	adds	r2, #1
 8009b14:	801a      	strh	r2, [r3, #0]
 8009b16:	e790      	b.n	8009a3a <_ZN11str2numBaseImE10str2uintExEPmPcth+0x32>
  *retValue = val;    
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	601a      	str	r2, [r3, #0]
  return 1;
 8009b1e:	2301      	movs	r3, #1
}
 8009b20:	0018      	movs	r0, r3
 8009b22:	46bd      	mov	sp, r7
 8009b24:	b006      	add	sp, #24
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <_ZN11parseStringILt0EEC1Ev>:

template<uint16_t SIZE>
class parseString
{
  public:
    parseString() {};
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	0018      	movs	r0, r3
 8009b34:	46bd      	mov	sp, r7
 8009b36:	b002      	add	sp, #8
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <_ZN11parseStringILt0EE4InitEPct>:

    void Init(char *arg_source, uint16_t arg_nSource) { source=arg_source; current=source; nSourceBackup=arg_nSource; nSource=arg_nSource;}
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	1dbb      	adds	r3, r7, #6
 8009b46:	801a      	strh	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	611a      	str	r2, [r3, #16]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	691a      	ldr	r2, [r3, #16]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	619a      	str	r2, [r3, #24]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	1dba      	adds	r2, r7, #6
 8009b5a:	8812      	ldrh	r2, [r2, #0]
 8009b5c:	82da      	strh	r2, [r3, #22]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1dba      	adds	r2, r7, #6
 8009b62:	8812      	ldrh	r2, [r2, #0]
 8009b64:	829a      	strh	r2, [r3, #20]
 8009b66:	46c0      	nop			; (mov r8, r8)
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	b004      	add	sp, #16
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <_ZN11parseStringILt0EE14strcmpAndShiftEPKct>:
}



template<uint16_t SIZE>
int32_t parseString<SIZE>::strcmpAndShift(const char *s1, uint16_t arg_size)
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	1dbb      	adds	r3, r7, #6
 8009b7a:	801a      	strh	r2, [r3, #0]
{
  const char *loc_s1 = s1;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	613b      	str	r3, [r7, #16]
  char *loc_s2 = current;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	617b      	str	r3, [r7, #20]
     
    while (arg_size > 0)
 8009b86:	1dbb      	adds	r3, r7, #6
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	dd1d      	ble.n	8009bca <_ZN11parseStringILt0EE14strcmpAndShiftEPKct+0x5c>
  {
    arg_size--;
 8009b8e:	1dbb      	adds	r3, r7, #6
 8009b90:	881a      	ldrh	r2, [r3, #0]
 8009b92:	1dbb      	adds	r3, r7, #6
 8009b94:	3a01      	subs	r2, #1
 8009b96:	801a      	strh	r2, [r3, #0]
    if(*s1 == *loc_s2)
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	781a      	ldrb	r2, [r3, #0]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d103      	bne.n	8009bac <_ZN11parseStringILt0EE14strcmpAndShiftEPKct+0x3e>
    {
      *s1++;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60bb      	str	r3, [r7, #8]
 8009baa:	e001      	b.n	8009bb0 <_ZN11parseStringILt0EE14strcmpAndShiftEPKct+0x42>
    }
    else
    {
      s1 = loc_s1;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	60bb      	str	r3, [r7, #8]
    }
       
    if (*s1 == 0)
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <_ZN11parseStringILt0EE14strcmpAndShiftEPKct+0x54>
    {
      current = loc_s2;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	619a      	str	r2, [r3, #24]
      return 1;  
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e004      	b.n	8009bcc <_ZN11parseStringILt0EE14strcmpAndShiftEPKct+0x5e>
    }
      
    *loc_s2++;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
    while (arg_size > 0)
 8009bc8:	e7dd      	b.n	8009b86 <_ZN11parseStringILt0EE14strcmpAndShiftEPKct+0x18>
  }
    return 0;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	0018      	movs	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	b006      	add	sp, #24
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <_ZN11parseStringILt0EE8findNextEPKch>:
char parseString<SIZE>::findNext(const char *end, uint8_t size)
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	1dfb      	adds	r3, r7, #7
 8009be0:	701a      	strb	r2, [r3, #0]
  char *loc_s1 = current;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	617b      	str	r3, [r7, #20]
  char returnVal = 0;
 8009be8:	2313      	movs	r3, #19
 8009bea:	18fb      	adds	r3, r7, r3
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
  while(*loc_s1 != 0)                                                              
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d017      	beq.n	8009c28 <_ZN11parseStringILt0EE8findNextEPKch+0x54>
    if(isOneOf(*loc_s1, end, size) != 0)
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	7819      	ldrb	r1, [r3, #0]
 8009bfc:	1dfb      	adds	r3, r7, #7
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 f86e 	bl	8009ce4 <_ZN11parseStringILt0EE7isOneOfEcPKch>
 8009c08:	0003      	movs	r3, r0
 8009c0a:	1e5a      	subs	r2, r3, #1
 8009c0c:	4193      	sbcs	r3, r2
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d005      	beq.n	8009c20 <_ZN11parseStringILt0EE8findNextEPKch+0x4c>
      returnVal = *loc_s1;
 8009c14:	2313      	movs	r3, #19
 8009c16:	18fb      	adds	r3, r7, r3
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	7812      	ldrb	r2, [r2, #0]
 8009c1c:	701a      	strb	r2, [r3, #0]
      break;
 8009c1e:	e003      	b.n	8009c28 <_ZN11parseStringILt0EE8findNextEPKch+0x54>
    loc_s1++;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3301      	adds	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  while(*loc_s1 != 0)                                                              
 8009c26:	e7e3      	b.n	8009bf0 <_ZN11parseStringILt0EE8findNextEPKch+0x1c>
    return returnVal;
 8009c28:	2313      	movs	r3, #19
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
}
 8009c2e:	0018      	movs	r0, r3
 8009c30:	46bd      	mov	sp, r7
 8009c32:	b006      	add	sp, #24
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <_ZN11parseStringILt0EE7getUintEcc>:
uint32_t parseString<SIZE>::getUint(const char start, const char end)
 8009c36:	b590      	push	{r4, r7, lr}
 8009c38:	b085      	sub	sp, #20
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	0008      	movs	r0, r1
 8009c40:	0011      	movs	r1, r2
 8009c42:	1cfb      	adds	r3, r7, #3
 8009c44:	1c02      	adds	r2, r0, #0
 8009c46:	701a      	strb	r2, [r3, #0]
 8009c48:	1cbb      	adds	r3, r7, #2
 8009c4a:	1c0a      	adds	r2, r1, #0
 8009c4c:	701a      	strb	r2, [r3, #0]
  extractStr(temp, start, end);
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	1cbb      	adds	r3, r7, #2
 8009c52:	781c      	ldrb	r4, [r3, #0]
 8009c54:	1cfb      	adds	r3, r7, #3
 8009c56:	781a      	ldrb	r2, [r3, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	0023      	movs	r3, r4
 8009c5c:	f000 f87a 	bl	8009d54 <_ZN11parseStringILt0EE10extractStrEPccc>
  stateLastConvers = str2num<uint32_t>::getNumEx(&value, temp, strlen(temp), 10);
 8009c60:	687c      	ldr	r4, [r7, #4]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	0011      	movs	r1, r2
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f000 f903 	bl	8009e74 <_ZN11parseStringILt0EE6strlenEPKc>
 8009c6e:	0003      	movs	r3, r0
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	230c      	movs	r3, #12
 8009c74:	18f8      	adds	r0, r7, r3
 8009c76:	230a      	movs	r3, #10
 8009c78:	0021      	movs	r1, r4
 8009c7a:	f7ff f805 	bl	8008c88 <_ZN7str2numImE8getNumExEPmPchh>
 8009c7e:	0003      	movs	r3, r0
 8009c80:	001a      	movs	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	771a      	strb	r2, [r3, #28]
  return value;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	0018      	movs	r0, r3
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	b005      	add	sp, #20
 8009c8e:	bd90      	pop	{r4, r7, pc}

08009c90 <_ZN11parseStringILt0EE6getStrEPchcc>:
uint8_t parseString<SIZE>::getStr(char *outString, uint8_t outSize, const char start, const char end)  //TODO OUTSIZE se muzi pouzit, jinak muze pretect vystupni buffer
 8009c90:	b590      	push	{r4, r7, lr}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	0019      	movs	r1, r3
 8009c9c:	1dfb      	adds	r3, r7, #7
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	1dbb      	adds	r3, r7, #6
 8009ca2:	1c0a      	adds	r2, r1, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
  extractStr(outString, start, end); // TADY MUSI BYT TAKY VELIKOST VSTUPNIHO BUFFERU A OMEZEN
 8009ca6:	2320      	movs	r3, #32
 8009ca8:	18fb      	adds	r3, r7, r3
 8009caa:	781c      	ldrb	r4, [r3, #0]
 8009cac:	1dbb      	adds	r3, r7, #6
 8009cae:	781a      	ldrb	r2, [r3, #0]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	0023      	movs	r3, r4
 8009cb6:	f000 f84d 	bl	8009d54 <_ZN11parseStringILt0EE10extractStrEPccc>
  return 1;  
 8009cba:	2301      	movs	r3, #1
}
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	b005      	add	sp, #20
 8009cc2:	bd90      	pop	{r4, r7, pc}

08009cc4 <_ZN11parseStringILt0EE5resetEv>:
    void reset() {current=source; nSource=nSourceBackup;}
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	619a      	str	r2, [r3, #24]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8ada      	ldrh	r2, [r3, #22]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	829a      	strh	r2, [r3, #20]
 8009cdc:	46c0      	nop			; (mov r8, r8)
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	b002      	add	sp, #8
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <_ZN11parseStringILt0EE7isOneOfEcPKch>:
char parseString<SIZE>::isOneOf(const char currentChar, const char *possibleChar, uint8_t size)
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	0008      	movs	r0, r1
 8009cee:	607a      	str	r2, [r7, #4]
 8009cf0:	0019      	movs	r1, r3
 8009cf2:	230b      	movs	r3, #11
 8009cf4:	18fb      	adds	r3, r7, r3
 8009cf6:	1c02      	adds	r2, r0, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
 8009cfa:	230a      	movs	r3, #10
 8009cfc:	18fb      	adds	r3, r7, r3
 8009cfe:	1c0a      	adds	r2, r1, #0
 8009d00:	701a      	strb	r2, [r3, #0]
  char returnVal = 0;
 8009d02:	2317      	movs	r3, #23
 8009d04:	18fb      	adds	r3, r7, r3
 8009d06:	2200      	movs	r2, #0
 8009d08:	701a      	strb	r2, [r3, #0]
  while(size-- > 0)
 8009d0a:	230a      	movs	r3, #10
 8009d0c:	18fb      	adds	r3, r7, r3
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	220a      	movs	r2, #10
 8009d12:	18ba      	adds	r2, r7, r2
 8009d14:	1e59      	subs	r1, r3, #1
 8009d16:	7011      	strb	r1, [r2, #0]
 8009d18:	17da      	asrs	r2, r3, #31
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	0fdb      	lsrs	r3, r3, #31
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d010      	beq.n	8009d46 <_ZN11parseStringILt0EE7isOneOfEcPKch+0x62>
    if(currentChar == *(possibleChar+size))
 8009d24:	230a      	movs	r3, #10
 8009d26:	18fb      	adds	r3, r7, r3
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	18d3      	adds	r3, r2, r3
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	220b      	movs	r2, #11
 8009d32:	18ba      	adds	r2, r7, r2
 8009d34:	7812      	ldrb	r2, [r2, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d1e7      	bne.n	8009d0a <_ZN11parseStringILt0EE7isOneOfEcPKch+0x26>
      returnVal = currentChar;
 8009d3a:	2317      	movs	r3, #23
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	220b      	movs	r2, #11
 8009d40:	18ba      	adds	r2, r7, r2
 8009d42:	7812      	ldrb	r2, [r2, #0]
 8009d44:	701a      	strb	r2, [r3, #0]
  return returnVal;
 8009d46:	2317      	movs	r3, #23
 8009d48:	18fb      	adds	r3, r7, r3
 8009d4a:	781b      	ldrb	r3, [r3, #0]
}
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	b006      	add	sp, #24
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <_ZN11parseStringILt0EE10extractStrEPccc>:
int32_t parseString<SIZE>::extractStr(char *dest, const char start, const char end)
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	0019      	movs	r1, r3
 8009d60:	1dfb      	adds	r3, r7, #7
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	1dbb      	adds	r3, r7, #6
 8009d66:	1c0a      	adds	r2, r1, #0
 8009d68:	701a      	strb	r2, [r3, #0]
    uint8_t loc_prog = 0;
 8009d6a:	2317      	movs	r3, #23
 8009d6c:	18fb      	adds	r3, r7, r3
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
    uint8_t loc_leng = 0;
 8009d72:	2316      	movs	r3, #22
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	2200      	movs	r2, #0
 8009d78:	701a      	strb	r2, [r3, #0]
    uint8_t loc_skipedLetters = 0;
 8009d7a:	2315      	movs	r3, #21
 8009d7c:	18fb      	adds	r3, r7, r3
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
    if(start == 0)
 8009d82:	1dfb      	adds	r3, r7, #7
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d103      	bne.n	8009d92 <_ZN11parseStringILt0EE10extractStrEPccc+0x3e>
      loc_prog = 1;
 8009d8a:	2317      	movs	r3, #23
 8009d8c:	18fb      	adds	r3, r7, r3
 8009d8e:	2201      	movs	r2, #1
 8009d90:	701a      	strb	r2, [r3, #0]
      while ((nSource > 0) && (*current != 0))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	8a9b      	ldrh	r3, [r3, #20]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dd64      	ble.n	8009e64 <_ZN11parseStringILt0EE10extractStrEPccc+0x110>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d05f      	beq.n	8009e64 <_ZN11parseStringILt0EE10extractStrEPccc+0x110>
      nSource--;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	8a9b      	ldrh	r3, [r3, #20]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	829a      	strh	r2, [r3, #20]
      if(*current == start)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	1dfa      	adds	r2, r7, #7
 8009db8:	7812      	ldrb	r2, [r2, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d10b      	bne.n	8009dd6 <_ZN11parseStringILt0EE10extractStrEPccc+0x82>
        loc_prog = 1;
 8009dbe:	2317      	movs	r3, #23
 8009dc0:	18fb      	adds	r3, r7, r3
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]
        loc_skipedLetters++;
 8009dc6:	2315      	movs	r3, #21
 8009dc8:	18fb      	adds	r3, r7, r3
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	2315      	movs	r3, #21
 8009dce:	18fb      	adds	r3, r7, r3
 8009dd0:	3201      	adds	r2, #1
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	e040      	b.n	8009e58 <_ZN11parseStringILt0EE10extractStrEPccc+0x104>
      else if(*current == end)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	1dba      	adds	r2, r7, #6
 8009dde:	7812      	ldrb	r2, [r2, #0]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d11e      	bne.n	8009e22 <_ZN11parseStringILt0EE10extractStrEPccc+0xce>
        if(loc_prog == 1)
 8009de4:	2317      	movs	r3, #23
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d111      	bne.n	8009e12 <_ZN11parseStringILt0EE10extractStrEPccc+0xbe>
          *dest = 0; 
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2200      	movs	r2, #0
 8009df2:	701a      	strb	r2, [r3, #0]
          nSource++; 
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8a9b      	ldrh	r3, [r3, #20]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	829a      	strh	r2, [r3, #20]
          *current++; 
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	619a      	str	r2, [r3, #24]
          return loc_leng;  
 8009e0a:	2316      	movs	r3, #22
 8009e0c:	18fb      	adds	r3, r7, r3
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	e02c      	b.n	8009e6c <_ZN11parseStringILt0EE10extractStrEPccc+0x118>
          loc_skipedLetters++;
 8009e12:	2315      	movs	r3, #21
 8009e14:	18fb      	adds	r3, r7, r3
 8009e16:	781a      	ldrb	r2, [r3, #0]
 8009e18:	2315      	movs	r3, #21
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	3201      	adds	r2, #1
 8009e1e:	701a      	strb	r2, [r3, #0]
 8009e20:	e01a      	b.n	8009e58 <_ZN11parseStringILt0EE10extractStrEPccc+0x104>
        if(loc_prog == 1)
 8009e22:	2317      	movs	r3, #23
 8009e24:	18fb      	adds	r3, r7, r3
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d10e      	bne.n	8009e4a <_ZN11parseStringILt0EE10extractStrEPccc+0xf6>
          *dest++ = *current;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	60ba      	str	r2, [r7, #8]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	6992      	ldr	r2, [r2, #24]
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	701a      	strb	r2, [r3, #0]
          loc_leng++;
 8009e3a:	2316      	movs	r3, #22
 8009e3c:	18fb      	adds	r3, r7, r3
 8009e3e:	781a      	ldrb	r2, [r3, #0]
 8009e40:	2316      	movs	r3, #22
 8009e42:	18fb      	adds	r3, r7, r3
 8009e44:	3201      	adds	r2, #1
 8009e46:	701a      	strb	r2, [r3, #0]
 8009e48:	e006      	b.n	8009e58 <_ZN11parseStringILt0EE10extractStrEPccc+0x104>
          loc_skipedLetters++;
 8009e4a:	2315      	movs	r3, #21
 8009e4c:	18fb      	adds	r3, r7, r3
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	2315      	movs	r3, #21
 8009e52:	18fb      	adds	r3, r7, r3
 8009e54:	3201      	adds	r2, #1
 8009e56:	701a      	strb	r2, [r3, #0]
      *current++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	619a      	str	r2, [r3, #24]
      while ((nSource > 0) && (*current != 0))
 8009e62:	e796      	b.n	8009d92 <_ZN11parseStringILt0EE10extractStrEPccc+0x3e>
  *dest = 0; 
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
    return 0;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	b006      	add	sp, #24
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <_ZN11parseStringILt0EE6strlenEPKc>:

template<uint16_t SIZE>
size_t parseString<SIZE>::strlen(const char *str)
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
{
  const char *s;

  for (s = str; *s; ++s)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <_ZN11parseStringILt0EE6strlenEPKc+0x1e>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e7f7      	b.n	8009e82 <_ZN11parseStringILt0EE6strlenEPKc+0xe>
                ;
  return (s - str);
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	1ad3      	subs	r3, r2, r3
}
 8009e98:	0018      	movs	r0, r3
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	b004      	add	sp, #16
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8009ea4:	4b1a      	ldr	r3, [pc, #104]	; (8009f10 <SystemInit+0x70>)
 8009ea6:	4a1a      	ldr	r2, [pc, #104]	; (8009f10 <SystemInit+0x70>)
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	2101      	movs	r1, #1
 8009eac:	430a      	orrs	r2, r1
 8009eae:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8009eb0:	4b17      	ldr	r3, [pc, #92]	; (8009f10 <SystemInit+0x70>)
 8009eb2:	4a17      	ldr	r2, [pc, #92]	; (8009f10 <SystemInit+0x70>)
 8009eb4:	6852      	ldr	r2, [r2, #4]
 8009eb6:	4917      	ldr	r1, [pc, #92]	; (8009f14 <SystemInit+0x74>)
 8009eb8:	400a      	ands	r2, r1
 8009eba:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8009ebc:	4b14      	ldr	r3, [pc, #80]	; (8009f10 <SystemInit+0x70>)
 8009ebe:	4a14      	ldr	r2, [pc, #80]	; (8009f10 <SystemInit+0x70>)
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	4915      	ldr	r1, [pc, #84]	; (8009f18 <SystemInit+0x78>)
 8009ec4:	400a      	ands	r2, r1
 8009ec6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8009ec8:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <SystemInit+0x70>)
 8009eca:	4a11      	ldr	r2, [pc, #68]	; (8009f10 <SystemInit+0x70>)
 8009ecc:	6812      	ldr	r2, [r2, #0]
 8009ece:	4913      	ldr	r1, [pc, #76]	; (8009f1c <SystemInit+0x7c>)
 8009ed0:	400a      	ands	r2, r1
 8009ed2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <SystemInit+0x70>)
 8009ed6:	4a0e      	ldr	r2, [pc, #56]	; (8009f10 <SystemInit+0x70>)
 8009ed8:	6852      	ldr	r2, [r2, #4]
 8009eda:	4911      	ldr	r1, [pc, #68]	; (8009f20 <SystemInit+0x80>)
 8009edc:	400a      	ands	r2, r1
 8009ede:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <SystemInit+0x70>)
 8009ee2:	4a0b      	ldr	r2, [pc, #44]	; (8009f10 <SystemInit+0x70>)
 8009ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ee6:	210f      	movs	r1, #15
 8009ee8:	438a      	bics	r2, r1
 8009eea:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8009eec:	4b08      	ldr	r3, [pc, #32]	; (8009f10 <SystemInit+0x70>)
 8009eee:	4a08      	ldr	r2, [pc, #32]	; (8009f10 <SystemInit+0x70>)
 8009ef0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ef2:	490c      	ldr	r1, [pc, #48]	; (8009f24 <SystemInit+0x84>)
 8009ef4:	400a      	ands	r2, r1
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <SystemInit+0x70>)
 8009efa:	4a05      	ldr	r2, [pc, #20]	; (8009f10 <SystemInit+0x70>)
 8009efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009efe:	2101      	movs	r1, #1
 8009f00:	438a      	bics	r2, r1
 8009f02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <SystemInit+0x70>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	609a      	str	r2, [r3, #8]

}
 8009f0a:	46c0      	nop			; (mov r8, r8)
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	40021000 	.word	0x40021000
 8009f14:	08ffb80c 	.word	0x08ffb80c
 8009f18:	fef6ffff 	.word	0xfef6ffff
 8009f1c:	fffbffff 	.word	0xfffbffff
 8009f20:	ffc0ffff 	.word	0xffc0ffff
 8009f24:	fffcfe2c 	.word	0xfffcfe2c

08009f28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8009f2c:	490c      	ldr	r1, [pc, #48]	; (8009f60 <MX_USB_DEVICE_Init+0x38>)
 8009f2e:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <MX_USB_DEVICE_Init+0x3c>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	0018      	movs	r0, r3
 8009f34:	f7fb fa4d 	bl	80053d2 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8009f38:	4a0b      	ldr	r2, [pc, #44]	; (8009f68 <MX_USB_DEVICE_Init+0x40>)
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <MX_USB_DEVICE_Init+0x3c>)
 8009f3c:	0011      	movs	r1, r2
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f7fb fa78 	bl	8005434 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8009f44:	4a09      	ldr	r2, [pc, #36]	; (8009f6c <MX_USB_DEVICE_Init+0x44>)
 8009f46:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <MX_USB_DEVICE_Init+0x3c>)
 8009f48:	0011      	movs	r1, r2
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7fb f996 	bl	800527c <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <MX_USB_DEVICE_Init+0x3c>)
 8009f52:	0018      	movs	r0, r3
 8009f54:	f7fb fa8f 	bl	8005476 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f58:	46c0      	nop			; (mov r8, r8)
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	46c0      	nop			; (mov r8, r8)
 8009f60:	20000260 	.word	0x20000260
 8009f64:	20001310 	.word	0x20001310
 8009f68:	20000144 	.word	0x20000144
 8009f6c:	20000250 	.word	0x20000250

08009f70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f74:	4907      	ldr	r1, [pc, #28]	; (8009f94 <CDC_Init_FS+0x24>)
 8009f76:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <CDC_Init_FS+0x28>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	f7fb f99a 	bl	80052b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f80:	4a06      	ldr	r2, [pc, #24]	; (8009f9c <CDC_Init_FS+0x2c>)
 8009f82:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <CDC_Init_FS+0x28>)
 8009f84:	0011      	movs	r1, r2
 8009f86:	0018      	movs	r0, r3
 8009f88:	f7fb f9b0 	bl	80052ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f8c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f8e:	0018      	movs	r0, r3
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	2000191c 	.word	0x2000191c
 8009f98:	20001310 	.word	0x20001310
 8009f9c:	20001534 	.word	0x20001534

08009fa0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fa4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6039      	str	r1, [r7, #0]
 8009fb4:	0011      	movs	r1, r2
 8009fb6:	1dfb      	adds	r3, r7, #7
 8009fb8:	1c02      	adds	r2, r0, #0
 8009fba:	701a      	strb	r2, [r3, #0]
 8009fbc:	1d3b      	adds	r3, r7, #4
 8009fbe:	1c0a      	adds	r2, r1, #0
 8009fc0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fc2:	1dfb      	adds	r3, r7, #7
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b23      	cmp	r3, #35	; 0x23
 8009fc8:	d804      	bhi.n	8009fd4 <CDC_Control_FS+0x28>
 8009fca:	009a      	lsls	r2, r3, #2
 8009fcc:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <CDC_Control_FS+0x34>)
 8009fce:	18d3      	adds	r3, r2, r3
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009fd4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8009fd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009fd8:	0018      	movs	r0, r3
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	b002      	add	sp, #8
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	0800af20 	.word	0x0800af20

08009fe4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint16_t lenght = *Len;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	18fb      	adds	r3, r7, r3
 8009ff6:	801a      	strh	r2, [r3, #0]
  uint8_t value = 0;
 8009ff8:	230b      	movs	r3, #11
 8009ffa:	18fb      	adds	r3, r7, r3
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	701a      	strb	r2, [r3, #0]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	4b19      	ldr	r3, [pc, #100]	; (800a068 <CDC_Receive_FS+0x84>)
 800a004:	0011      	movs	r1, r2
 800a006:	0018      	movs	r0, r3
 800a008:	f7fb f970 	bl	80052ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a00c:	4b16      	ldr	r3, [pc, #88]	; (800a068 <CDC_Receive_FS+0x84>)
 800a00e:	0018      	movs	r0, r3
 800a010:	f7fb f9b1 	bl	8005376 <USBD_CDC_ReceivePacket>

  for(uint8_t index=0; index<(*Len); index++)
 800a014:	230f      	movs	r3, #15
 800a016:	18fb      	adds	r3, r7, r3
 800a018:	2200      	movs	r2, #0
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	e018      	b.n	800a050 <CDC_Receive_FS+0x6c>
  {
	 value = Buf[index];
 800a01e:	230f      	movs	r3, #15
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	18d2      	adds	r2, r2, r3
 800a028:	230b      	movs	r3, #11
 800a02a:	18fb      	adds	r3, r7, r3
 800a02c:	7812      	ldrb	r2, [r2, #0]
 800a02e:	701a      	strb	r2, [r3, #0]
	 osMessagePut(cdcDataHandle, (uint32_t)value, 0);
 800a030:	4b0e      	ldr	r3, [pc, #56]	; (800a06c <CDC_Receive_FS+0x88>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	230b      	movs	r3, #11
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	0019      	movs	r1, r3
 800a03e:	f7fc fa87 	bl	8006550 <osMessagePut>
  for(uint8_t index=0; index<(*Len); index++)
 800a042:	230f      	movs	r3, #15
 800a044:	18fb      	adds	r3, r7, r3
 800a046:	781a      	ldrb	r2, [r3, #0]
 800a048:	230f      	movs	r3, #15
 800a04a:	18fb      	adds	r3, r7, r3
 800a04c:	3201      	adds	r2, #1
 800a04e:	701a      	strb	r2, [r3, #0]
 800a050:	230f      	movs	r3, #15
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d3df      	bcc.n	800a01e <CDC_Receive_FS+0x3a>
	lenght--;
	Buf++;
  }
*/

  return (USBD_OK);
 800a05e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a060:	0018      	movs	r0, r3
 800a062:	46bd      	mov	sp, r7
 800a064:	b004      	add	sp, #16
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20001310 	.word	0x20001310
 800a06c:	20000360 	.word	0x20000360

0800a070 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	000a      	movs	r2, r1
 800a07a:	1cbb      	adds	r3, r7, #2
 800a07c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a07e:	230f      	movs	r3, #15
 800a080:	18fb      	adds	r3, r7, r3
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a086:	4a11      	ldr	r2, [pc, #68]	; (800a0cc <CDC_Transmit_FS+0x5c>)
 800a088:	2386      	movs	r3, #134	; 0x86
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	58d3      	ldr	r3, [r2, r3]
 800a08e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	2385      	movs	r3, #133	; 0x85
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	58d3      	ldr	r3, [r2, r3]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e011      	b.n	800a0c4 <CDC_Transmit_FS+0x54>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a0a0:	1cbb      	adds	r3, r7, #2
 800a0a2:	881a      	ldrh	r2, [r3, #0]
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <CDC_Transmit_FS+0x5c>)
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f7fb f903 	bl	80052b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0ae:	230f      	movs	r3, #15
 800a0b0:	18fc      	adds	r4, r7, r3
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <CDC_Transmit_FS+0x5c>)
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f7fb f92d 	bl	8005314 <USBD_CDC_TransmitPacket>
 800a0ba:	0003      	movs	r3, r0
 800a0bc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800a0be:	230f      	movs	r3, #15
 800a0c0:	18fb      	adds	r3, r7, r3
 800a0c2:	781b      	ldrb	r3, [r3, #0]
}
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b005      	add	sp, #20
 800a0ca:	bd90      	pop	{r4, r7, pc}
 800a0cc:	20001310 	.word	0x20001310

0800a0d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a0e      	ldr	r2, [pc, #56]	; (800a118 <HAL_PCD_MspInit+0x48>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d115      	bne.n	800a10e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a0e2:	4b0e      	ldr	r3, [pc, #56]	; (800a11c <HAL_PCD_MspInit+0x4c>)
 800a0e4:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <HAL_PCD_MspInit+0x4c>)
 800a0e6:	69d2      	ldr	r2, [r2, #28]
 800a0e8:	2180      	movs	r1, #128	; 0x80
 800a0ea:	0409      	lsls	r1, r1, #16
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	61da      	str	r2, [r3, #28]
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <HAL_PCD_MspInit+0x4c>)
 800a0f2:	69da      	ldr	r2, [r3, #28]
 800a0f4:	2380      	movs	r3, #128	; 0x80
 800a0f6:	041b      	lsls	r3, r3, #16
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 3, 0);
 800a0fe:	2200      	movs	r2, #0
 800a100:	2103      	movs	r1, #3
 800a102:	201f      	movs	r0, #31
 800a104:	f7f7 faec 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a108:	201f      	movs	r0, #31
 800a10a:	f7f7 faff 	bl	800170c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	46bd      	mov	sp, r7
 800a112:	b004      	add	sp, #16
 800a114:	bd80      	pop	{r7, pc}
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	40005c00 	.word	0x40005c00
 800a11c:	40021000 	.word	0x40021000

0800a120 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	2387      	movs	r3, #135	; 0x87
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	58d2      	ldr	r2, [r2, r3]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	33ed      	adds	r3, #237	; 0xed
 800a134:	33ff      	adds	r3, #255	; 0xff
 800a136:	0019      	movs	r1, r3
 800a138:	0010      	movs	r0, r2
 800a13a:	f7fb f9f1 	bl	8005520 <USBD_LL_SetupStage>
}
 800a13e:	46c0      	nop			; (mov r8, r8)
 800a140:	46bd      	mov	sp, r7
 800a142:	b002      	add	sp, #8
 800a144:	bd80      	pop	{r7, pc}

0800a146 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a146:	b590      	push	{r4, r7, lr}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	000a      	movs	r2, r1
 800a150:	1cfb      	adds	r3, r7, #3
 800a152:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	2387      	movs	r3, #135	; 0x87
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	58d4      	ldr	r4, [r2, r3]
 800a15c:	1cfb      	adds	r3, r7, #3
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	238c      	movs	r3, #140	; 0x8c
 800a164:	0059      	lsls	r1, r3, #1
 800a166:	0013      	movs	r3, r2
 800a168:	00db      	lsls	r3, r3, #3
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	18c3      	adds	r3, r0, r3
 800a170:	185b      	adds	r3, r3, r1
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	1cfb      	adds	r3, r7, #3
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	0019      	movs	r1, r3
 800a17a:	0020      	movs	r0, r4
 800a17c:	f7fb fa2c 	bl	80055d8 <USBD_LL_DataOutStage>
}
 800a180:	46c0      	nop			; (mov r8, r8)
 800a182:	46bd      	mov	sp, r7
 800a184:	b003      	add	sp, #12
 800a186:	bd90      	pop	{r4, r7, pc}

0800a188 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	000a      	movs	r2, r1
 800a192:	1cfb      	adds	r3, r7, #3
 800a194:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	2387      	movs	r3, #135	; 0x87
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	58d0      	ldr	r0, [r2, r3]
 800a19e:	1cfb      	adds	r3, r7, #3
 800a1a0:	781a      	ldrb	r2, [r3, #0]
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	0013      	movs	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	18cb      	adds	r3, r1, r3
 800a1ae:	3338      	adds	r3, #56	; 0x38
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	1cfb      	adds	r3, r7, #3
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	0019      	movs	r1, r3
 800a1b8:	f7fb fa78 	bl	80056ac <USBD_LL_DataInStage>
}
 800a1bc:	46c0      	nop			; (mov r8, r8)
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	b002      	add	sp, #8
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	2387      	movs	r3, #135	; 0x87
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	58d3      	ldr	r3, [r2, r3]
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f7fb fb77 	bl	80058c8 <USBD_LL_SOF>
}
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	b002      	add	sp, #8
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1ea:	230f      	movs	r3, #15
 800a1ec:	18fb      	adds	r3, r7, r3
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	701a      	strb	r2, [r3, #0]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d104      	bne.n	800a204 <HAL_PCD_ResetCallback+0x22>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800a1fa:	230f      	movs	r3, #15
 800a1fc:	18fb      	adds	r3, r7, r3
 800a1fe:	2201      	movs	r2, #1
 800a200:	701a      	strb	r2, [r3, #0]
    break;
 800a202:	e004      	b.n	800a20e <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800a204:	230f      	movs	r3, #15
 800a206:	18fb      	adds	r3, r7, r3
 800a208:	2201      	movs	r2, #1
 800a20a:	701a      	strb	r2, [r3, #0]
    break;    
 800a20c:	46c0      	nop			; (mov r8, r8)
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	2387      	movs	r3, #135	; 0x87
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	58d2      	ldr	r2, [r2, r3]
 800a216:	230f      	movs	r3, #15
 800a218:	18fb      	adds	r3, r7, r3
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	0019      	movs	r1, r3
 800a21e:	0010      	movs	r0, r2
 800a220:	f7fb fb1b 	bl	800585a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	2387      	movs	r3, #135	; 0x87
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	58d3      	ldr	r3, [r2, r3]
 800a22c:	0018      	movs	r0, r3
 800a22e:	f7fb fae1 	bl	80057f4 <USBD_LL_Reset>
}
 800a232:	46c0      	nop			; (mov r8, r8)
 800a234:	46bd      	mov	sp, r7
 800a236:	b004      	add	sp, #16
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	2387      	movs	r3, #135	; 0x87
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	58d3      	ldr	r3, [r2, r3]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f7fb fb14 	bl	800587a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <HAL_PCD_SuspendCallback+0x34>)
 800a25c:	4a04      	ldr	r2, [pc, #16]	; (800a270 <HAL_PCD_SuspendCallback+0x34>)
 800a25e:	6912      	ldr	r2, [r2, #16]
 800a260:	2106      	movs	r1, #6
 800a262:	430a      	orrs	r2, r1
 800a264:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	46bd      	mov	sp, r7
 800a26a:	b002      	add	sp, #8
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	e000ed00 	.word	0xe000ed00

0800a274 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d007      	beq.n	800a294 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a284:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <HAL_PCD_ResumeCallback+0x38>)
 800a286:	4a09      	ldr	r2, [pc, #36]	; (800a2ac <HAL_PCD_ResumeCallback+0x38>)
 800a288:	6912      	ldr	r2, [r2, #16]
 800a28a:	2106      	movs	r1, #6
 800a28c:	438a      	bics	r2, r1
 800a28e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a290:	f000 fb46 	bl	800a920 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	2387      	movs	r3, #135	; 0x87
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	58d3      	ldr	r3, [r2, r3]
 800a29c:	0018      	movs	r0, r3
 800a29e:	f7fb fb02 	bl	80058a6 <USBD_LL_Resume>
}
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	b002      	add	sp, #8
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	e000ed00 	.word	0xe000ed00

0800a2b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a2b8:	4a2e      	ldr	r2, [pc, #184]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2ba:	2387      	movs	r3, #135	; 0x87
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	2388      	movs	r3, #136	; 0x88
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	492a      	ldr	r1, [pc, #168]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2ca:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800a2cc:	4b29      	ldr	r3, [pc, #164]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2ce:	4a2a      	ldr	r2, [pc, #168]	; (800a378 <USBD_LL_Init+0xc8>)
 800a2d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a2d2:	4b28      	ldr	r3, [pc, #160]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a2d8:	4b26      	ldr	r3, [pc, #152]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2da:	2202      	movs	r2, #2
 800a2dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800a2de:	4b25      	ldr	r3, [pc, #148]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2e4:	4b23      	ldr	r3, [pc, #140]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2ea:	4b22      	ldr	r3, [pc, #136]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2f0:	4b20      	ldr	r3, [pc, #128]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2f6:	4b1f      	ldr	r3, [pc, #124]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2fc:	4b1d      	ldr	r3, [pc, #116]	; (800a374 <USBD_LL_Init+0xc4>)
 800a2fe:	0018      	movs	r0, r3
 800a300:	f7f7 fca6 	bl	8001c50 <HAL_PCD_Init>
 800a304:	1e03      	subs	r3, r0, #0
 800a306:	d001      	beq.n	800a30c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a308:	f7fe f95a 	bl	80085c0 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	2388      	movs	r3, #136	; 0x88
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	58d0      	ldr	r0, [r2, r3]
 800a314:	2318      	movs	r3, #24
 800a316:	2200      	movs	r2, #0
 800a318:	2100      	movs	r1, #0
 800a31a:	f7f9 fd49 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	2388      	movs	r3, #136	; 0x88
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	58d0      	ldr	r0, [r2, r3]
 800a326:	2358      	movs	r3, #88	; 0x58
 800a328:	2200      	movs	r2, #0
 800a32a:	2180      	movs	r1, #128	; 0x80
 800a32c:	f7f9 fd40 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	2388      	movs	r3, #136	; 0x88
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	58d0      	ldr	r0, [r2, r3]
 800a338:	23c0      	movs	r3, #192	; 0xc0
 800a33a:	2200      	movs	r2, #0
 800a33c:	2181      	movs	r1, #129	; 0x81
 800a33e:	f7f9 fd37 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	2388      	movs	r3, #136	; 0x88
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	58d0      	ldr	r0, [r2, r3]
 800a34a:	2388      	movs	r3, #136	; 0x88
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	2200      	movs	r2, #0
 800a350:	2101      	movs	r1, #1
 800a352:	f7f9 fd2d 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	2388      	movs	r3, #136	; 0x88
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	58d0      	ldr	r0, [r2, r3]
 800a35e:	2380      	movs	r3, #128	; 0x80
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	2200      	movs	r2, #0
 800a364:	2182      	movs	r1, #130	; 0x82
 800a366:	f7f9 fd23 	bl	8003db0 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	0018      	movs	r0, r3
 800a36e:	46bd      	mov	sp, r7
 800a370:	b002      	add	sp, #8
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20001d04 	.word	0x20001d04
 800a378:	40005c00 	.word	0x40005c00

0800a37c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a384:	230e      	movs	r3, #14
 800a386:	18fb      	adds	r3, r7, r3
 800a388:	2200      	movs	r2, #0
 800a38a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38c:	230f      	movs	r3, #15
 800a38e:	18fb      	adds	r3, r7, r3
 800a390:	2200      	movs	r2, #0
 800a392:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	2388      	movs	r3, #136	; 0x88
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	58d3      	ldr	r3, [r2, r3]
 800a39c:	220e      	movs	r2, #14
 800a39e:	18bc      	adds	r4, r7, r2
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f7f7 fd45 	bl	8001e30 <HAL_PCD_Start>
 800a3a6:	0003      	movs	r3, r0
 800a3a8:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800a3aa:	230e      	movs	r3, #14
 800a3ac:	18fb      	adds	r3, r7, r3
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d00d      	beq.n	800a3d0 <USBD_LL_Start+0x54>
 800a3b4:	dc02      	bgt.n	800a3bc <USBD_LL_Start+0x40>
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <USBD_LL_Start+0x4a>
 800a3ba:	e018      	b.n	800a3ee <USBD_LL_Start+0x72>
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d00c      	beq.n	800a3da <USBD_LL_Start+0x5e>
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d00f      	beq.n	800a3e4 <USBD_LL_Start+0x68>
 800a3c4:	e013      	b.n	800a3ee <USBD_LL_Start+0x72>
    case HAL_OK :
      usb_status = USBD_OK;
 800a3c6:	230f      	movs	r3, #15
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
    break;
 800a3ce:	e013      	b.n	800a3f8 <USBD_LL_Start+0x7c>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3d0:	230f      	movs	r3, #15
 800a3d2:	18fb      	adds	r3, r7, r3
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	701a      	strb	r2, [r3, #0]
    break;
 800a3d8:	e00e      	b.n	800a3f8 <USBD_LL_Start+0x7c>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3da:	230f      	movs	r3, #15
 800a3dc:	18fb      	adds	r3, r7, r3
 800a3de:	2201      	movs	r2, #1
 800a3e0:	701a      	strb	r2, [r3, #0]
    break;
 800a3e2:	e009      	b.n	800a3f8 <USBD_LL_Start+0x7c>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3e4:	230f      	movs	r3, #15
 800a3e6:	18fb      	adds	r3, r7, r3
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	701a      	strb	r2, [r3, #0]
    break;
 800a3ec:	e004      	b.n	800a3f8 <USBD_LL_Start+0x7c>
    default :
      usb_status = USBD_FAIL;
 800a3ee:	230f      	movs	r3, #15
 800a3f0:	18fb      	adds	r3, r7, r3
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	701a      	strb	r2, [r3, #0]
    break;
 800a3f6:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800a3f8:	230f      	movs	r3, #15
 800a3fa:	18fb      	adds	r3, r7, r3
 800a3fc:	781b      	ldrb	r3, [r3, #0]
}
 800a3fe:	0018      	movs	r0, r3
 800a400:	46bd      	mov	sp, r7
 800a402:	b005      	add	sp, #20
 800a404:	bd90      	pop	{r4, r7, pc}

0800a406 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a406:	b5b0      	push	{r4, r5, r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	000c      	movs	r4, r1
 800a410:	0010      	movs	r0, r2
 800a412:	0019      	movs	r1, r3
 800a414:	1cfb      	adds	r3, r7, #3
 800a416:	1c22      	adds	r2, r4, #0
 800a418:	701a      	strb	r2, [r3, #0]
 800a41a:	1cbb      	adds	r3, r7, #2
 800a41c:	1c02      	adds	r2, r0, #0
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	003b      	movs	r3, r7
 800a422:	1c0a      	adds	r2, r1, #0
 800a424:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a426:	230e      	movs	r3, #14
 800a428:	18fb      	adds	r3, r7, r3
 800a42a:	2200      	movs	r2, #0
 800a42c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42e:	230f      	movs	r3, #15
 800a430:	18fb      	adds	r3, r7, r3
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	2388      	movs	r3, #136	; 0x88
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	58d0      	ldr	r0, [r2, r3]
 800a43e:	230e      	movs	r3, #14
 800a440:	18fc      	adds	r4, r7, r3
 800a442:	1cbb      	adds	r3, r7, #2
 800a444:	781d      	ldrb	r5, [r3, #0]
 800a446:	003b      	movs	r3, r7
 800a448:	881a      	ldrh	r2, [r3, #0]
 800a44a:	1cfb      	adds	r3, r7, #3
 800a44c:	7819      	ldrb	r1, [r3, #0]
 800a44e:	002b      	movs	r3, r5
 800a450:	f7f7 fe5c 	bl	800210c <HAL_PCD_EP_Open>
 800a454:	0003      	movs	r3, r0
 800a456:	7023      	strb	r3, [r4, #0]

  switch (hal_status) {
 800a458:	230e      	movs	r3, #14
 800a45a:	18fb      	adds	r3, r7, r3
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d00d      	beq.n	800a47e <USBD_LL_OpenEP+0x78>
 800a462:	dc02      	bgt.n	800a46a <USBD_LL_OpenEP+0x64>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <USBD_LL_OpenEP+0x6e>
 800a468:	e018      	b.n	800a49c <USBD_LL_OpenEP+0x96>
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d00c      	beq.n	800a488 <USBD_LL_OpenEP+0x82>
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d00f      	beq.n	800a492 <USBD_LL_OpenEP+0x8c>
 800a472:	e013      	b.n	800a49c <USBD_LL_OpenEP+0x96>
    case HAL_OK :
      usb_status = USBD_OK;
 800a474:	230f      	movs	r3, #15
 800a476:	18fb      	adds	r3, r7, r3
 800a478:	2200      	movs	r2, #0
 800a47a:	701a      	strb	r2, [r3, #0]
    break;
 800a47c:	e013      	b.n	800a4a6 <USBD_LL_OpenEP+0xa0>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a47e:	230f      	movs	r3, #15
 800a480:	18fb      	adds	r3, r7, r3
 800a482:	2202      	movs	r2, #2
 800a484:	701a      	strb	r2, [r3, #0]
    break;
 800a486:	e00e      	b.n	800a4a6 <USBD_LL_OpenEP+0xa0>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a488:	230f      	movs	r3, #15
 800a48a:	18fb      	adds	r3, r7, r3
 800a48c:	2201      	movs	r2, #1
 800a48e:	701a      	strb	r2, [r3, #0]
    break;
 800a490:	e009      	b.n	800a4a6 <USBD_LL_OpenEP+0xa0>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a492:	230f      	movs	r3, #15
 800a494:	18fb      	adds	r3, r7, r3
 800a496:	2202      	movs	r2, #2
 800a498:	701a      	strb	r2, [r3, #0]
    break;
 800a49a:	e004      	b.n	800a4a6 <USBD_LL_OpenEP+0xa0>
    default :
      usb_status = USBD_FAIL;
 800a49c:	230f      	movs	r3, #15
 800a49e:	18fb      	adds	r3, r7, r3
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	701a      	strb	r2, [r3, #0]
    break;
 800a4a4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800a4a6:	230f      	movs	r3, #15
 800a4a8:	18fb      	adds	r3, r7, r3
 800a4aa:	781b      	ldrb	r3, [r3, #0]
}
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	b004      	add	sp, #16
 800a4b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a4b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4b4:	b590      	push	{r4, r7, lr}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	000a      	movs	r2, r1
 800a4be:	1cfb      	adds	r3, r7, #3
 800a4c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c2:	230e      	movs	r3, #14
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ca:	230f      	movs	r3, #15
 800a4cc:	18fb      	adds	r3, r7, r3
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	2388      	movs	r3, #136	; 0x88
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	58d2      	ldr	r2, [r2, r3]
 800a4da:	230e      	movs	r3, #14
 800a4dc:	18fc      	adds	r4, r7, r3
 800a4de:	1cfb      	adds	r3, r7, #3
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	0019      	movs	r1, r3
 800a4e4:	0010      	movs	r0, r2
 800a4e6:	f7f8 f98b 	bl	8002800 <HAL_PCD_EP_Close>
 800a4ea:	0003      	movs	r3, r0
 800a4ec:	7023      	strb	r3, [r4, #0]
      
  switch (hal_status) {
 800a4ee:	230e      	movs	r3, #14
 800a4f0:	18fb      	adds	r3, r7, r3
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d00d      	beq.n	800a514 <USBD_LL_CloseEP+0x60>
 800a4f8:	dc02      	bgt.n	800a500 <USBD_LL_CloseEP+0x4c>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <USBD_LL_CloseEP+0x56>
 800a4fe:	e018      	b.n	800a532 <USBD_LL_CloseEP+0x7e>
 800a500:	2b02      	cmp	r3, #2
 800a502:	d00c      	beq.n	800a51e <USBD_LL_CloseEP+0x6a>
 800a504:	2b03      	cmp	r3, #3
 800a506:	d00f      	beq.n	800a528 <USBD_LL_CloseEP+0x74>
 800a508:	e013      	b.n	800a532 <USBD_LL_CloseEP+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800a50a:	230f      	movs	r3, #15
 800a50c:	18fb      	adds	r3, r7, r3
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
    break;
 800a512:	e013      	b.n	800a53c <USBD_LL_CloseEP+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a514:	230f      	movs	r3, #15
 800a516:	18fb      	adds	r3, r7, r3
 800a518:	2202      	movs	r2, #2
 800a51a:	701a      	strb	r2, [r3, #0]
    break;
 800a51c:	e00e      	b.n	800a53c <USBD_LL_CloseEP+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a51e:	230f      	movs	r3, #15
 800a520:	18fb      	adds	r3, r7, r3
 800a522:	2201      	movs	r2, #1
 800a524:	701a      	strb	r2, [r3, #0]
    break;
 800a526:	e009      	b.n	800a53c <USBD_LL_CloseEP+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a528:	230f      	movs	r3, #15
 800a52a:	18fb      	adds	r3, r7, r3
 800a52c:	2202      	movs	r2, #2
 800a52e:	701a      	strb	r2, [r3, #0]
    break;
 800a530:	e004      	b.n	800a53c <USBD_LL_CloseEP+0x88>
    default :
      usb_status = USBD_FAIL;
 800a532:	230f      	movs	r3, #15
 800a534:	18fb      	adds	r3, r7, r3
 800a536:	2202      	movs	r2, #2
 800a538:	701a      	strb	r2, [r3, #0]
    break;
 800a53a:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;  
 800a53c:	230f      	movs	r3, #15
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	781b      	ldrb	r3, [r3, #0]
}
 800a542:	0018      	movs	r0, r3
 800a544:	46bd      	mov	sp, r7
 800a546:	b005      	add	sp, #20
 800a548:	bd90      	pop	{r4, r7, pc}

0800a54a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a54a:	b590      	push	{r4, r7, lr}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	000a      	movs	r2, r1
 800a554:	1cfb      	adds	r3, r7, #3
 800a556:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a558:	230e      	movs	r3, #14
 800a55a:	18fb      	adds	r3, r7, r3
 800a55c:	2200      	movs	r2, #0
 800a55e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a560:	230f      	movs	r3, #15
 800a562:	18fb      	adds	r3, r7, r3
 800a564:	2200      	movs	r2, #0
 800a566:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	2388      	movs	r3, #136	; 0x88
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	58d2      	ldr	r2, [r2, r3]
 800a570:	230e      	movs	r3, #14
 800a572:	18fc      	adds	r4, r7, r3
 800a574:	1cfb      	adds	r3, r7, #3
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	0019      	movs	r1, r3
 800a57a:	0010      	movs	r0, r2
 800a57c:	f7f8 fe82 	bl	8003284 <HAL_PCD_EP_SetStall>
 800a580:	0003      	movs	r3, r0
 800a582:	7023      	strb	r3, [r4, #0]

  switch (hal_status) {
 800a584:	230e      	movs	r3, #14
 800a586:	18fb      	adds	r3, r7, r3
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d00d      	beq.n	800a5aa <USBD_LL_StallEP+0x60>
 800a58e:	dc02      	bgt.n	800a596 <USBD_LL_StallEP+0x4c>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <USBD_LL_StallEP+0x56>
 800a594:	e018      	b.n	800a5c8 <USBD_LL_StallEP+0x7e>
 800a596:	2b02      	cmp	r3, #2
 800a598:	d00c      	beq.n	800a5b4 <USBD_LL_StallEP+0x6a>
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d00f      	beq.n	800a5be <USBD_LL_StallEP+0x74>
 800a59e:	e013      	b.n	800a5c8 <USBD_LL_StallEP+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800a5a0:	230f      	movs	r3, #15
 800a5a2:	18fb      	adds	r3, r7, r3
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
    break;
 800a5a8:	e013      	b.n	800a5d2 <USBD_LL_StallEP+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5aa:	230f      	movs	r3, #15
 800a5ac:	18fb      	adds	r3, r7, r3
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	701a      	strb	r2, [r3, #0]
    break;
 800a5b2:	e00e      	b.n	800a5d2 <USBD_LL_StallEP+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5b4:	230f      	movs	r3, #15
 800a5b6:	18fb      	adds	r3, r7, r3
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	701a      	strb	r2, [r3, #0]
    break;
 800a5bc:	e009      	b.n	800a5d2 <USBD_LL_StallEP+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5be:	230f      	movs	r3, #15
 800a5c0:	18fb      	adds	r3, r7, r3
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	701a      	strb	r2, [r3, #0]
    break;
 800a5c6:	e004      	b.n	800a5d2 <USBD_LL_StallEP+0x88>
    default :
      usb_status = USBD_FAIL;
 800a5c8:	230f      	movs	r3, #15
 800a5ca:	18fb      	adds	r3, r7, r3
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	701a      	strb	r2, [r3, #0]
    break;
 800a5d0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;  
 800a5d2:	230f      	movs	r3, #15
 800a5d4:	18fb      	adds	r3, r7, r3
 800a5d6:	781b      	ldrb	r3, [r3, #0]
}
 800a5d8:	0018      	movs	r0, r3
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	b005      	add	sp, #20
 800a5de:	bd90      	pop	{r4, r7, pc}

0800a5e0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	000a      	movs	r2, r1
 800a5ea:	1cfb      	adds	r3, r7, #3
 800a5ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ee:	230e      	movs	r3, #14
 800a5f0:	18fb      	adds	r3, r7, r3
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f6:	230f      	movs	r3, #15
 800a5f8:	18fb      	adds	r3, r7, r3
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	2388      	movs	r3, #136	; 0x88
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	58d2      	ldr	r2, [r2, r3]
 800a606:	230e      	movs	r3, #14
 800a608:	18fc      	adds	r4, r7, r3
 800a60a:	1cfb      	adds	r3, r7, #3
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	0019      	movs	r1, r3
 800a610:	0010      	movs	r0, r2
 800a612:	f7f8 fee9 	bl	80033e8 <HAL_PCD_EP_ClrStall>
 800a616:	0003      	movs	r3, r0
 800a618:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800a61a:	230e      	movs	r3, #14
 800a61c:	18fb      	adds	r3, r7, r3
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d00d      	beq.n	800a640 <USBD_LL_ClearStallEP+0x60>
 800a624:	dc02      	bgt.n	800a62c <USBD_LL_ClearStallEP+0x4c>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d005      	beq.n	800a636 <USBD_LL_ClearStallEP+0x56>
 800a62a:	e018      	b.n	800a65e <USBD_LL_ClearStallEP+0x7e>
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d00c      	beq.n	800a64a <USBD_LL_ClearStallEP+0x6a>
 800a630:	2b03      	cmp	r3, #3
 800a632:	d00f      	beq.n	800a654 <USBD_LL_ClearStallEP+0x74>
 800a634:	e013      	b.n	800a65e <USBD_LL_ClearStallEP+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800a636:	230f      	movs	r3, #15
 800a638:	18fb      	adds	r3, r7, r3
 800a63a:	2200      	movs	r2, #0
 800a63c:	701a      	strb	r2, [r3, #0]
    break;
 800a63e:	e013      	b.n	800a668 <USBD_LL_ClearStallEP+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a640:	230f      	movs	r3, #15
 800a642:	18fb      	adds	r3, r7, r3
 800a644:	2202      	movs	r2, #2
 800a646:	701a      	strb	r2, [r3, #0]
    break;
 800a648:	e00e      	b.n	800a668 <USBD_LL_ClearStallEP+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a64a:	230f      	movs	r3, #15
 800a64c:	18fb      	adds	r3, r7, r3
 800a64e:	2201      	movs	r2, #1
 800a650:	701a      	strb	r2, [r3, #0]
    break;
 800a652:	e009      	b.n	800a668 <USBD_LL_ClearStallEP+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a654:	230f      	movs	r3, #15
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	2202      	movs	r2, #2
 800a65a:	701a      	strb	r2, [r3, #0]
    break;
 800a65c:	e004      	b.n	800a668 <USBD_LL_ClearStallEP+0x88>
    default :
      usb_status = USBD_FAIL;
 800a65e:	230f      	movs	r3, #15
 800a660:	18fb      	adds	r3, r7, r3
 800a662:	2202      	movs	r2, #2
 800a664:	701a      	strb	r2, [r3, #0]
    break;
 800a666:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status; 
 800a668:	230f      	movs	r3, #15
 800a66a:	18fb      	adds	r3, r7, r3
 800a66c:	781b      	ldrb	r3, [r3, #0]
}
 800a66e:	0018      	movs	r0, r3
 800a670:	46bd      	mov	sp, r7
 800a672:	b005      	add	sp, #20
 800a674:	bd90      	pop	{r4, r7, pc}

0800a676 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	000a      	movs	r2, r1
 800a680:	1cfb      	adds	r3, r7, #3
 800a682:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	2388      	movs	r3, #136	; 0x88
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	58d3      	ldr	r3, [r2, r3]
 800a68c:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a68e:	1cfb      	adds	r3, r7, #3
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	b25b      	sxtb	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	da0d      	bge.n	800a6b4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a698:	1cfb      	adds	r3, r7, #3
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	227f      	movs	r2, #127	; 0x7f
 800a69e:	401a      	ands	r2, r3
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	202a      	movs	r0, #42	; 0x2a
 800a6a4:	0013      	movs	r3, r2
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	1a9b      	subs	r3, r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	18cb      	adds	r3, r1, r3
 800a6ae:	181b      	adds	r3, r3, r0
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	e00d      	b.n	800a6d0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a6b4:	1cfb      	adds	r3, r7, #3
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	227f      	movs	r2, #127	; 0x7f
 800a6ba:	401a      	ands	r2, r3
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	2385      	movs	r3, #133	; 0x85
 800a6c0:	0059      	lsls	r1, r3, #1
 800a6c2:	0013      	movs	r3, r2
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	1a9b      	subs	r3, r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	18c3      	adds	r3, r0, r3
 800a6cc:	185b      	adds	r3, r3, r1
 800a6ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	b004      	add	sp, #16
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6d8:	b590      	push	{r4, r7, lr}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	000a      	movs	r2, r1
 800a6e2:	1cfb      	adds	r3, r7, #3
 800a6e4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e6:	230e      	movs	r3, #14
 800a6e8:	18fb      	adds	r3, r7, r3
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ee:	230f      	movs	r3, #15
 800a6f0:	18fb      	adds	r3, r7, r3
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	2388      	movs	r3, #136	; 0x88
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	58d2      	ldr	r2, [r2, r3]
 800a6fe:	230e      	movs	r3, #14
 800a700:	18fc      	adds	r4, r7, r3
 800a702:	1cfb      	adds	r3, r7, #3
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	0019      	movs	r1, r3
 800a708:	0010      	movs	r0, r2
 800a70a:	f7f7 fcd1 	bl	80020b0 <HAL_PCD_SetAddress>
 800a70e:	0003      	movs	r3, r0
 800a710:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800a712:	230e      	movs	r3, #14
 800a714:	18fb      	adds	r3, r7, r3
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d00d      	beq.n	800a738 <USBD_LL_SetUSBAddress+0x60>
 800a71c:	dc02      	bgt.n	800a724 <USBD_LL_SetUSBAddress+0x4c>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d005      	beq.n	800a72e <USBD_LL_SetUSBAddress+0x56>
 800a722:	e018      	b.n	800a756 <USBD_LL_SetUSBAddress+0x7e>
 800a724:	2b02      	cmp	r3, #2
 800a726:	d00c      	beq.n	800a742 <USBD_LL_SetUSBAddress+0x6a>
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d00f      	beq.n	800a74c <USBD_LL_SetUSBAddress+0x74>
 800a72c:	e013      	b.n	800a756 <USBD_LL_SetUSBAddress+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800a72e:	230f      	movs	r3, #15
 800a730:	18fb      	adds	r3, r7, r3
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
    break;
 800a736:	e013      	b.n	800a760 <USBD_LL_SetUSBAddress+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a738:	230f      	movs	r3, #15
 800a73a:	18fb      	adds	r3, r7, r3
 800a73c:	2202      	movs	r2, #2
 800a73e:	701a      	strb	r2, [r3, #0]
    break;
 800a740:	e00e      	b.n	800a760 <USBD_LL_SetUSBAddress+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a742:	230f      	movs	r3, #15
 800a744:	18fb      	adds	r3, r7, r3
 800a746:	2201      	movs	r2, #1
 800a748:	701a      	strb	r2, [r3, #0]
    break;
 800a74a:	e009      	b.n	800a760 <USBD_LL_SetUSBAddress+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a74c:	230f      	movs	r3, #15
 800a74e:	18fb      	adds	r3, r7, r3
 800a750:	2202      	movs	r2, #2
 800a752:	701a      	strb	r2, [r3, #0]
    break;
 800a754:	e004      	b.n	800a760 <USBD_LL_SetUSBAddress+0x88>
    default :
      usb_status = USBD_FAIL;
 800a756:	230f      	movs	r3, #15
 800a758:	18fb      	adds	r3, r7, r3
 800a75a:	2202      	movs	r2, #2
 800a75c:	701a      	strb	r2, [r3, #0]
    break;
 800a75e:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;  
 800a760:	230f      	movs	r3, #15
 800a762:	18fb      	adds	r3, r7, r3
 800a764:	781b      	ldrb	r3, [r3, #0]
}
 800a766:	0018      	movs	r0, r3
 800a768:	46bd      	mov	sp, r7
 800a76a:	b005      	add	sp, #20
 800a76c:	bd90      	pop	{r4, r7, pc}

0800a76e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a76e:	b5b0      	push	{r4, r5, r7, lr}
 800a770:	b086      	sub	sp, #24
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	0008      	movs	r0, r1
 800a778:	607a      	str	r2, [r7, #4]
 800a77a:	0019      	movs	r1, r3
 800a77c:	230b      	movs	r3, #11
 800a77e:	18fb      	adds	r3, r7, r3
 800a780:	1c02      	adds	r2, r0, #0
 800a782:	701a      	strb	r2, [r3, #0]
 800a784:	2308      	movs	r3, #8
 800a786:	18fb      	adds	r3, r7, r3
 800a788:	1c0a      	adds	r2, r1, #0
 800a78a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a78c:	2316      	movs	r3, #22
 800a78e:	18fb      	adds	r3, r7, r3
 800a790:	2200      	movs	r2, #0
 800a792:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a794:	2317      	movs	r3, #23
 800a796:	18fb      	adds	r3, r7, r3
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	2388      	movs	r3, #136	; 0x88
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	58d0      	ldr	r0, [r2, r3]
 800a7a4:	2308      	movs	r3, #8
 800a7a6:	18fb      	adds	r3, r7, r3
 800a7a8:	881d      	ldrh	r5, [r3, #0]
 800a7aa:	2316      	movs	r3, #22
 800a7ac:	18fc      	adds	r4, r7, r3
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	230b      	movs	r3, #11
 800a7b2:	18fb      	adds	r3, r7, r3
 800a7b4:	7819      	ldrb	r1, [r3, #0]
 800a7b6:	002b      	movs	r3, r5
 800a7b8:	f7f8 fbaa 	bl	8002f10 <HAL_PCD_EP_Transmit>
 800a7bc:	0003      	movs	r3, r0
 800a7be:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800a7c0:	2316      	movs	r3, #22
 800a7c2:	18fb      	adds	r3, r7, r3
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d00d      	beq.n	800a7e6 <USBD_LL_Transmit+0x78>
 800a7ca:	dc02      	bgt.n	800a7d2 <USBD_LL_Transmit+0x64>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <USBD_LL_Transmit+0x6e>
 800a7d0:	e018      	b.n	800a804 <USBD_LL_Transmit+0x96>
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d00c      	beq.n	800a7f0 <USBD_LL_Transmit+0x82>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d00f      	beq.n	800a7fa <USBD_LL_Transmit+0x8c>
 800a7da:	e013      	b.n	800a804 <USBD_LL_Transmit+0x96>
    case HAL_OK :
      usb_status = USBD_OK;
 800a7dc:	2317      	movs	r3, #23
 800a7de:	18fb      	adds	r3, r7, r3
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
    break;
 800a7e4:	e013      	b.n	800a80e <USBD_LL_Transmit+0xa0>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7e6:	2317      	movs	r3, #23
 800a7e8:	18fb      	adds	r3, r7, r3
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	701a      	strb	r2, [r3, #0]
    break;
 800a7ee:	e00e      	b.n	800a80e <USBD_LL_Transmit+0xa0>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7f0:	2317      	movs	r3, #23
 800a7f2:	18fb      	adds	r3, r7, r3
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]
    break;
 800a7f8:	e009      	b.n	800a80e <USBD_LL_Transmit+0xa0>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7fa:	2317      	movs	r3, #23
 800a7fc:	18fb      	adds	r3, r7, r3
 800a7fe:	2202      	movs	r2, #2
 800a800:	701a      	strb	r2, [r3, #0]
    break;
 800a802:	e004      	b.n	800a80e <USBD_LL_Transmit+0xa0>
    default :
      usb_status = USBD_FAIL;
 800a804:	2317      	movs	r3, #23
 800a806:	18fb      	adds	r3, r7, r3
 800a808:	2202      	movs	r2, #2
 800a80a:	701a      	strb	r2, [r3, #0]
    break;
 800a80c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;    
 800a80e:	2317      	movs	r3, #23
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	781b      	ldrb	r3, [r3, #0]
}
 800a814:	0018      	movs	r0, r3
 800a816:	46bd      	mov	sp, r7
 800a818:	b006      	add	sp, #24
 800a81a:	bdb0      	pop	{r4, r5, r7, pc}

0800a81c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a81c:	b5b0      	push	{r4, r5, r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	0008      	movs	r0, r1
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	0019      	movs	r1, r3
 800a82a:	230b      	movs	r3, #11
 800a82c:	18fb      	adds	r3, r7, r3
 800a82e:	1c02      	adds	r2, r0, #0
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	2308      	movs	r3, #8
 800a834:	18fb      	adds	r3, r7, r3
 800a836:	1c0a      	adds	r2, r1, #0
 800a838:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a83a:	2316      	movs	r3, #22
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a842:	2317      	movs	r3, #23
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	2200      	movs	r2, #0
 800a848:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	2388      	movs	r3, #136	; 0x88
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	58d0      	ldr	r0, [r2, r3]
 800a852:	2308      	movs	r3, #8
 800a854:	18fb      	adds	r3, r7, r3
 800a856:	881d      	ldrh	r5, [r3, #0]
 800a858:	2316      	movs	r3, #22
 800a85a:	18fc      	adds	r4, r7, r3
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	230b      	movs	r3, #11
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	7819      	ldrb	r1, [r3, #0]
 800a864:	002b      	movs	r3, r5
 800a866:	f7f8 f9b5 	bl	8002bd4 <HAL_PCD_EP_Receive>
 800a86a:	0003      	movs	r3, r0
 800a86c:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800a86e:	2316      	movs	r3, #22
 800a870:	18fb      	adds	r3, r7, r3
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d00d      	beq.n	800a894 <USBD_LL_PrepareReceive+0x78>
 800a878:	dc02      	bgt.n	800a880 <USBD_LL_PrepareReceive+0x64>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d005      	beq.n	800a88a <USBD_LL_PrepareReceive+0x6e>
 800a87e:	e018      	b.n	800a8b2 <USBD_LL_PrepareReceive+0x96>
 800a880:	2b02      	cmp	r3, #2
 800a882:	d00c      	beq.n	800a89e <USBD_LL_PrepareReceive+0x82>
 800a884:	2b03      	cmp	r3, #3
 800a886:	d00f      	beq.n	800a8a8 <USBD_LL_PrepareReceive+0x8c>
 800a888:	e013      	b.n	800a8b2 <USBD_LL_PrepareReceive+0x96>
    case HAL_OK :
      usb_status = USBD_OK;
 800a88a:	2317      	movs	r3, #23
 800a88c:	18fb      	adds	r3, r7, r3
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
    break;
 800a892:	e013      	b.n	800a8bc <USBD_LL_PrepareReceive+0xa0>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a894:	2317      	movs	r3, #23
 800a896:	18fb      	adds	r3, r7, r3
 800a898:	2202      	movs	r2, #2
 800a89a:	701a      	strb	r2, [r3, #0]
    break;
 800a89c:	e00e      	b.n	800a8bc <USBD_LL_PrepareReceive+0xa0>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a89e:	2317      	movs	r3, #23
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	701a      	strb	r2, [r3, #0]
    break;
 800a8a6:	e009      	b.n	800a8bc <USBD_LL_PrepareReceive+0xa0>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8a8:	2317      	movs	r3, #23
 800a8aa:	18fb      	adds	r3, r7, r3
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	701a      	strb	r2, [r3, #0]
    break;
 800a8b0:	e004      	b.n	800a8bc <USBD_LL_PrepareReceive+0xa0>
    default :
      usb_status = USBD_FAIL;
 800a8b2:	2317      	movs	r3, #23
 800a8b4:	18fb      	adds	r3, r7, r3
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	701a      	strb	r2, [r3, #0]
    break;
 800a8ba:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status; 
 800a8bc:	2317      	movs	r3, #23
 800a8be:	18fb      	adds	r3, r7, r3
 800a8c0:	781b      	ldrb	r3, [r3, #0]
}
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	b006      	add	sp, #24
 800a8c8:	bdb0      	pop	{r4, r5, r7, pc}

0800a8ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	000a      	movs	r2, r1
 800a8d4:	1cfb      	adds	r3, r7, #3
 800a8d6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	2388      	movs	r3, #136	; 0x88
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	58d2      	ldr	r2, [r2, r3]
 800a8e0:	1cfb      	adds	r3, r7, #3
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	0019      	movs	r1, r3
 800a8e6:	0010      	movs	r0, r2
 800a8e8:	f7f8 faf8 	bl	8002edc <HAL_PCD_EP_GetRxCount>
 800a8ec:	0003      	movs	r3, r0
}
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	b002      	add	sp, #8
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a900:	4b02      	ldr	r3, [pc, #8]	; (800a90c <USBD_static_malloc+0x14>)
}
 800a902:	0018      	movs	r0, r3
 800a904:	46bd      	mov	sp, r7
 800a906:	b002      	add	sp, #8
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	46c0      	nop			; (mov r8, r8)
 800a90c:	200010ac 	.word	0x200010ac

0800a910 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]

}
 800a918:	46c0      	nop			; (mov r8, r8)
 800a91a:	46bd      	mov	sp, r7
 800a91c:	b002      	add	sp, #8
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  // SystemClock_Config();  //!H! removed, should be put back
}
 800a924:	46c0      	nop			; (mov r8, r8)
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	0002      	movs	r2, r0
 800a934:	6039      	str	r1, [r7, #0]
 800a936:	1dfb      	adds	r3, r7, #7
 800a938:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_FS_DeviceDesc);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2212      	movs	r2, #18
 800a93e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a940:	4b02      	ldr	r3, [pc, #8]	; (800a94c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a942:	0018      	movs	r0, r3
 800a944:	46bd      	mov	sp, r7
 800a946:	b002      	add	sp, #8
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	2000027c 	.word	0x2000027c

0800a950 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	0002      	movs	r2, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	1dfb      	adds	r3, r7, #7
 800a95c:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_LangIDDesc);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2204      	movs	r2, #4
 800a962:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a964:	4b02      	ldr	r3, [pc, #8]	; (800a970 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a966:	0018      	movs	r0, r3
 800a968:	46bd      	mov	sp, r7
 800a96a:	b002      	add	sp, #8
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	46c0      	nop			; (mov r8, r8)
 800a970:	20000290 	.word	0x20000290

0800a974 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	0002      	movs	r2, r0
 800a97c:	6039      	str	r1, [r7, #0]
 800a97e:	1dfb      	adds	r3, r7, #7
 800a980:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a982:	1dfb      	adds	r3, r7, #7
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d106      	bne.n	800a998 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	4908      	ldr	r1, [pc, #32]	; (800a9b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a98e:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <USBD_FS_ProductStrDescriptor+0x40>)
 800a990:	0018      	movs	r0, r3
 800a992:	f7fb fc5a 	bl	800624a <USBD_GetString>
 800a996:	e005      	b.n	800a9a4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	4905      	ldr	r1, [pc, #20]	; (800a9b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a99c:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <USBD_FS_ProductStrDescriptor+0x40>)
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f7fb fc53 	bl	800624a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9a4:	4b02      	ldr	r3, [pc, #8]	; (800a9b0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	46c0      	nop			; (mov r8, r8)
 800a9b0:	20001f24 	.word	0x20001f24
 800a9b4:	0800ae50 	.word	0x0800ae50

0800a9b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	0002      	movs	r2, r0
 800a9c0:	6039      	str	r1, [r7, #0]
 800a9c2:	1dfb      	adds	r3, r7, #7
 800a9c4:	701a      	strb	r2, [r3, #0]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	4904      	ldr	r1, [pc, #16]	; (800a9dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a9ca:	4b05      	ldr	r3, [pc, #20]	; (800a9e0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f7fb fc3c 	bl	800624a <USBD_GetString>
  return USBD_StrDesc;
 800a9d2:	4b02      	ldr	r3, [pc, #8]	; (800a9dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	b002      	add	sp, #8
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	20001f24 	.word	0x20001f24
 800a9e0:	0800ae68 	.word	0x0800ae68

0800a9e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	0002      	movs	r2, r0
 800a9ec:	6039      	str	r1, [r7, #0]
 800a9ee:	1dfb      	adds	r3, r7, #7
 800a9f0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a9f2:	1dfb      	adds	r3, r7, #7
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d106      	bne.n	800aa08 <USBD_FS_SerialStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	4908      	ldr	r1, [pc, #32]	; (800aa20 <USBD_FS_SerialStrDescriptor+0x3c>)
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <USBD_FS_SerialStrDescriptor+0x40>)
 800aa00:	0018      	movs	r0, r3
 800aa02:	f7fb fc22 	bl	800624a <USBD_GetString>
 800aa06:	e005      	b.n	800aa14 <USBD_FS_SerialStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	4905      	ldr	r1, [pc, #20]	; (800aa20 <USBD_FS_SerialStrDescriptor+0x3c>)
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <USBD_FS_SerialStrDescriptor+0x40>)
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f7fb fc1b 	bl	800624a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <USBD_FS_SerialStrDescriptor+0x3c>)
}
 800aa16:	0018      	movs	r0, r3
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	b002      	add	sp, #8
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	46c0      	nop			; (mov r8, r8)
 800aa20:	20001f24 	.word	0x20001f24
 800aa24:	0800ae7c 	.word	0x0800ae7c

0800aa28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	0002      	movs	r2, r0
 800aa30:	6039      	str	r1, [r7, #0]
 800aa32:	1dfb      	adds	r3, r7, #7
 800aa34:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800aa36:	1dfb      	adds	r3, r7, #7
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d106      	bne.n	800aa4c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	4908      	ldr	r1, [pc, #32]	; (800aa64 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <USBD_FS_ConfigStrDescriptor+0x40>)
 800aa44:	0018      	movs	r0, r3
 800aa46:	f7fb fc00 	bl	800624a <USBD_GetString>
 800aa4a:	e005      	b.n	800aa58 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	4905      	ldr	r1, [pc, #20]	; (800aa64 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800aa50:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <USBD_FS_ConfigStrDescriptor+0x40>)
 800aa52:	0018      	movs	r0, r3
 800aa54:	f7fb fbf9 	bl	800624a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa58:	4b02      	ldr	r3, [pc, #8]	; (800aa64 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	b002      	add	sp, #8
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	46c0      	nop			; (mov r8, r8)
 800aa64:	20001f24 	.word	0x20001f24
 800aa68:	0800ae8c 	.word	0x0800ae8c

0800aa6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	0002      	movs	r2, r0
 800aa74:	6039      	str	r1, [r7, #0]
 800aa76:	1dfb      	adds	r3, r7, #7
 800aa78:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800aa7a:	1dfb      	adds	r3, r7, #7
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	4908      	ldr	r1, [pc, #32]	; (800aaa8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <USBD_FS_InterfaceStrDescriptor+0x40>)
 800aa88:	0018      	movs	r0, r3
 800aa8a:	f7fb fbde 	bl	800624a <USBD_GetString>
 800aa8e:	e005      	b.n	800aa9c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	4905      	ldr	r1, [pc, #20]	; (800aaa8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <USBD_FS_InterfaceStrDescriptor+0x40>)
 800aa96:	0018      	movs	r0, r3
 800aa98:	f7fb fbd7 	bl	800624a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	b002      	add	sp, #8
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	20001f24 	.word	0x20001f24
 800aaac:	0800ae98 	.word	0x0800ae98

0800aab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800aab0:	480d      	ldr	r0, [pc, #52]	; (800aae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800aab2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aab4:	480d      	ldr	r0, [pc, #52]	; (800aaec <LoopForever+0x6>)
  ldr r1, =_edata
 800aab6:	490e      	ldr	r1, [pc, #56]	; (800aaf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800aab8:	4a0e      	ldr	r2, [pc, #56]	; (800aaf4 <LoopForever+0xe>)
  movs r3, #0
 800aaba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aabc:	e002      	b.n	800aac4 <LoopCopyDataInit>

0800aabe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aabe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aac2:	3304      	adds	r3, #4

0800aac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aac8:	d3f9      	bcc.n	800aabe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aaca:	4a0b      	ldr	r2, [pc, #44]	; (800aaf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800aacc:	4c0b      	ldr	r4, [pc, #44]	; (800aafc <LoopForever+0x16>)
  movs r3, #0
 800aace:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aad0:	e001      	b.n	800aad6 <LoopFillZerobss>

0800aad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aad4:	3204      	adds	r2, #4

0800aad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aad8:	d3fb      	bcc.n	800aad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800aada:	f7ff f9e1 	bl	8009ea0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800aade:	f000 f811 	bl	800ab04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800aae2:	f7fd fba5 	bl	8008230 <main>

0800aae6 <LoopForever>:

LoopForever:
    b LoopForever
 800aae6:	e7fe      	b.n	800aae6 <LoopForever>
  ldr   r0, =_estack
 800aae8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800aaec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aaf0:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 800aaf4:	0800b21c 	.word	0x0800b21c
  ldr r2, =_sbss
 800aaf8:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 800aafc:	20002128 	.word	0x20002128

0800ab00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ab00:	e7fe      	b.n	800ab00 <ADC1_COMP_IRQHandler>
	...

0800ab04 <__libc_init_array>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	2600      	movs	r6, #0
 800ab08:	4d0c      	ldr	r5, [pc, #48]	; (800ab3c <__libc_init_array+0x38>)
 800ab0a:	4c0d      	ldr	r4, [pc, #52]	; (800ab40 <__libc_init_array+0x3c>)
 800ab0c:	1b64      	subs	r4, r4, r5
 800ab0e:	10a4      	asrs	r4, r4, #2
 800ab10:	42a6      	cmp	r6, r4
 800ab12:	d109      	bne.n	800ab28 <__libc_init_array+0x24>
 800ab14:	2600      	movs	r6, #0
 800ab16:	f000 f88d 	bl	800ac34 <_init>
 800ab1a:	4d0a      	ldr	r5, [pc, #40]	; (800ab44 <__libc_init_array+0x40>)
 800ab1c:	4c0a      	ldr	r4, [pc, #40]	; (800ab48 <__libc_init_array+0x44>)
 800ab1e:	1b64      	subs	r4, r4, r5
 800ab20:	10a4      	asrs	r4, r4, #2
 800ab22:	42a6      	cmp	r6, r4
 800ab24:	d105      	bne.n	800ab32 <__libc_init_array+0x2e>
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	00b3      	lsls	r3, r6, #2
 800ab2a:	58eb      	ldr	r3, [r5, r3]
 800ab2c:	4798      	blx	r3
 800ab2e:	3601      	adds	r6, #1
 800ab30:	e7ee      	b.n	800ab10 <__libc_init_array+0xc>
 800ab32:	00b3      	lsls	r3, r6, #2
 800ab34:	58eb      	ldr	r3, [r5, r3]
 800ab36:	4798      	blx	r3
 800ab38:	3601      	adds	r6, #1
 800ab3a:	e7f2      	b.n	800ab22 <__libc_init_array+0x1e>
 800ab3c:	0800b214 	.word	0x0800b214
 800ab40:	0800b214 	.word	0x0800b214
 800ab44:	0800b214 	.word	0x0800b214
 800ab48:	0800b218 	.word	0x0800b218

0800ab4c <memcpy>:
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	b510      	push	{r4, lr}
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d100      	bne.n	800ab56 <memcpy+0xa>
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	5ccc      	ldrb	r4, [r1, r3]
 800ab58:	54c4      	strb	r4, [r0, r3]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	e7f8      	b.n	800ab50 <memcpy+0x4>

0800ab5e <memset>:
 800ab5e:	0003      	movs	r3, r0
 800ab60:	1882      	adds	r2, r0, r2
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d100      	bne.n	800ab68 <memset+0xa>
 800ab66:	4770      	bx	lr
 800ab68:	7019      	strb	r1, [r3, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	e7f9      	b.n	800ab62 <memset+0x4>

0800ab6e <abort>:
 800ab6e:	b510      	push	{r4, lr}
 800ab70:	2006      	movs	r0, #6
 800ab72:	f000 f82d 	bl	800abd0 <raise>
 800ab76:	2001      	movs	r0, #1
 800ab78:	f000 f85a 	bl	800ac30 <_exit>

0800ab7c <_raise_r>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	0004      	movs	r4, r0
 800ab80:	000d      	movs	r5, r1
 800ab82:	291f      	cmp	r1, #31
 800ab84:	d904      	bls.n	800ab90 <_raise_r+0x14>
 800ab86:	2316      	movs	r3, #22
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	4240      	negs	r0, r0
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d004      	beq.n	800aba0 <_raise_r+0x24>
 800ab96:	008a      	lsls	r2, r1, #2
 800ab98:	189b      	adds	r3, r3, r2
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	2a00      	cmp	r2, #0
 800ab9e:	d108      	bne.n	800abb2 <_raise_r+0x36>
 800aba0:	0020      	movs	r0, r4
 800aba2:	f000 f831 	bl	800ac08 <_getpid_r>
 800aba6:	002a      	movs	r2, r5
 800aba8:	0001      	movs	r1, r0
 800abaa:	0020      	movs	r0, r4
 800abac:	f000 f81a 	bl	800abe4 <_kill_r>
 800abb0:	e7ed      	b.n	800ab8e <_raise_r+0x12>
 800abb2:	2000      	movs	r0, #0
 800abb4:	2a01      	cmp	r2, #1
 800abb6:	d0ea      	beq.n	800ab8e <_raise_r+0x12>
 800abb8:	1c51      	adds	r1, r2, #1
 800abba:	d103      	bne.n	800abc4 <_raise_r+0x48>
 800abbc:	2316      	movs	r3, #22
 800abbe:	3001      	adds	r0, #1
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	e7e4      	b.n	800ab8e <_raise_r+0x12>
 800abc4:	2400      	movs	r4, #0
 800abc6:	0028      	movs	r0, r5
 800abc8:	601c      	str	r4, [r3, #0]
 800abca:	4790      	blx	r2
 800abcc:	0020      	movs	r0, r4
 800abce:	e7de      	b.n	800ab8e <_raise_r+0x12>

0800abd0 <raise>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	4b03      	ldr	r3, [pc, #12]	; (800abe0 <raise+0x10>)
 800abd4:	0001      	movs	r1, r0
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	f7ff ffd0 	bl	800ab7c <_raise_r>
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	20000294 	.word	0x20000294

0800abe4 <_kill_r>:
 800abe4:	2300      	movs	r3, #0
 800abe6:	b570      	push	{r4, r5, r6, lr}
 800abe8:	4c06      	ldr	r4, [pc, #24]	; (800ac04 <_kill_r+0x20>)
 800abea:	0005      	movs	r5, r0
 800abec:	0008      	movs	r0, r1
 800abee:	0011      	movs	r1, r2
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	f000 f815 	bl	800ac20 <_kill>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	d103      	bne.n	800ac02 <_kill_r+0x1e>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d000      	beq.n	800ac02 <_kill_r+0x1e>
 800ac00:	602b      	str	r3, [r5, #0]
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	20002124 	.word	0x20002124

0800ac08 <_getpid_r>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	f000 f801 	bl	800ac10 <_getpid>
 800ac0e:	bd10      	pop	{r4, pc}

0800ac10 <_getpid>:
 800ac10:	2258      	movs	r2, #88	; 0x58
 800ac12:	2001      	movs	r0, #1
 800ac14:	4b01      	ldr	r3, [pc, #4]	; (800ac1c <_getpid+0xc>)
 800ac16:	4240      	negs	r0, r0
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	4770      	bx	lr
 800ac1c:	20002124 	.word	0x20002124

0800ac20 <_kill>:
 800ac20:	2258      	movs	r2, #88	; 0x58
 800ac22:	2001      	movs	r0, #1
 800ac24:	4b01      	ldr	r3, [pc, #4]	; (800ac2c <_kill+0xc>)
 800ac26:	4240      	negs	r0, r0
 800ac28:	601a      	str	r2, [r3, #0]
 800ac2a:	4770      	bx	lr
 800ac2c:	20002124 	.word	0x20002124

0800ac30 <_exit>:
 800ac30:	e7fe      	b.n	800ac30 <_exit>
	...

0800ac34 <_init>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	46c0      	nop			; (mov r8, r8)
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr

0800ac40 <_fini>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr
